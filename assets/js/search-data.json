{
  
    
        "post0": {
            "title": "Behind The Scenes of Illini Esports Growth and Engagement Analysis",
            "content": "Table of Contents . 1&nbsp;&nbsp;Behind The Scenes of Illini Esports Growth and Engagement Analysis | 2&nbsp;&nbsp;EDA2.1&nbsp;&nbsp;Growth and Activation | 2.2&nbsp;&nbsp;Historical Engagement | 2.3&nbsp;&nbsp;Engagement by last 28 days | . | 3&nbsp;&nbsp;ETL on Growth and Activation3.1&nbsp;&nbsp;Messing around with date time3.1.1&nbsp;&nbsp;Loading the library | 3.1.2&nbsp;&nbsp;Datetime example | 3.1.3&nbsp;&nbsp;Tests to investigate how to extract date time | 3.1.4&nbsp;&nbsp;Testing substring removal3.1.4.1&nbsp;&nbsp;Removing the plus sign | 3.1.4.2&nbsp;&nbsp;Removing the rest of zeros | . | . | 3.2&nbsp;&nbsp;Removing +00:00Z from the whole column3.2.1&nbsp;&nbsp;split the interval_start_timestamp | . | 3.3&nbsp;&nbsp;Making the new dataframe | 3.4&nbsp;&nbsp;Testing if I could change the months to become a factor | 3.5&nbsp;&nbsp;Extracting date time3.5.1&nbsp;&nbsp;Joins extraction | 3.5.2&nbsp;&nbsp;Sources extraction | 3.5.3&nbsp;&nbsp;Leaves extraction | 3.5.4&nbsp;&nbsp;Messages extraction | 3.5.5&nbsp;&nbsp;Voices extraction | 3.5.6&nbsp;&nbsp;Communicators extraction | . | 3.6&nbsp;&nbsp;Identifying Covid vs Normal Time Periods | . | 4&nbsp;&nbsp;Data Needed For Investigation4.1&nbsp;&nbsp;Historical data | 4.2&nbsp;&nbsp;Last 28 days | . | 5&nbsp;&nbsp;Data Aggregation5.1&nbsp;&nbsp;subsetting by year | 5.2&nbsp;&nbsp;Aggregating by year5.2.1&nbsp;&nbsp;2019 | 5.2.2&nbsp;&nbsp;2020 | 5.2.3&nbsp;&nbsp;2021 | . | 5.3&nbsp;&nbsp;Aggregating by month5.3.1&nbsp;&nbsp;2019 | 5.3.2&nbsp;&nbsp;2020 | 5.3.3&nbsp;&nbsp;2021 | . | 5.4&nbsp;&nbsp;Testing aggregations | 5.5&nbsp;&nbsp;Aggregating by category5.5.1&nbsp;&nbsp;Joins | 5.5.2&nbsp;&nbsp;Leaves5.5.2.1&nbsp;&nbsp;Experimental 3d agg | . | 5.5.3&nbsp;&nbsp;Sources | 5.5.4&nbsp;&nbsp;Communicators | . | . | 6&nbsp;&nbsp;Visualizations6.1&nbsp;&nbsp;all joins | 6.2&nbsp;&nbsp;All leaves | 6.3&nbsp;&nbsp;All communicators | . | 7&nbsp;&nbsp;Multiple Models Excluding Effect of Year7.1&nbsp;&nbsp;New members linear model | 7.2&nbsp;&nbsp;Total messages linear model | 7.3&nbsp;&nbsp;Messages experiments7.3.1&nbsp;&nbsp;Including messages_per_communicator in full model | 7.3.2&nbsp;&nbsp;Including messages_per_communicator in full model | . | 7.4&nbsp;&nbsp;Voices linear model | 7.5&nbsp;&nbsp;Communicators linear model | . | 8&nbsp;&nbsp;Testing Year Effect8.1&nbsp;&nbsp;New members multiple regression model | 8.2&nbsp;&nbsp;Total messages multiple regression model | 8.3&nbsp;&nbsp;Voices multiple regression model | 8.4&nbsp;&nbsp;Communicators multiple regression model | . | . EDA . Growth and Activation . working = &quot;../../../../School/Graduate 2020-2021/03 - Spring 2021/BADM 577/Illini-Esports-Analysis/&quot; join = read.csv(paste(working,&quot;guild-activation.csv&quot;, sep=&quot;&quot;)) join leave = read.csv(paste(working,&quot;guild-leavers.csv&quot;,sep=&quot;&quot;)) leave source = read.csv(paste(working,&quot;guild-joins-by-source.csv&quot;,sep=&quot;&quot;)) source . A data.frame: 729 × 4 interval_start_timestampnew_memberspct_communicatedpct_opened_channels . &lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 2019-03-29T00:00:00+00:00 | 2 | 50.00000 | 50.00000 | . 2019-03-30T00:00:00+00:00 | 6 | 16.66667 | 33.33333 | . 2019-03-31T00:00:00+00:00 | 8 | 25.00000 | 37.50000 | . 2019-04-01T00:00:00+00:00 | 9 | 44.44444 | 33.33333 | . 2019-04-02T00:00:00+00:00 | 2 | 50.00000 | 100.00000 | . 2019-04-03T00:00:00+00:00 | 0 | NA | NA | . 2019-04-04T00:00:00+00:00 | 2 | 100.00000 | 100.00000 | . 2019-04-05T00:00:00+00:00 | 3 | 33.33333 | 0.00000 | . 2019-04-06T00:00:00+00:00 | 2 | 0.00000 | 0.00000 | . 2019-04-07T00:00:00+00:00 | 2 | 0.00000 | 0.00000 | . 2019-04-08T00:00:00+00:00 | 9 | 33.33333 | 33.33333 | . 2019-04-09T00:00:00+00:00 | 3 | 33.33333 | 33.33333 | . 2019-04-10T00:00:00+00:00 | 1 | 100.00000 | 100.00000 | . 2019-04-11T00:00:00+00:00 | 1 | 0.00000 | 100.00000 | . 2019-04-12T00:00:00+00:00 | 1 | 0.00000 | 100.00000 | . 2019-04-13T00:00:00+00:00 | 1 | 0.00000 | 100.00000 | . 2019-04-14T00:00:00+00:00 | 0 | NA | NA | . 2019-04-15T00:00:00+00:00 | 0 | NA | NA | . 2019-04-16T00:00:00+00:00 | 3 | 66.66667 | 0.00000 | . 2019-04-17T00:00:00+00:00 | 5 | 0.00000 | 20.00000 | . 2019-04-18T00:00:00+00:00 | 3 | 100.00000 | 33.33333 | . 2019-04-19T00:00:00+00:00 | 3 | 0.00000 | 33.33333 | . 2019-04-20T00:00:00+00:00 | 0 | NA | NA | . 2019-04-21T00:00:00+00:00 | 1 | 100.00000 | 100.00000 | . 2019-04-22T00:00:00+00:00 | 0 | NA | NA | . 2019-04-23T00:00:00+00:00 | 1 | 0.00000 | 0.00000 | . 2019-04-24T00:00:00+00:00 | 3 | 33.33333 | 0.00000 | . 2019-04-25T00:00:00+00:00 | 3 | 66.66667 | 66.66667 | . 2019-04-26T00:00:00+00:00 | 3 | 33.33333 | 33.33333 | . 2019-04-27T00:00:00+00:00 | 1 | 100.00000 | 0.00000 | . ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00+00:00 | 1 | 0.00000 | 100.00000 | . 2021-02-26T00:00:00+00:00 | 5 | 40.00000 | 100.00000 | . 2021-02-27T00:00:00+00:00 | 8 | 12.50000 | 100.00000 | . 2021-02-28T00:00:00+00:00 | 5 | 20.00000 | 100.00000 | . 2021-03-01T00:00:00+00:00 | 2 | 0.00000 | 50.00000 | . 2021-03-02T00:00:00+00:00 | 6 | 16.66667 | 16.66667 | . 2021-03-03T00:00:00+00:00 | 5 | 0.00000 | 40.00000 | . 2021-03-04T00:00:00+00:00 | 8 | 0.00000 | 62.50000 | . 2021-03-05T00:00:00+00:00 | 3 | 33.33333 | 33.33333 | . 2021-03-06T00:00:00+00:00 | 3 | 0.00000 | 66.66667 | . 2021-03-07T00:00:00+00:00 | 3 | 0.00000 | 33.33333 | . 2021-03-08T00:00:00+00:00 | 7 | 14.28571 | 42.85714 | . 2021-03-09T00:00:00+00:00 | 7 | 0.00000 | 57.14286 | . 2021-03-10T00:00:00+00:00 | 5 | 0.00000 | 40.00000 | . 2021-03-11T00:00:00+00:00 | 1 | 0.00000 | 100.00000 | . 2021-03-12T00:00:00+00:00 | 11 | 18.18182 | 45.45455 | . 2021-03-13T00:00:00+00:00 | 4 | 0.00000 | 50.00000 | . 2021-03-14T00:00:00+00:00 | 1 | 0.00000 | 0.00000 | . 2021-03-15T00:00:00+00:00 | 1 | 0.00000 | 0.00000 | . 2021-03-16T00:00:00+00:00 | 6 | 0.00000 | 83.33333 | . 2021-03-17T00:00:00+00:00 | 7 | 0.00000 | 71.42857 | . 2021-03-18T00:00:00+00:00 | 1 | 0.00000 | 0.00000 | . 2021-03-19T00:00:00+00:00 | 5 | 0.00000 | 80.00000 | . 2021-03-20T00:00:00+00:00 | 2 | 0.00000 | 0.00000 | . 2021-03-21T00:00:00+00:00 | 6 | 33.33333 | 33.33333 | . 2021-03-22T00:00:00+00:00 | 5 | 20.00000 | 60.00000 | . 2021-03-23T00:00:00+00:00 | 1 | 0.00000 | 0.00000 | . 2021-03-24T00:00:00+00:00 | 4 | 0.00000 | 50.00000 | . 2021-03-25T00:00:00+00:00 | 1 | 0.00000 | 0.00000 | . 2021-03-26T00:00:00+00:00 | 4 | NA | NA | . A data.frame: 1104 × 3 interval_start_timestampdays_in_guildleavers . &lt;fct&gt;&lt;fct&gt;&lt;int&gt; . 2019-03-29T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2019-03-30T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2019-03-30T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-03-31T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2019-03-31T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-01T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 4 | . 2019-04-02T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2019-04-03T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2019-04-03T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 2 | . 2019-04-04T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2019-04-04T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 2 | . 2019-04-05T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 3 | . 2019-04-06T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2019-04-06T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-07T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2019-04-07T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 2 | . 2019-04-08T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2019-04-08T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-09T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2019-04-09T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-10T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2019-04-10T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-11T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 0 | . 2019-04-12T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2019-04-13T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-14T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2019-04-15T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2019-04-15T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-16T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 3 | . 2019-04-16T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . ⋮ | ⋮ | ⋮ | . 2021-03-09T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2021-03-09T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-10T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2021-03-10T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 3 | . 2021-03-11T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2021-03-12T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2021-03-12T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 5 | . 2021-03-13T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-14T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2021-03-14T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-15T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2021-03-16T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2021-03-16T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 3 | . 2021-03-17T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 4 | . 2021-03-17T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 2 | . 2021-03-18T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-19T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2021-03-19T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 2 | . 2021-03-20T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 5 | . 2021-03-20T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-21T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2021-03-21T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 3 | . 2021-03-22T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 1 | . 2021-03-23T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 3 | . 2021-03-23T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-24T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 0 | . 2021-03-25T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 2 | . 2021-03-25T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-26T00:00:00+00:00 | &#39;Members for 1 month+&#39; | 3 | . 2021-03-26T00:00:00+00:00 | &#39;Members for &lt; 1 month&#39; | 1 | . A data.frame: 729 × 4 interval_start_timestampdiscovery_joinsinvitesvanity_joins . &lt;fct&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 2019-03-29T00:00:00+00:00 | 0 | 0 | 3 | . 2019-03-30T00:00:00+00:00 | 0 | 0 | 7 | . 2019-03-31T00:00:00+00:00 | 0 | 0 | 8 | . 2019-04-01T00:00:00+00:00 | 0 | 0 | 11 | . 2019-04-02T00:00:00+00:00 | 0 | 0 | 2 | . 2019-04-03T00:00:00+00:00 | 0 | 0 | 1 | . 2019-04-04T00:00:00+00:00 | 0 | 0 | 3 | . 2019-04-05T00:00:00+00:00 | 0 | 0 | 4 | . 2019-04-06T00:00:00+00:00 | 0 | 0 | 3 | . 2019-04-07T00:00:00+00:00 | 0 | 0 | 2 | . 2019-04-08T00:00:00+00:00 | 0 | 0 | 9 | . 2019-04-09T00:00:00+00:00 | 0 | 0 | 3 | . 2019-04-10T00:00:00+00:00 | 0 | 0 | 1 | . 2019-04-11T00:00:00+00:00 | 0 | 0 | 2 | . 2019-04-12T00:00:00+00:00 | 0 | 0 | 1 | . 2019-04-13T00:00:00+00:00 | 0 | 0 | 1 | . 2019-04-14T00:00:00+00:00 | 0 | 0 | 0 | . 2019-04-15T00:00:00+00:00 | 0 | 0 | 0 | . 2019-04-16T00:00:00+00:00 | 0 | 0 | 7 | . 2019-04-17T00:00:00+00:00 | 0 | 0 | 5 | . 2019-04-18T00:00:00+00:00 | 0 | 0 | 6 | . 2019-04-19T00:00:00+00:00 | 0 | 0 | 3 | . 2019-04-20T00:00:00+00:00 | 0 | 0 | 2 | . 2019-04-21T00:00:00+00:00 | 0 | 0 | 1 | . 2019-04-22T00:00:00+00:00 | 0 | 0 | 1 | . 2019-04-23T00:00:00+00:00 | 0 | 0 | 3 | . 2019-04-24T00:00:00+00:00 | 0 | 0 | 3 | . 2019-04-25T00:00:00+00:00 | 0 | 0 | 3 | . 2019-04-26T00:00:00+00:00 | 0 | 0 | 4 | . 2019-04-27T00:00:00+00:00 | 0 | 0 | 3 | . ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00+00:00 | 0 | 0 | 1 | . 2021-02-26T00:00:00+00:00 | 0 | 0 | 6 | . 2021-02-27T00:00:00+00:00 | 0 | 0 | 9 | . 2021-02-28T00:00:00+00:00 | 0 | 0 | 5 | . 2021-03-01T00:00:00+00:00 | 0 | 0 | 3 | . 2021-03-02T00:00:00+00:00 | 0 | 0 | 6 | . 2021-03-03T00:00:00+00:00 | 0 | 0 | 5 | . 2021-03-04T00:00:00+00:00 | 0 | 0 | 8 | . 2021-03-05T00:00:00+00:00 | 0 | 0 | 4 | . 2021-03-06T00:00:00+00:00 | 0 | 0 | 3 | . 2021-03-07T00:00:00+00:00 | 0 | 0 | 4 | . 2021-03-08T00:00:00+00:00 | 0 | 0 | 7 | . 2021-03-09T00:00:00+00:00 | 1 | 0 | 6 | . 2021-03-10T00:00:00+00:00 | 0 | 0 | 5 | . 2021-03-11T00:00:00+00:00 | 0 | 0 | 2 | . 2021-03-12T00:00:00+00:00 | 0 | 0 | 11 | . 2021-03-13T00:00:00+00:00 | 1 | 0 | 3 | . 2021-03-14T00:00:00+00:00 | 0 | 0 | 1 | . 2021-03-15T00:00:00+00:00 | 0 | 0 | 2 | . 2021-03-16T00:00:00+00:00 | 1 | 0 | 6 | . 2021-03-17T00:00:00+00:00 | 1 | 0 | 9 | . 2021-03-18T00:00:00+00:00 | 0 | 0 | 1 | . 2021-03-19T00:00:00+00:00 | 1 | 0 | 4 | . 2021-03-20T00:00:00+00:00 | 0 | 0 | 2 | . 2021-03-21T00:00:00+00:00 | 0 | 0 | 7 | . 2021-03-22T00:00:00+00:00 | 0 | 0 | 6 | . 2021-03-23T00:00:00+00:00 | 0 | 0 | 1 | . 2021-03-24T00:00:00+00:00 | 0 | 0 | 5 | . 2021-03-25T00:00:00+00:00 | 0 | 0 | 2 | . 2021-03-26T00:00:00+00:00 | 0 | 0 | 4 | . . Historical Engagement . message = read.csv(paste(working,&quot;guild-message-activity.csv&quot;,sep=&quot;&quot;)) message voice = read.csv(paste(working,&quot;guild-voice-activity.csv&quot;,sep=&quot;&quot;)) voice communicator = read.csv(paste(working,&quot;guild-communicators.csv&quot;,sep=&quot;&quot;)) communicator . A data.frame: 729 × 3 interval_start_timestampmessagesmessages_per_communicator . &lt;fct&gt;&lt;int&gt;&lt;dbl&gt; . 2019-03-29T00:00:00+00:00 | 334 | 6.301887 | . 2019-03-30T00:00:00+00:00 | 236 | 6.210526 | . 2019-03-31T00:00:00+00:00 | 364 | 8.088889 | . 2019-04-01T00:00:00+00:00 | 404 | 5.386667 | . 2019-04-02T00:00:00+00:00 | 543 | 11.312500 | . 2019-04-03T00:00:00+00:00 | 324 | 7.200000 | . 2019-04-04T00:00:00+00:00 | 556 | 10.901961 | . 2019-04-05T00:00:00+00:00 | 273 | 5.808511 | . 2019-04-06T00:00:00+00:00 | 335 | 7.613636 | . 2019-04-07T00:00:00+00:00 | 1102 | 22.040000 | . 2019-04-08T00:00:00+00:00 | 188 | 4.476190 | . 2019-04-09T00:00:00+00:00 | 399 | 8.673913 | . 2019-04-10T00:00:00+00:00 | 531 | 10.620000 | . 2019-04-11T00:00:00+00:00 | 689 | 13.000000 | . 2019-04-12T00:00:00+00:00 | 418 | 9.086957 | . 2019-04-13T00:00:00+00:00 | 566 | 13.162791 | . 2019-04-14T00:00:00+00:00 | 481 | 12.025000 | . 2019-04-15T00:00:00+00:00 | 659 | 13.180000 | . 2019-04-16T00:00:00+00:00 | 779 | 12.770492 | . 2019-04-17T00:00:00+00:00 | 596 | 11.245283 | . 2019-04-18T00:00:00+00:00 | 1143 | 15.657534 | . 2019-04-19T00:00:00+00:00 | 898 | 16.327273 | . 2019-04-20T00:00:00+00:00 | 331 | 6.490196 | . 2019-04-21T00:00:00+00:00 | 473 | 11.000000 | . 2019-04-22T00:00:00+00:00 | 283 | 7.256410 | . 2019-04-23T00:00:00+00:00 | 1270 | 21.896552 | . 2019-04-24T00:00:00+00:00 | 746 | 14.346154 | . 2019-04-25T00:00:00+00:00 | 287 | 5.519231 | . 2019-04-26T00:00:00+00:00 | 728 | 11.555556 | . 2019-04-27T00:00:00+00:00 | 691 | 12.339286 | . ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00+00:00 | 138 | 3.450000 | . 2021-02-26T00:00:00+00:00 | 78 | 2.437500 | . 2021-02-27T00:00:00+00:00 | 93 | 2.162791 | . 2021-02-28T00:00:00+00:00 | 46 | 1.533333 | . 2021-03-01T00:00:00+00:00 | 53 | 1.766667 | . 2021-03-02T00:00:00+00:00 | 72 | 2.400000 | . 2021-03-03T00:00:00+00:00 | 122 | 4.066667 | . 2021-03-04T00:00:00+00:00 | 168 | 4.941176 | . 2021-03-05T00:00:00+00:00 | 74 | 2.387097 | . 2021-03-06T00:00:00+00:00 | 43 | 1.482759 | . 2021-03-07T00:00:00+00:00 | 43 | 1.720000 | . 2021-03-08T00:00:00+00:00 | 106 | 3.312500 | . 2021-03-09T00:00:00+00:00 | 114 | 3.081081 | . 2021-03-10T00:00:00+00:00 | 83 | 2.593750 | . 2021-03-11T00:00:00+00:00 | 109 | 2.725000 | . 2021-03-12T00:00:00+00:00 | 75 | 2.027027 | . 2021-03-13T00:00:00+00:00 | 158 | 4.647059 | . 2021-03-14T00:00:00+00:00 | 73 | 2.433333 | . 2021-03-15T00:00:00+00:00 | 73 | 2.517241 | . 2021-03-16T00:00:00+00:00 | 52 | 1.575758 | . 2021-03-17T00:00:00+00:00 | 64 | 2.064516 | . 2021-03-18T00:00:00+00:00 | 65 | 2.096774 | . 2021-03-19T00:00:00+00:00 | 182 | 3.500000 | . 2021-03-20T00:00:00+00:00 | 121 | 2.880952 | . 2021-03-21T00:00:00+00:00 | 157 | 3.925000 | . 2021-03-22T00:00:00+00:00 | 94 | 2.410256 | . 2021-03-23T00:00:00+00:00 | 34 | 1.416667 | . 2021-03-24T00:00:00+00:00 | 51 | 1.888889 | . 2021-03-25T00:00:00+00:00 | 120 | 2.857143 | . 2021-03-26T00:00:00+00:00 | 122 | 3.485714 | . A data.frame: 729 × 2 interval_start_timestampspeaking_minutes . &lt;fct&gt;&lt;int&gt; . 2019-03-29T00:00:00+00:00 | 0 | . 2019-03-30T00:00:00+00:00 | 0 | . 2019-03-31T00:00:00+00:00 | 0 | . 2019-04-01T00:00:00+00:00 | 0 | . 2019-04-02T00:00:00+00:00 | 0 | . 2019-04-03T00:00:00+00:00 | 0 | . 2019-04-04T00:00:00+00:00 | 0 | . 2019-04-05T00:00:00+00:00 | 0 | . 2019-04-06T00:00:00+00:00 | 0 | . 2019-04-07T00:00:00+00:00 | 0 | . 2019-04-08T00:00:00+00:00 | 0 | . 2019-04-09T00:00:00+00:00 | 0 | . 2019-04-10T00:00:00+00:00 | 0 | . 2019-04-11T00:00:00+00:00 | 0 | . 2019-04-12T00:00:00+00:00 | 0 | . 2019-04-13T00:00:00+00:00 | 0 | . 2019-04-14T00:00:00+00:00 | 0 | . 2019-04-15T00:00:00+00:00 | 0 | . 2019-04-16T00:00:00+00:00 | 0 | . 2019-04-17T00:00:00+00:00 | 0 | . 2019-04-18T00:00:00+00:00 | 0 | . 2019-04-19T00:00:00+00:00 | 0 | . 2019-04-20T00:00:00+00:00 | 0 | . 2019-04-21T00:00:00+00:00 | 0 | . 2019-04-22T00:00:00+00:00 | 0 | . 2019-04-23T00:00:00+00:00 | 0 | . 2019-04-24T00:00:00+00:00 | 0 | . 2019-04-25T00:00:00+00:00 | 0 | . 2019-04-26T00:00:00+00:00 | 0 | . 2019-04-27T00:00:00+00:00 | 0 | . ⋮ | ⋮ | . 2021-02-25T00:00:00+00:00 | 1495 | . 2021-02-26T00:00:00+00:00 | 913 | . 2021-02-27T00:00:00+00:00 | 1118 | . 2021-02-28T00:00:00+00:00 | 1354 | . 2021-03-01T00:00:00+00:00 | 1269 | . 2021-03-02T00:00:00+00:00 | 1200 | . 2021-03-03T00:00:00+00:00 | 2031 | . 2021-03-04T00:00:00+00:00 | 2293 | . 2021-03-05T00:00:00+00:00 | 1124 | . 2021-03-06T00:00:00+00:00 | 1398 | . 2021-03-07T00:00:00+00:00 | 1460 | . 2021-03-08T00:00:00+00:00 | 1834 | . 2021-03-09T00:00:00+00:00 | 1523 | . 2021-03-10T00:00:00+00:00 | 1119 | . 2021-03-11T00:00:00+00:00 | 1878 | . 2021-03-12T00:00:00+00:00 | 1429 | . 2021-03-13T00:00:00+00:00 | 730 | . 2021-03-14T00:00:00+00:00 | 567 | . 2021-03-15T00:00:00+00:00 | 1282 | . 2021-03-16T00:00:00+00:00 | 1234 | . 2021-03-17T00:00:00+00:00 | 1146 | . 2021-03-18T00:00:00+00:00 | 2464 | . 2021-03-19T00:00:00+00:00 | 840 | . 2021-03-20T00:00:00+00:00 | 428 | . 2021-03-21T00:00:00+00:00 | 880 | . 2021-03-22T00:00:00+00:00 | 1598 | . 2021-03-23T00:00:00+00:00 | 873 | . 2021-03-24T00:00:00+00:00 | 771 | . 2021-03-25T00:00:00+00:00 | 1742 | . 2021-03-26T00:00:00+00:00 | 1038 | . A data.frame: 729 × 3 interval_start_timestampvisitorspct_communicated . &lt;fct&gt;&lt;int&gt;&lt;dbl&gt; . 2019-03-29T00:00:00+00:00 | 206 | 25.72816 | . 2019-03-30T00:00:00+00:00 | 184 | 20.65217 | . 2019-03-31T00:00:00+00:00 | 185 | 24.32432 | . 2019-04-01T00:00:00+00:00 | 328 | 22.86585 | . 2019-04-02T00:00:00+00:00 | 143 | 33.56643 | . 2019-04-03T00:00:00+00:00 | 271 | 16.60517 | . 2019-04-04T00:00:00+00:00 | 381 | 13.38583 | . 2019-04-05T00:00:00+00:00 | 190 | 24.73684 | . 2019-04-06T00:00:00+00:00 | 163 | 26.99387 | . 2019-04-07T00:00:00+00:00 | 159 | 31.44654 | . 2019-04-08T00:00:00+00:00 | 163 | 25.76687 | . 2019-04-09T00:00:00+00:00 | 148 | 31.08108 | . 2019-04-10T00:00:00+00:00 | 163 | 30.67485 | . 2019-04-11T00:00:00+00:00 | 139 | 38.12950 | . 2019-04-12T00:00:00+00:00 | 155 | 29.67742 | . 2019-04-13T00:00:00+00:00 | 143 | 30.06993 | . 2019-04-14T00:00:00+00:00 | 140 | 28.57143 | . 2019-04-15T00:00:00+00:00 | 170 | 29.41176 | . 2019-04-16T00:00:00+00:00 | 150 | 40.66667 | . 2019-04-17T00:00:00+00:00 | 153 | 34.64052 | . 2019-04-18T00:00:00+00:00 | 167 | 43.71257 | . 2019-04-19T00:00:00+00:00 | 162 | 33.95062 | . 2019-04-20T00:00:00+00:00 | 337 | 15.13353 | . 2019-04-21T00:00:00+00:00 | 172 | 25.00000 | . 2019-04-22T00:00:00+00:00 | 162 | 24.07407 | . 2019-04-23T00:00:00+00:00 | 163 | 35.58282 | . 2019-04-24T00:00:00+00:00 | 340 | 15.29412 | . 2019-04-25T00:00:00+00:00 | 196 | 26.53061 | . 2019-04-26T00:00:00+00:00 | 371 | 16.98113 | . 2019-04-27T00:00:00+00:00 | 201 | 27.86070 | . ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00+00:00 | 172 | 23.255814 | . 2021-02-26T00:00:00+00:00 | 167 | 19.161677 | . 2021-02-27T00:00:00+00:00 | 208 | 20.673077 | . 2021-02-28T00:00:00+00:00 | 167 | 17.964072 | . 2021-03-01T00:00:00+00:00 | 164 | 18.292683 | . 2021-03-02T00:00:00+00:00 | 199 | 15.075377 | . 2021-03-03T00:00:00+00:00 | 163 | 18.404908 | . 2021-03-04T00:00:00+00:00 | 163 | 20.858896 | . 2021-03-05T00:00:00+00:00 | 179 | 17.318436 | . 2021-03-06T00:00:00+00:00 | 304 | 9.539474 | . 2021-03-07T00:00:00+00:00 | 162 | 15.432099 | . 2021-03-08T00:00:00+00:00 | 234 | 13.675214 | . 2021-03-09T00:00:00+00:00 | 160 | 23.125000 | . 2021-03-10T00:00:00+00:00 | 156 | 20.512821 | . 2021-03-11T00:00:00+00:00 | 553 | 7.233273 | . 2021-03-12T00:00:00+00:00 | 253 | 14.624506 | . 2021-03-13T00:00:00+00:00 | 237 | 14.345992 | . 2021-03-14T00:00:00+00:00 | 147 | 20.408163 | . 2021-03-15T00:00:00+00:00 | 154 | 18.831169 | . 2021-03-16T00:00:00+00:00 | 154 | 21.428571 | . 2021-03-17T00:00:00+00:00 | 141 | 21.985816 | . 2021-03-18T00:00:00+00:00 | 153 | 20.261438 | . 2021-03-19T00:00:00+00:00 | 268 | 19.402985 | . 2021-03-20T00:00:00+00:00 | 658 | 6.382979 | . 2021-03-21T00:00:00+00:00 | 170 | 23.529412 | . 2021-03-22T00:00:00+00:00 | 174 | 22.413793 | . 2021-03-23T00:00:00+00:00 | 143 | 16.783217 | . 2021-03-24T00:00:00+00:00 | 157 | 17.197452 | . 2021-03-25T00:00:00+00:00 | 165 | 25.454545 | . 2021-03-26T00:00:00+00:00 | 573 | 6.108202 | . . Engagement by last 28 days . text = read.csv(paste(working,&quot;popular-text-channels.csv&quot;,sep=&quot;&quot;)) text voice_channel = read.csv(paste(working,&quot;popular-voice-channels.csv&quot;,sep=&quot;&quot;)) voice_channel . A data.frame: 92 × 6 interval_start_timestampchannel_namechannel_idreaderschattersmessages . &lt;fct&gt;&lt;fct&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 2021-03-27T00:00:00+00:00 | general | 2.124359e+17 | 218 | 51 | 264 | . 2021-03-27T00:00:00+00:00 | hearthstone | 2.124361e+17 | 3 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | overwatch | 2.124362e+17 | 98 | 38 | 794 | . 2021-03-27T00:00:00+00:00 | lol | 2.124362e+17 | 97 | 31 | 181 | . 2021-03-27T00:00:00+00:00 | csgo | 2.124363e+17 | 29 | 4 | 5 | . 2021-03-27T00:00:00+00:00 | dota2 | 2.124364e+17 | 17 | 5 | 11 | . 2021-03-27T00:00:00+00:00 | announcements | 2.124422e+17 | 880 | 1 | 4 | . 2021-03-27T00:00:00+00:00 | other-games | 2.127412e+17 | 46 | 7 | 13 | . 2021-03-27T00:00:00+00:00 | suggestions | 2.130108e+17 | 27 | 4 | 5 | . 2021-03-27T00:00:00+00:00 | memes | 2.170801e+17 | 71 | 11 | 36 | . 2021-03-27T00:00:00+00:00 | rocketleague | 2.173062e+17 | 5 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | music_channel | 2.182282e+17 | 20 | 3 | 11 | . 2021-03-27T00:00:00+00:00 | bot-stuff | 2.185181e+17 | 47 | 9 | 326 | . 2021-03-27T00:00:00+00:00 | overwatch_info | 2.185562e+17 | 154 | 2 | 7 | . 2021-03-27T00:00:00+00:00 | casual-smite | 2.187252e+17 | 1 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | lol_info | 2.254194e+17 | 212 | 4 | 8 | . 2021-03-27T00:00:00+00:00 | runescape | 2.573993e+17 | 15 | 1 | 7 | . 2021-03-27T00:00:00+00:00 | dota_info | 2.793684e+17 | 1 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | osu | 2.808585e+17 | 33 | 4 | 15 | . 2021-03-27T00:00:00+00:00 | study_buddies | 2.971659e+17 | 23 | 8 | 34 | . 2021-03-27T00:00:00+00:00 | testing-bots | 3.308046e+17 | 1 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | around-town | 3.511549e+17 | 28 | 9 | 16 | . 2021-03-27T00:00:00+00:00 | console-games | 3.515872e+17 | 1 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | rainbow-6 | 3.595436e+17 | 21 | 4 | 9 | . 2021-03-27T00:00:00+00:00 | tech-talk | 3.656845e+17 | 49 | 14 | 90 | . 2021-03-27T00:00:00+00:00 | sports | 3.675733e+17 | 45 | 14 | 105 | . 2021-03-27T00:00:00+00:00 | destiny2 | 3.731533e+17 | 18 | 2 | 4 | . 2021-03-27T00:00:00+00:00 | anime | 3.733290e+17 | 70 | 19 | 74 | . 2021-03-27T00:00:00+00:00 | smite_info | 3.776109e+17 | 22 | 1 | 1 | . 2021-03-27T00:00:00+00:00 | crowns_feedback | 3.794238e+17 | 1 | 0 | 0 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-03-27T00:00:00+00:00 | valorant_info | 6.958404e+17 | 168 | 1 | 5 | . 2021-03-27T00:00:00+00:00 | valorant_news | 6.964060e+17 | 20 | 1 | 3 | . 2021-03-27T00:00:00+00:00 | valorant_lfg | 6.994457e+17 | 62 | 13 | 43 | . 2021-03-27T00:00:00+00:00 | stream-highlights | 7.055643e+17 | 2 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | virtual-reality-info | 7.164619e+17 | 25 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | virtual-reality | 7.164626e+17 | 11 | 2 | 7 | . 2021-03-27T00:00:00+00:00 | competitive-smite | 7.226659e+17 | 10 | 3 | 8 | . 2021-03-27T00:00:00+00:00 | smash-info | 7.272015e+17 | 8 | 1 | 2 | . 2021-03-27T00:00:00+00:00 | minecraft-rules | 7.333804e+17 | 1 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | altdentifier-updates | 7.362728e+17 | 5 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | moderator-only | 7.413646e+17 | 1 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | social-gaming-info | 7.505845e+17 | 37 | 1 | 5 | . 2021-03-27T00:00:00+00:00 | marketplace-listings | 7.511623e+17 | 25 | 2 | 2 | . 2021-03-27T00:00:00+00:00 | bot-updates | 7.512931e+17 | 1 | 4 | 6 | . 2021-03-27T00:00:00+00:00 | yagpdb-bot-logs | 7.548220e+17 | 8 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | 3v3-lft | 7.556002e+17 | 5 | 2 | 2 | . 2021-03-27T00:00:00+00:00 | tourney-info | 7.556008e+17 | 1 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | partner-servers | 7.603847e+17 | 5 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | read-me-first | 7.605702e+17 | 9 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | genshin-impact | 7.638568e+17 | 53 | 9 | 159 | . 2021-03-27T00:00:00+00:00 | shib-logs | 7.697164e+17 | 3 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | server-logs | 7.697269e+17 | 4 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | cloud9-affiliate-discord | 7.768122e+17 | 87 | 1 | 9 | . 2021-03-27T00:00:00+00:00 | tournament-screen-shots | 7.973465e+17 | 30 | 4 | 10 | . 2021-03-27T00:00:00+00:00 | alea-3631 | 8.015882e+17 | 1 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | hearthstone-news | 8.040561e+17 | 1 | 0 | 0 | . 2021-03-27T00:00:00+00:00 | server-change-log | 8.045228e+17 | 36 | 1 | 1 | . 2021-03-27T00:00:00+00:00 | master-overwatch | 8.073712e+17 | 51 | 1 | 9 | . 2021-03-27T00:00:00+00:00 | team-fortress-2 | 8.152788e+17 | 50 | 4 | 53 | . 2021-03-27T00:00:00+00:00 | vc-context | 8.224238e+17 | 43 | 5 | 11 | . A data.frame: 12 × 5 interval_start_timestampchannel_namechannel_idlistenerscommunicators . &lt;fct&gt;&lt;fct&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt; . 2021-03-27T00:00:00+00:00 | AFK Channel | 2.559102e+17 | 7 | 0 | . 2021-03-27T00:00:00+00:00 | Overwatch Oasis | 2.617080e+17 | 17 | 16 | . 2021-03-27T00:00:00+00:00 | LoL In-House Lobby | 2.834215e+17 | 2 | 2 | . 2021-03-27T00:00:00+00:00 | Overwatch Room 1 | 3.533817e+17 | 17 | 16 | . 2021-03-27T00:00:00+00:00 | General Gaming | 5.960341e+17 | 10 | 10 | . 2021-03-27T00:00:00+00:00 | Music Channel | 5.960341e+17 | 2 | 3 | . 2021-03-27T00:00:00+00:00 | Overwatch Room 2 | 6.000934e+17 | 14 | 14 | . 2021-03-27T00:00:00+00:00 | Throwstack Oasis | 6.153540e+17 | 14 | 14 | . 2021-03-27T00:00:00+00:00 | Valorant Haven | 6.958620e+17 | 3 | 3 | . 2021-03-27T00:00:00+00:00 | Social Gaming | 6.960872e+17 | 15 | 14 | . 2021-03-27T00:00:00+00:00 | IE-LIVE | 7.687174e+17 | 1 | 0 | . 2021-03-27T00:00:00+00:00 | Apex Oasis | 8.093469e+17 | 28 | 27 | . . ETL on Growth and Activation . Messing around with date time . Loading the library . library(lubridate) . Datetime example . I grabbed this example from astrostats.psu. The Berkely Stat Dates page Dates and Times in R was a great reference for the code and values for datetime . Code Value . %d | Day of the month (decimal number) | . %m | Month (decimal number) | . %b | Month (abbreviated) | . %B | Month (full name) | . %y | Year (2 digit) | . %Y | Year (4 digit) | . dates &lt;- c(&quot;02/27/92&quot;, &quot;02/27/92&quot;, &quot;01/14/92&quot;, &quot;02/28/92&quot;, &quot;02/01/92&quot;) times &lt;- c(&quot;23:03:20&quot;, &quot;22:29:56&quot;, &quot;01:03:30&quot;, &quot;18:21:03&quot;, &quot;16:56:26&quot;) x &lt;- paste(dates, times) strptime(x, &quot;%m/%d/%y %H:%M:%S&quot;) strptime(x, &quot;%m/&quot;) . [1] &#34;1992-02-27 23:03:20 CST&#34; &#34;1992-02-27 22:29:56 CST&#34; [3] &#34;1992-01-14 01:03:30 CST&#34; &#34;1992-02-28 18:21:03 CST&#34; [5] &#34;1992-02-01 16:56:26 CST&#34; . [1] NA NA NA NA NA . Tests to investigate how to extract date time . These were scuffed tests I used to learn how to extract the date time . the variable test made me realize removing +00:00 and replacing it with a Z would make the data in a format that can be read by R | the variable test2 was my attempt to try getting it for an entire column | . test = &quot;2021-03-27T00:00:00Z&quot; str(ymd_hms(test)) test2 = join$interval_start_timestamp #test2 #ymd_hms(join$interval_start_timestamp) head(strptime(test2, &quot;%Y-%m-%dT%H:%M:%SZ&quot;)) . POSIXct[1:1], format: &#34;2021-03-27&#34; . [1] &#34;2019-03-29 CDT&#34; &#34;2019-03-30 CDT&#34; &#34;2019-03-31 CDT&#34; &#34;2019-04-01 CDT&#34; [5] &#34;2019-04-02 CDT&#34; &#34;2019-04-03 CDT&#34; . While performing my tests, I struggled understanding format of the date was in, a search of a 2021-03-27T00:00:00+00:00 datatype pointed me to a stack overflow page that helped me learn more about python functions Date Time Formats in Python. . Testing substring removal . with a understanding of what I needed to make it possible, I moved on to learn about substring replacement. This took a long time to figure out and understand. | . Removing the plus sign . a search of R remove all text after plus sign helped me break through this barrier I found that this answer on stackoverflow was particularly helpful in removing the + sign How to remove + (plus sign) from string in R?. gsub seemed to be the recommend choice among all answers . Removing the rest of zeros . I found the following stackoverflow answer that had a example for how to remove the rest of a string Remove all text before colon. I couldn&#39;t remember how to remove everything after the + so the following example from stevencarlislewalker&#39;s blog was particularly helpful in refreshing my memory Remove (or replace) everything before or after a specified character in R strings . gsub(&quot; +.*&quot;, &#39;Z&#39;, &quot;2021-03-27T00:00:00+00:00&quot;) . &#39;2021-03-27T00:00:00Z&#39; Removing +00:00Z from the whole column . these were tests I ran to automate this for all the datetime rows. . #join[1,1] = gsub(&quot; +.*&quot;, &#39;Z&#39;, join[1,1]) #join join[,1] = gsub(&quot; +.*&quot;, &#39;Z&#39;, join[,1]) join . A data.frame: 729 × 4 interval_start_timestampnew_memberspct_communicatedpct_opened_channels . &lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 2019-03-29T00:00:00Z | 2 | 50.00000 | 50.00000 | . 2019-03-30T00:00:00Z | 6 | 16.66667 | 33.33333 | . 2019-03-31T00:00:00Z | 8 | 25.00000 | 37.50000 | . 2019-04-01T00:00:00Z | 9 | 44.44444 | 33.33333 | . 2019-04-02T00:00:00Z | 2 | 50.00000 | 100.00000 | . 2019-04-03T00:00:00Z | 0 | NA | NA | . 2019-04-04T00:00:00Z | 2 | 100.00000 | 100.00000 | . 2019-04-05T00:00:00Z | 3 | 33.33333 | 0.00000 | . 2019-04-06T00:00:00Z | 2 | 0.00000 | 0.00000 | . 2019-04-07T00:00:00Z | 2 | 0.00000 | 0.00000 | . 2019-04-08T00:00:00Z | 9 | 33.33333 | 33.33333 | . 2019-04-09T00:00:00Z | 3 | 33.33333 | 33.33333 | . 2019-04-10T00:00:00Z | 1 | 100.00000 | 100.00000 | . 2019-04-11T00:00:00Z | 1 | 0.00000 | 100.00000 | . 2019-04-12T00:00:00Z | 1 | 0.00000 | 100.00000 | . 2019-04-13T00:00:00Z | 1 | 0.00000 | 100.00000 | . 2019-04-14T00:00:00Z | 0 | NA | NA | . 2019-04-15T00:00:00Z | 0 | NA | NA | . 2019-04-16T00:00:00Z | 3 | 66.66667 | 0.00000 | . 2019-04-17T00:00:00Z | 5 | 0.00000 | 20.00000 | . 2019-04-18T00:00:00Z | 3 | 100.00000 | 33.33333 | . 2019-04-19T00:00:00Z | 3 | 0.00000 | 33.33333 | . 2019-04-20T00:00:00Z | 0 | NA | NA | . 2019-04-21T00:00:00Z | 1 | 100.00000 | 100.00000 | . 2019-04-22T00:00:00Z | 0 | NA | NA | . 2019-04-23T00:00:00Z | 1 | 0.00000 | 0.00000 | . 2019-04-24T00:00:00Z | 3 | 33.33333 | 0.00000 | . 2019-04-25T00:00:00Z | 3 | 66.66667 | 66.66667 | . 2019-04-26T00:00:00Z | 3 | 33.33333 | 33.33333 | . 2019-04-27T00:00:00Z | 1 | 100.00000 | 0.00000 | . ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 1 | 0.00000 | 100.00000 | . 2021-02-26T00:00:00Z | 5 | 40.00000 | 100.00000 | . 2021-02-27T00:00:00Z | 8 | 12.50000 | 100.00000 | . 2021-02-28T00:00:00Z | 5 | 20.00000 | 100.00000 | . 2021-03-01T00:00:00Z | 2 | 0.00000 | 50.00000 | . 2021-03-02T00:00:00Z | 6 | 16.66667 | 16.66667 | . 2021-03-03T00:00:00Z | 5 | 0.00000 | 40.00000 | . 2021-03-04T00:00:00Z | 8 | 0.00000 | 62.50000 | . 2021-03-05T00:00:00Z | 3 | 33.33333 | 33.33333 | . 2021-03-06T00:00:00Z | 3 | 0.00000 | 66.66667 | . 2021-03-07T00:00:00Z | 3 | 0.00000 | 33.33333 | . 2021-03-08T00:00:00Z | 7 | 14.28571 | 42.85714 | . 2021-03-09T00:00:00Z | 7 | 0.00000 | 57.14286 | . 2021-03-10T00:00:00Z | 5 | 0.00000 | 40.00000 | . 2021-03-11T00:00:00Z | 1 | 0.00000 | 100.00000 | . 2021-03-12T00:00:00Z | 11 | 18.18182 | 45.45455 | . 2021-03-13T00:00:00Z | 4 | 0.00000 | 50.00000 | . 2021-03-14T00:00:00Z | 1 | 0.00000 | 0.00000 | . 2021-03-15T00:00:00Z | 1 | 0.00000 | 0.00000 | . 2021-03-16T00:00:00Z | 6 | 0.00000 | 83.33333 | . 2021-03-17T00:00:00Z | 7 | 0.00000 | 71.42857 | . 2021-03-18T00:00:00Z | 1 | 0.00000 | 0.00000 | . 2021-03-19T00:00:00Z | 5 | 0.00000 | 80.00000 | . 2021-03-20T00:00:00Z | 2 | 0.00000 | 0.00000 | . 2021-03-21T00:00:00Z | 6 | 33.33333 | 33.33333 | . 2021-03-22T00:00:00Z | 5 | 20.00000 | 60.00000 | . 2021-03-23T00:00:00Z | 1 | 0.00000 | 0.00000 | . 2021-03-24T00:00:00Z | 4 | 0.00000 | 50.00000 | . 2021-03-25T00:00:00Z | 1 | 0.00000 | 0.00000 | . 2021-03-26T00:00:00Z | 4 | NA | NA | . . split the interval_start_timestamp . Once I got it working on a row, I applied what I learned above to extract the year, month, and day from the initial datetime object Later when I was generating the bar charts, I had issues ordering the data by calendar months, a quick search yielded Sorting months in R I learned that passing months into factor with the levels = month.name would allow me to sort by the months . year = year(as.POSIXlt(join$interval_start_timestamp)) month = factor(months(as.POSIXlt(join$interval_start_timestamp)),levels = month.name) day = weekdays(as.POSIXlt(join$interval_start_timestamp)) . Making the new dataframe . After making the split dataframes, I used a cbind to append the columns to the original dataset and reordered the dataset. . joins = cbind(join, year, month,day) joins joins = joins[,c(1,5,6,7,2,3,4)] joins . A data.frame: 729 × 7 interval_start_timestampnew_memberspct_communicatedpct_opened_channelsyearmonthday . &lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2 | 50.00000 | 50.00000 | 2019 | March | Friday | . 2019-03-30T00:00:00Z | 6 | 16.66667 | 33.33333 | 2019 | March | Saturday | . 2019-03-31T00:00:00Z | 8 | 25.00000 | 37.50000 | 2019 | March | Sunday | . 2019-04-01T00:00:00Z | 9 | 44.44444 | 33.33333 | 2019 | April | Monday | . 2019-04-02T00:00:00Z | 2 | 50.00000 | 100.00000 | 2019 | April | Tuesday | . 2019-04-03T00:00:00Z | 0 | NA | NA | 2019 | April | Wednesday | . 2019-04-04T00:00:00Z | 2 | 100.00000 | 100.00000 | 2019 | April | Thursday | . 2019-04-05T00:00:00Z | 3 | 33.33333 | 0.00000 | 2019 | April | Friday | . 2019-04-06T00:00:00Z | 2 | 0.00000 | 0.00000 | 2019 | April | Saturday | . 2019-04-07T00:00:00Z | 2 | 0.00000 | 0.00000 | 2019 | April | Sunday | . 2019-04-08T00:00:00Z | 9 | 33.33333 | 33.33333 | 2019 | April | Monday | . 2019-04-09T00:00:00Z | 3 | 33.33333 | 33.33333 | 2019 | April | Tuesday | . 2019-04-10T00:00:00Z | 1 | 100.00000 | 100.00000 | 2019 | April | Wednesday | . 2019-04-11T00:00:00Z | 1 | 0.00000 | 100.00000 | 2019 | April | Thursday | . 2019-04-12T00:00:00Z | 1 | 0.00000 | 100.00000 | 2019 | April | Friday | . 2019-04-13T00:00:00Z | 1 | 0.00000 | 100.00000 | 2019 | April | Saturday | . 2019-04-14T00:00:00Z | 0 | NA | NA | 2019 | April | Sunday | . 2019-04-15T00:00:00Z | 0 | NA | NA | 2019 | April | Monday | . 2019-04-16T00:00:00Z | 3 | 66.66667 | 0.00000 | 2019 | April | Tuesday | . 2019-04-17T00:00:00Z | 5 | 0.00000 | 20.00000 | 2019 | April | Wednesday | . 2019-04-18T00:00:00Z | 3 | 100.00000 | 33.33333 | 2019 | April | Thursday | . 2019-04-19T00:00:00Z | 3 | 0.00000 | 33.33333 | 2019 | April | Friday | . 2019-04-20T00:00:00Z | 0 | NA | NA | 2019 | April | Saturday | . 2019-04-21T00:00:00Z | 1 | 100.00000 | 100.00000 | 2019 | April | Sunday | . 2019-04-22T00:00:00Z | 0 | NA | NA | 2019 | April | Monday | . 2019-04-23T00:00:00Z | 1 | 0.00000 | 0.00000 | 2019 | April | Tuesday | . 2019-04-24T00:00:00Z | 3 | 33.33333 | 0.00000 | 2019 | April | Wednesday | . 2019-04-25T00:00:00Z | 3 | 66.66667 | 66.66667 | 2019 | April | Thursday | . 2019-04-26T00:00:00Z | 3 | 33.33333 | 33.33333 | 2019 | April | Friday | . 2019-04-27T00:00:00Z | 1 | 100.00000 | 0.00000 | 2019 | April | Saturday | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 1 | 0.00000 | 100.00000 | 2021 | February | Thursday | . 2021-02-26T00:00:00Z | 5 | 40.00000 | 100.00000 | 2021 | February | Friday | . 2021-02-27T00:00:00Z | 8 | 12.50000 | 100.00000 | 2021 | February | Saturday | . 2021-02-28T00:00:00Z | 5 | 20.00000 | 100.00000 | 2021 | February | Sunday | . 2021-03-01T00:00:00Z | 2 | 0.00000 | 50.00000 | 2021 | March | Monday | . 2021-03-02T00:00:00Z | 6 | 16.66667 | 16.66667 | 2021 | March | Tuesday | . 2021-03-03T00:00:00Z | 5 | 0.00000 | 40.00000 | 2021 | March | Wednesday | . 2021-03-04T00:00:00Z | 8 | 0.00000 | 62.50000 | 2021 | March | Thursday | . 2021-03-05T00:00:00Z | 3 | 33.33333 | 33.33333 | 2021 | March | Friday | . 2021-03-06T00:00:00Z | 3 | 0.00000 | 66.66667 | 2021 | March | Saturday | . 2021-03-07T00:00:00Z | 3 | 0.00000 | 33.33333 | 2021 | March | Sunday | . 2021-03-08T00:00:00Z | 7 | 14.28571 | 42.85714 | 2021 | March | Monday | . 2021-03-09T00:00:00Z | 7 | 0.00000 | 57.14286 | 2021 | March | Tuesday | . 2021-03-10T00:00:00Z | 5 | 0.00000 | 40.00000 | 2021 | March | Wednesday | . 2021-03-11T00:00:00Z | 1 | 0.00000 | 100.00000 | 2021 | March | Thursday | . 2021-03-12T00:00:00Z | 11 | 18.18182 | 45.45455 | 2021 | March | Friday | . 2021-03-13T00:00:00Z | 4 | 0.00000 | 50.00000 | 2021 | March | Saturday | . 2021-03-14T00:00:00Z | 1 | 0.00000 | 0.00000 | 2021 | March | Sunday | . 2021-03-15T00:00:00Z | 1 | 0.00000 | 0.00000 | 2021 | March | Monday | . 2021-03-16T00:00:00Z | 6 | 0.00000 | 83.33333 | 2021 | March | Tuesday | . 2021-03-17T00:00:00Z | 7 | 0.00000 | 71.42857 | 2021 | March | Wednesday | . 2021-03-18T00:00:00Z | 1 | 0.00000 | 0.00000 | 2021 | March | Thursday | . 2021-03-19T00:00:00Z | 5 | 0.00000 | 80.00000 | 2021 | March | Friday | . 2021-03-20T00:00:00Z | 2 | 0.00000 | 0.00000 | 2021 | March | Saturday | . 2021-03-21T00:00:00Z | 6 | 33.33333 | 33.33333 | 2021 | March | Sunday | . 2021-03-22T00:00:00Z | 5 | 20.00000 | 60.00000 | 2021 | March | Monday | . 2021-03-23T00:00:00Z | 1 | 0.00000 | 0.00000 | 2021 | March | Tuesday | . 2021-03-24T00:00:00Z | 4 | 0.00000 | 50.00000 | 2021 | March | Wednesday | . 2021-03-25T00:00:00Z | 1 | 0.00000 | 0.00000 | 2021 | March | Thursday | . 2021-03-26T00:00:00Z | 4 | NA | NA | 2021 | March | Friday | . A data.frame: 729 × 7 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channels . &lt;chr&gt;&lt;dbl&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 2 | 100.00000 | 100.00000 | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 0.00000 | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 2 | 0.00000 | 0.00000 | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 2 | 0.00000 | 0.00000 | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 9 | 33.33333 | 33.33333 | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 3 | 33.33333 | 33.33333 | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 1 | 100.00000 | 100.00000 | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 1 | 0.00000 | 100.00000 | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 1 | 0.00000 | 100.00000 | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 1 | 0.00000 | 100.00000 | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | NA | NA | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 3 | 66.66667 | 0.00000 | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 5 | 0.00000 | 20.00000 | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 3 | 100.00000 | 33.33333 | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 3 | 0.00000 | 33.33333 | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | NA | NA | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 1 | 100.00000 | 100.00000 | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 1 | 0.00000 | 0.00000 | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 3 | 33.33333 | 0.00000 | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 3 | 66.66667 | 66.66667 | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 33.33333 | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 1 | 100.00000 | 0.00000 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 1 | 0.00000 | 100.00000 | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 5 | 40.00000 | 100.00000 | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 8 | 12.50000 | 100.00000 | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 5 | 20.00000 | 100.00000 | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 2 | 0.00000 | 50.00000 | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 6 | 16.66667 | 16.66667 | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 8 | 0.00000 | 62.50000 | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 3 | 33.33333 | 33.33333 | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 3 | 0.00000 | 66.66667 | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 3 | 0.00000 | 33.33333 | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 7 | 14.28571 | 42.85714 | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 7 | 0.00000 | 57.14286 | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 100.00000 | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 11 | 18.18182 | 45.45455 | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 4 | 0.00000 | 50.00000 | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 1 | 0.00000 | 0.00000 | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 1 | 0.00000 | 0.00000 | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 6 | 0.00000 | 83.33333 | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 7 | 0.00000 | 71.42857 | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 5 | 0.00000 | 80.00000 | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 2 | 0.00000 | 0.00000 | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 6 | 33.33333 | 33.33333 | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 5 | 20.00000 | 60.00000 | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 1 | 0.00000 | 0.00000 | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 4 | 0.00000 | 50.00000 | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 4 | NA | NA | . . Testing if I could change the months to become a factor . factor(months(as.POSIXlt(join$interval_start_timestamp)),levels = month.name)[1:20] . &lt;ol class=list-inline&gt;March | March | March | April | April | April | April | April | April | April | April | April | April | April | April | April | April | April | April | April | &lt;/ol&gt; &lt;summary style=display:list-item;cursor:pointer&gt; Levels: &lt;/summary&gt; &lt;ol class=list-inline&gt;&#39;January&#39; | &#39;February&#39; | &#39;March&#39; | &#39;April&#39; | &#39;May&#39; | &#39;June&#39; | &#39;July&#39; | &#39;August&#39; | &#39;September&#39; | &#39;October&#39; | &#39;November&#39; | &#39;December&#39; | &lt;/ol&gt; Extracting date time . run the following cell to extract year, month, day . Joins extraction . # substring replacement join[,1] = gsub(&quot; +.*&quot;, &#39;Z&#39;, join[,1]) # individual extraction year = factor(year(as.POSIXlt(join[,1]))) month = factor(months(as.POSIXlt(join[,1])),levels = month.name) day = weekdays(as.POSIXlt(join[,1])) # appending new indivually extracted dates joins = cbind(join, year, month,day) joins = joins[,c(1,5,6,7,2,3,4)] joins . A data.frame: 729 × 7 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channels . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 2 | 100.00000 | 100.00000 | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 0.00000 | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 2 | 0.00000 | 0.00000 | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 2 | 0.00000 | 0.00000 | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 9 | 33.33333 | 33.33333 | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 3 | 33.33333 | 33.33333 | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 1 | 100.00000 | 100.00000 | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 1 | 0.00000 | 100.00000 | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 1 | 0.00000 | 100.00000 | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 1 | 0.00000 | 100.00000 | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | NA | NA | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 3 | 66.66667 | 0.00000 | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 5 | 0.00000 | 20.00000 | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 3 | 100.00000 | 33.33333 | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 3 | 0.00000 | 33.33333 | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | NA | NA | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 1 | 100.00000 | 100.00000 | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 1 | 0.00000 | 0.00000 | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 3 | 33.33333 | 0.00000 | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 3 | 66.66667 | 66.66667 | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 33.33333 | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 1 | 100.00000 | 0.00000 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 1 | 0.00000 | 100.00000 | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 5 | 40.00000 | 100.00000 | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 8 | 12.50000 | 100.00000 | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 5 | 20.00000 | 100.00000 | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 2 | 0.00000 | 50.00000 | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 6 | 16.66667 | 16.66667 | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 8 | 0.00000 | 62.50000 | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 3 | 33.33333 | 33.33333 | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 3 | 0.00000 | 66.66667 | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 3 | 0.00000 | 33.33333 | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 7 | 14.28571 | 42.85714 | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 7 | 0.00000 | 57.14286 | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 100.00000 | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 11 | 18.18182 | 45.45455 | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 4 | 0.00000 | 50.00000 | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 1 | 0.00000 | 0.00000 | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 1 | 0.00000 | 0.00000 | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 6 | 0.00000 | 83.33333 | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 7 | 0.00000 | 71.42857 | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 5 | 0.00000 | 80.00000 | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 2 | 0.00000 | 0.00000 | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 6 | 33.33333 | 33.33333 | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 5 | 20.00000 | 60.00000 | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 1 | 0.00000 | 0.00000 | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 4 | 0.00000 | 50.00000 | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 4 | NA | NA | . . Sources extraction . # substring replacement source[,1] = gsub(&quot; +.*&quot;, &#39;Z&#39;, source[,1]) # individual extraction year = factor(year(as.POSIXlt(source[,1]))) month = factor(months(as.POSIXlt(source[,1])),levels = month.name) day = weekdays(as.POSIXlt(source[,1])) # appending new indivually extracted dates sources = cbind(source, year, month,day) sources = sources[,c(1,5,6,7,2,3,4)] sources . A data.frame: 729 × 7 interval_start_timestampyearmonthdaydiscovery_joinsinvitesvanity_joins . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 0 | 0 | 3 | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | 0 | 7 | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | 0 | 8 | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 0 | 0 | 11 | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 2 | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 1 | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 3 | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 0 | 0 | 4 | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 3 | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 0 | 0 | 2 | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 0 | 0 | 9 | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 3 | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 1 | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 2 | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 0 | 0 | 1 | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 1 | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | 0 | 0 | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 0 | 0 | 0 | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 7 | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 5 | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 6 | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 0 | 0 | 3 | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 2 | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 0 | 0 | 1 | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 0 | 0 | 1 | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 3 | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 3 | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 3 | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 0 | 0 | 4 | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 3 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 0 | 0 | 1 | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 0 | 0 | 6 | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 0 | 0 | 9 | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 0 | 0 | 5 | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 0 | 0 | 3 | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 0 | 0 | 6 | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 0 | 0 | 5 | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 8 | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 0 | 0 | 4 | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 0 | 0 | 3 | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 0 | 0 | 4 | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 0 | 0 | 7 | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 1 | 0 | 6 | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 0 | 0 | 5 | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 2 | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 0 | 0 | 11 | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 1 | 0 | 3 | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 0 | 0 | 1 | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 0 | 0 | 2 | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 1 | 0 | 6 | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 1 | 0 | 9 | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 1 | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 1 | 0 | 4 | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 0 | 0 | 2 | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 0 | 0 | 7 | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 0 | 0 | 6 | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 0 | 0 | 1 | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 0 | 0 | 5 | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 2 | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 0 | 0 | 4 | . . Leaves extraction . # substring replacement leave[,1] = gsub(&quot; +.*&quot;, &#39;Z&#39;, leave[,1]) # individual extraction year = factor(year(as.POSIXlt(leave[,1]))) month = factor(months(as.POSIXlt(leave[,1])),levels = month.name) day = weekdays(as.POSIXlt(leave[,1])) # appending new indivually extracted dates leave leaves = cbind(leave, year, month,day) leaves leaves = leaves[,c(1,4,5,6,2,3)] leaves . A data.frame: 1104 × 3 interval_start_timestampdays_in_guildleavers . &lt;chr&gt;&lt;fct&gt;&lt;int&gt; . 2019-03-29T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2019-03-30T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2019-03-30T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-03-31T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2019-03-31T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-01T00:00:00Z | &#39;Members for 1 month+&#39; | 4 | . 2019-04-02T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2019-04-03T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2019-04-03T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | . 2019-04-04T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2019-04-04T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | . 2019-04-05T00:00:00Z | &#39;Members for 1 month+&#39; | 3 | . 2019-04-06T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2019-04-06T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-07T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2019-04-07T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | . 2019-04-08T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2019-04-08T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-09T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2019-04-09T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-10T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2019-04-10T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-11T00:00:00Z | &#39;Members for 1 month+&#39; | 0 | . 2019-04-12T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2019-04-13T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-14T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2019-04-15T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2019-04-15T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-16T00:00:00Z | &#39;Members for 1 month+&#39; | 3 | . 2019-04-16T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . ⋮ | ⋮ | ⋮ | . 2021-03-09T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2021-03-09T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-10T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2021-03-10T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 3 | . 2021-03-11T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2021-03-12T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2021-03-12T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 5 | . 2021-03-13T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-14T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2021-03-14T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-15T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2021-03-16T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2021-03-16T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 3 | . 2021-03-17T00:00:00Z | &#39;Members for 1 month+&#39; | 4 | . 2021-03-17T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | . 2021-03-18T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-19T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2021-03-19T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | . 2021-03-20T00:00:00Z | &#39;Members for 1 month+&#39; | 5 | . 2021-03-20T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-21T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2021-03-21T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 3 | . 2021-03-22T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | . 2021-03-23T00:00:00Z | &#39;Members for 1 month+&#39; | 3 | . 2021-03-23T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-24T00:00:00Z | &#39;Members for 1 month+&#39; | 0 | . 2021-03-25T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | . 2021-03-25T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-26T00:00:00Z | &#39;Members for 1 month+&#39; | 3 | . 2021-03-26T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | . A data.frame: 1104 × 6 interval_start_timestampdays_in_guildleaversyearmonthday . &lt;chr&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2019 | March | Friday | . 2019-03-30T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2019 | March | Saturday | . 2019-03-30T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2019 | March | Saturday | . 2019-03-31T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2019 | March | Sunday | . 2019-03-31T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2019 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | . 2019-04-01T00:00:00Z | &#39;Members for 1 month+&#39; | 4 | 2019 | April | Monday | . 2019-04-02T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2019 | April | Tuesday | . 2019-04-03T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2019 | April | Wednesday | . 2019-04-03T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | 2019 | April | Wednesday | . 2019-04-04T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2019 | April | Thursday | . 2019-04-04T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | 2019 | April | Thursday | . 2019-04-05T00:00:00Z | &#39;Members for 1 month+&#39; | 3 | 2019 | April | Friday | . 2019-04-06T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2019 | April | Saturday | . 2019-04-06T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2019 | April | Saturday | . 2019-04-07T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2019 | April | Sunday | . 2019-04-07T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | . 2019-04-08T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2019 | April | Monday | . 2019-04-08T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | . 2019-04-09T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2019 | April | Tuesday | . 2019-04-09T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | . 2019-04-10T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2019 | April | Wednesday | . 2019-04-10T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2019 | April | Wednesday | . 2019-04-11T00:00:00Z | &#39;Members for 1 month+&#39; | 0 | 2019 | April | Thursday | . 2019-04-12T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2019 | April | Friday | . 2019-04-13T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2019 | April | Saturday | . 2019-04-14T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2019 | April | Sunday | . 2019-04-15T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2019 | April | Monday | . 2019-04-15T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | . 2019-04-16T00:00:00Z | &#39;Members for 1 month+&#39; | 3 | 2019 | April | Tuesday | . 2019-04-16T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-03-09T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2021 | March | Tuesday | . 2021-03-09T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | . 2021-03-10T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2021 | March | Wednesday | . 2021-03-10T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 3 | 2021 | March | Wednesday | . 2021-03-11T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2021 | March | Thursday | . 2021-03-12T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2021 | March | Friday | . 2021-03-12T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 5 | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | . 2021-03-13T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2021 | March | Saturday | . 2021-03-14T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2021 | March | Sunday | . 2021-03-14T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | . 2021-03-15T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2021 | March | Monday | . 2021-03-16T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2021 | March | Tuesday | . 2021-03-16T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 3 | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | . 2021-03-17T00:00:00Z | &#39;Members for 1 month+&#39; | 4 | 2021 | March | Wednesday | . 2021-03-17T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | 2021 | March | Wednesday | . 2021-03-18T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2021 | March | Thursday | . 2021-03-19T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2021 | March | Friday | . 2021-03-19T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 2 | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | . 2021-03-20T00:00:00Z | &#39;Members for 1 month+&#39; | 5 | 2021 | March | Saturday | . 2021-03-20T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2021 | March | Saturday | . 2021-03-21T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2021 | March | Sunday | . 2021-03-21T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 3 | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | . 2021-03-22T00:00:00Z | &#39;Members for 1 month+&#39; | 1 | 2021 | March | Monday | . 2021-03-23T00:00:00Z | &#39;Members for 1 month+&#39; | 3 | 2021 | March | Tuesday | . 2021-03-23T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | . 2021-03-24T00:00:00Z | &#39;Members for 1 month+&#39; | 0 | 2021 | March | Wednesday | . 2021-03-25T00:00:00Z | &#39;Members for 1 month+&#39; | 2 | 2021 | March | Thursday | . 2021-03-25T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2021 | March | Thursday | . 2021-03-26T00:00:00Z | &#39;Members for 1 month+&#39; | 3 | 2021 | March | Friday | . 2021-03-26T00:00:00Z | &#39;Members for &lt; 1 month&#39; | 1 | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | . A data.frame: 1104 × 6 interval_start_timestampyearmonthdaydays_in_guildleavers . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | &#39;Members for 1 month+&#39; | 1 | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for 1 month+&#39; | 1 | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | &#39;Members for 1 month+&#39; | 2 | . 2019-03-31T00:00:00Z | 2019 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-01T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 4 | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 2 | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for &lt; 1 month&#39; | 2 | . 2019-04-05T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 3 | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for 1 month+&#39; | 1 | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 1 | . 2019-04-07T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | . 2019-04-08T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | . 2019-04-08T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | . 2019-04-09T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 0 | . 2019-04-12T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 1 | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 2 | . 2019-04-15T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | . 2019-04-15T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 3 | . 2019-04-16T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 2 | . 2021-03-09T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 2 | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 3 | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | . 2021-03-12T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 1 | . 2021-03-12T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 5 | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | . 2021-03-14T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-15T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 2 | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 1 | . 2021-03-16T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 4 | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-19T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 2 | . 2021-03-19T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for 1 month+&#39; | 5 | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | . 2021-03-21T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | . 2021-03-22T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 1 | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 3 | . 2021-03-23T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 0 | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | . 2021-03-26T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 3 | . 2021-03-26T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | . . Messages extraction . # substring replacement message[,1] = gsub(&quot; +.*&quot;, &#39;Z&#39;, message[,1]) # individual extraction year = factor(year(as.POSIXlt(message[,1]))) month = factor(months(as.POSIXlt(message[,1])),levels = month.name) day = weekdays(as.POSIXlt(message[,1])) # appending new indivually extracted dates messages = cbind(message, year, month,day) messages messages = messages[,c(1,4,5,6,2,3)] messages . A data.frame: 729 × 6 interval_start_timestampmessagesmessages_per_communicatoryearmonthday . &lt;chr&gt;&lt;int&gt;&lt;dbl&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 334 | 6.301887 | 2019 | March | Friday | . 2019-03-30T00:00:00Z | 236 | 6.210526 | 2019 | March | Saturday | . 2019-03-31T00:00:00Z | 364 | 8.088889 | 2019 | March | Sunday | . 2019-04-01T00:00:00Z | 404 | 5.386667 | 2019 | April | Monday | . 2019-04-02T00:00:00Z | 543 | 11.312500 | 2019 | April | Tuesday | . 2019-04-03T00:00:00Z | 324 | 7.200000 | 2019 | April | Wednesday | . 2019-04-04T00:00:00Z | 556 | 10.901961 | 2019 | April | Thursday | . 2019-04-05T00:00:00Z | 273 | 5.808511 | 2019 | April | Friday | . 2019-04-06T00:00:00Z | 335 | 7.613636 | 2019 | April | Saturday | . 2019-04-07T00:00:00Z | 1102 | 22.040000 | 2019 | April | Sunday | . 2019-04-08T00:00:00Z | 188 | 4.476190 | 2019 | April | Monday | . 2019-04-09T00:00:00Z | 399 | 8.673913 | 2019 | April | Tuesday | . 2019-04-10T00:00:00Z | 531 | 10.620000 | 2019 | April | Wednesday | . 2019-04-11T00:00:00Z | 689 | 13.000000 | 2019 | April | Thursday | . 2019-04-12T00:00:00Z | 418 | 9.086957 | 2019 | April | Friday | . 2019-04-13T00:00:00Z | 566 | 13.162791 | 2019 | April | Saturday | . 2019-04-14T00:00:00Z | 481 | 12.025000 | 2019 | April | Sunday | . 2019-04-15T00:00:00Z | 659 | 13.180000 | 2019 | April | Monday | . 2019-04-16T00:00:00Z | 779 | 12.770492 | 2019 | April | Tuesday | . 2019-04-17T00:00:00Z | 596 | 11.245283 | 2019 | April | Wednesday | . 2019-04-18T00:00:00Z | 1143 | 15.657534 | 2019 | April | Thursday | . 2019-04-19T00:00:00Z | 898 | 16.327273 | 2019 | April | Friday | . 2019-04-20T00:00:00Z | 331 | 6.490196 | 2019 | April | Saturday | . 2019-04-21T00:00:00Z | 473 | 11.000000 | 2019 | April | Sunday | . 2019-04-22T00:00:00Z | 283 | 7.256410 | 2019 | April | Monday | . 2019-04-23T00:00:00Z | 1270 | 21.896552 | 2019 | April | Tuesday | . 2019-04-24T00:00:00Z | 746 | 14.346154 | 2019 | April | Wednesday | . 2019-04-25T00:00:00Z | 287 | 5.519231 | 2019 | April | Thursday | . 2019-04-26T00:00:00Z | 728 | 11.555556 | 2019 | April | Friday | . 2019-04-27T00:00:00Z | 691 | 12.339286 | 2019 | April | Saturday | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 138 | 3.450000 | 2021 | February | Thursday | . 2021-02-26T00:00:00Z | 78 | 2.437500 | 2021 | February | Friday | . 2021-02-27T00:00:00Z | 93 | 2.162791 | 2021 | February | Saturday | . 2021-02-28T00:00:00Z | 46 | 1.533333 | 2021 | February | Sunday | . 2021-03-01T00:00:00Z | 53 | 1.766667 | 2021 | March | Monday | . 2021-03-02T00:00:00Z | 72 | 2.400000 | 2021 | March | Tuesday | . 2021-03-03T00:00:00Z | 122 | 4.066667 | 2021 | March | Wednesday | . 2021-03-04T00:00:00Z | 168 | 4.941176 | 2021 | March | Thursday | . 2021-03-05T00:00:00Z | 74 | 2.387097 | 2021 | March | Friday | . 2021-03-06T00:00:00Z | 43 | 1.482759 | 2021 | March | Saturday | . 2021-03-07T00:00:00Z | 43 | 1.720000 | 2021 | March | Sunday | . 2021-03-08T00:00:00Z | 106 | 3.312500 | 2021 | March | Monday | . 2021-03-09T00:00:00Z | 114 | 3.081081 | 2021 | March | Tuesday | . 2021-03-10T00:00:00Z | 83 | 2.593750 | 2021 | March | Wednesday | . 2021-03-11T00:00:00Z | 109 | 2.725000 | 2021 | March | Thursday | . 2021-03-12T00:00:00Z | 75 | 2.027027 | 2021 | March | Friday | . 2021-03-13T00:00:00Z | 158 | 4.647059 | 2021 | March | Saturday | . 2021-03-14T00:00:00Z | 73 | 2.433333 | 2021 | March | Sunday | . 2021-03-15T00:00:00Z | 73 | 2.517241 | 2021 | March | Monday | . 2021-03-16T00:00:00Z | 52 | 1.575758 | 2021 | March | Tuesday | . 2021-03-17T00:00:00Z | 64 | 2.064516 | 2021 | March | Wednesday | . 2021-03-18T00:00:00Z | 65 | 2.096774 | 2021 | March | Thursday | . 2021-03-19T00:00:00Z | 182 | 3.500000 | 2021 | March | Friday | . 2021-03-20T00:00:00Z | 121 | 2.880952 | 2021 | March | Saturday | . 2021-03-21T00:00:00Z | 157 | 3.925000 | 2021 | March | Sunday | . 2021-03-22T00:00:00Z | 94 | 2.410256 | 2021 | March | Monday | . 2021-03-23T00:00:00Z | 34 | 1.416667 | 2021 | March | Tuesday | . 2021-03-24T00:00:00Z | 51 | 1.888889 | 2021 | March | Wednesday | . 2021-03-25T00:00:00Z | 120 | 2.857143 | 2021 | March | Thursday | . 2021-03-26T00:00:00Z | 122 | 3.485714 | 2021 | March | Friday | . A data.frame: 729 × 6 interval_start_timestampyearmonthdaymessagesmessages_per_communicator . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 334 | 6.301887 | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 236 | 6.210526 | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 364 | 8.088889 | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 404 | 5.386667 | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 543 | 11.312500 | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 324 | 7.200000 | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 556 | 10.901961 | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 273 | 5.808511 | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 335 | 7.613636 | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 1102 | 22.040000 | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 188 | 4.476190 | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 399 | 8.673913 | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 531 | 10.620000 | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 689 | 13.000000 | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 418 | 9.086957 | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 566 | 13.162791 | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 481 | 12.025000 | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 659 | 13.180000 | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 779 | 12.770492 | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 596 | 11.245283 | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 1143 | 15.657534 | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 898 | 16.327273 | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 331 | 6.490196 | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 473 | 11.000000 | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 283 | 7.256410 | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 1270 | 21.896552 | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 746 | 14.346154 | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 287 | 5.519231 | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 728 | 11.555556 | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 691 | 12.339286 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 138 | 3.450000 | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 78 | 2.437500 | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 93 | 2.162791 | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 46 | 1.533333 | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 53 | 1.766667 | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 72 | 2.400000 | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 122 | 4.066667 | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 168 | 4.941176 | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 74 | 2.387097 | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 43 | 1.482759 | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 43 | 1.720000 | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 106 | 3.312500 | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 114 | 3.081081 | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 83 | 2.593750 | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 109 | 2.725000 | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 75 | 2.027027 | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 158 | 4.647059 | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 73 | 2.433333 | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 73 | 2.517241 | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 52 | 1.575758 | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 64 | 2.064516 | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 65 | 2.096774 | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 182 | 3.500000 | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 121 | 2.880952 | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 157 | 3.925000 | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 94 | 2.410256 | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 34 | 1.416667 | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 51 | 1.888889 | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 120 | 2.857143 | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 122 | 3.485714 | . . Voices extraction . # substring replacement voice[,1] = gsub(&quot; +.*&quot;, &#39;Z&#39;, voice[,1]) # individual extraction year = factor(year(as.POSIXlt(voice[,1]))) month = factor(months(as.POSIXlt(voice[,1])),levels = month.name) day = weekdays(as.POSIXlt(voice[,1])) # appending new indivually extracted dates voices = cbind(voice, year, month,day) voices = voices[,c(1,3,4,5,2)] voices . A data.frame: 729 × 5 interval_start_timestampyearmonthdayspeaking_minutes . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 0 | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 0 | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 0 | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 0 | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 0 | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 0 | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 0 | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 0 | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 0 | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 0 | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 0 | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 0 | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 0 | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 0 | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 0 | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 0 | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 0 | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 0 | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 0 | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 0 | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 0 | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 0 | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 0 | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 0 | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 1495 | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 913 | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 1118 | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 1354 | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 1269 | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 1200 | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 2031 | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 2293 | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 1124 | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 1398 | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 1460 | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 1834 | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 1523 | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 1119 | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 1878 | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 1429 | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 730 | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 567 | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 1282 | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 1234 | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 1146 | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 2464 | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 840 | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 428 | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 880 | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 1598 | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 873 | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 771 | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 1742 | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 1038 | . . Communicators extraction . # substring replacement communicator[,1] = gsub(&quot; +.*&quot;, &#39;Z&#39;, communicator[,1]) # individual extraction year = factor(year(as.POSIXlt(communicator[,1]))) month = factor(months(as.POSIXlt(communicator[,1])),levels = month.name) day = weekdays(as.POSIXlt(communicator[,1])) communicator # appending new individually extracted dates communicators = cbind(communicator, year, month,day) communicators = communicators[,c(1,4,5,6,2,3)] communicators$total_communicated = communicators$visitors * communicators$pct_communicated/100 . A data.frame: 729 × 3 interval_start_timestampvisitorspct_communicated . &lt;chr&gt;&lt;int&gt;&lt;dbl&gt; . 2019-03-29T00:00:00Z | 206 | 25.72816 | . 2019-03-30T00:00:00Z | 184 | 20.65217 | . 2019-03-31T00:00:00Z | 185 | 24.32432 | . 2019-04-01T00:00:00Z | 328 | 22.86585 | . 2019-04-02T00:00:00Z | 143 | 33.56643 | . 2019-04-03T00:00:00Z | 271 | 16.60517 | . 2019-04-04T00:00:00Z | 381 | 13.38583 | . 2019-04-05T00:00:00Z | 190 | 24.73684 | . 2019-04-06T00:00:00Z | 163 | 26.99387 | . 2019-04-07T00:00:00Z | 159 | 31.44654 | . 2019-04-08T00:00:00Z | 163 | 25.76687 | . 2019-04-09T00:00:00Z | 148 | 31.08108 | . 2019-04-10T00:00:00Z | 163 | 30.67485 | . 2019-04-11T00:00:00Z | 139 | 38.12950 | . 2019-04-12T00:00:00Z | 155 | 29.67742 | . 2019-04-13T00:00:00Z | 143 | 30.06993 | . 2019-04-14T00:00:00Z | 140 | 28.57143 | . 2019-04-15T00:00:00Z | 170 | 29.41176 | . 2019-04-16T00:00:00Z | 150 | 40.66667 | . 2019-04-17T00:00:00Z | 153 | 34.64052 | . 2019-04-18T00:00:00Z | 167 | 43.71257 | . 2019-04-19T00:00:00Z | 162 | 33.95062 | . 2019-04-20T00:00:00Z | 337 | 15.13353 | . 2019-04-21T00:00:00Z | 172 | 25.00000 | . 2019-04-22T00:00:00Z | 162 | 24.07407 | . 2019-04-23T00:00:00Z | 163 | 35.58282 | . 2019-04-24T00:00:00Z | 340 | 15.29412 | . 2019-04-25T00:00:00Z | 196 | 26.53061 | . 2019-04-26T00:00:00Z | 371 | 16.98113 | . 2019-04-27T00:00:00Z | 201 | 27.86070 | . ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 172 | 23.255814 | . 2021-02-26T00:00:00Z | 167 | 19.161677 | . 2021-02-27T00:00:00Z | 208 | 20.673077 | . 2021-02-28T00:00:00Z | 167 | 17.964072 | . 2021-03-01T00:00:00Z | 164 | 18.292683 | . 2021-03-02T00:00:00Z | 199 | 15.075377 | . 2021-03-03T00:00:00Z | 163 | 18.404908 | . 2021-03-04T00:00:00Z | 163 | 20.858896 | . 2021-03-05T00:00:00Z | 179 | 17.318436 | . 2021-03-06T00:00:00Z | 304 | 9.539474 | . 2021-03-07T00:00:00Z | 162 | 15.432099 | . 2021-03-08T00:00:00Z | 234 | 13.675214 | . 2021-03-09T00:00:00Z | 160 | 23.125000 | . 2021-03-10T00:00:00Z | 156 | 20.512821 | . 2021-03-11T00:00:00Z | 553 | 7.233273 | . 2021-03-12T00:00:00Z | 253 | 14.624506 | . 2021-03-13T00:00:00Z | 237 | 14.345992 | . 2021-03-14T00:00:00Z | 147 | 20.408163 | . 2021-03-15T00:00:00Z | 154 | 18.831169 | . 2021-03-16T00:00:00Z | 154 | 21.428571 | . 2021-03-17T00:00:00Z | 141 | 21.985816 | . 2021-03-18T00:00:00Z | 153 | 20.261438 | . 2021-03-19T00:00:00Z | 268 | 19.402985 | . 2021-03-20T00:00:00Z | 658 | 6.382979 | . 2021-03-21T00:00:00Z | 170 | 23.529412 | . 2021-03-22T00:00:00Z | 174 | 22.413793 | . 2021-03-23T00:00:00Z | 143 | 16.783217 | . 2021-03-24T00:00:00Z | 157 | 17.197452 | . 2021-03-25T00:00:00Z | 165 | 25.454545 | . 2021-03-26T00:00:00Z | 573 | 6.108202 | . . Identifying Covid vs Normal Time Periods . The following modifications are my attempts to identify covid years for our analysis, I could edit the csv, but I decided to explore R to practice etl for larger datasets. The Fall 2017 STAT 200 course page on Regression With Factor Variables was particularly helpful as a reference when I was trying to have R use Covid as the default factor instead of Normal, having Covid as the default factor will be important when I generate the linear models and interpret the outputs. I would also recommend reading the berkley stats page on &quot;Factors in R&quot; to get a deeper understanding of how to convert factors with dates . I could have applied the relevel() to the as.factor line as seen in this stack overflow answer How to force R to use a specified factor level as reference in a regression?, but I realized it was much easier to read/run the code in my head line by line than to pass into multiple functions . # marking covid and non covid months joins$year_type = as.double(joins$year) joins$year_type[joins$year_type == 1 ] &lt;- &quot;Normal&quot; joins$year_type[joins$year_type == 2] &lt;- &quot;Covid&quot; joins$year_type[joins$year_type == 3] &lt;- &quot;Covid&quot; joins$year_type = as.factor(joins$year_type) joins$year_type = relevel(joins$year_type, ref = 2) head(joins) leaves$year_type = as.double(leaves$year) leaves$year_type[leaves$year_type == 1 ] &lt;- &quot;Normal&quot; leaves$year_type[leaves$year_type ==2] &lt;- &quot;Covid&quot; leaves$year_type[leaves$year_type ==3] &lt;- &quot;Covid&quot; leaves$year_type = as.factor(leaves$year_type) leaves$year_type = relevel(leaves$year_type, ref = 2) head(leaves) sources$year_type = as.double(sources$year) sources$year_type[sources$year_type == 1 ] &lt;- &quot;Normal&quot; sources$year_type[sources$year_type ==2] &lt;- &quot;Covid&quot; sources$year_type[sources$year_type ==3] &lt;- &quot;Covid&quot; sources$year_type = as.factor(sources$year_type) sources$year_type = relevel(sources$year_type, ref = 2) head(sources) messages$year_type = as.double(messages$year) messages$year_type[messages$year_type == 1 ] &lt;- &quot;Normal&quot; messages$year_type[messages$year_type ==2] &lt;- &quot;Covid&quot; messages$year_type[messages$year_type ==3] &lt;- &quot;Covid&quot; messages$year_type = as.factor(messages$year_type) messages$year_type = relevel(messages$year_type, ref = 2) head(messages) voices$year_type = as.double(voices$year) voices$year_type[voices$year_type == 1 ] &lt;- &quot;Normal&quot; voices$year_type[voices$year_type ==2] &lt;- &quot;Covid&quot; voices$year_type[voices$year_type ==3] &lt;- &quot;Covid&quot; voices$year_type = as.factor(voices$year_type) voices$year_type = relevel(voices$year_type, ref = 2) head(voices) communicators$year_type = as.double(communicators$year) communicators$year_type[communicators$year_type == 1 ] &lt;- &quot;Normal&quot; communicators$year_type[communicators$year_type ==2] &lt;- &quot;Covid&quot; communicators$year_type[communicators$year_type ==3] &lt;- &quot;Covid&quot; communicators$year_type = as.factor(communicators$year_type) communicators$year_type = relevel(communicators$year_type, ref = 2) head(communicators) . A data.frame: 6 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | Normal | . A data.frame: 6 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 32019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 42019-03-31T00:00:00Z | 2019 | March | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 52019-03-31T00:00:00Z | 2019 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 62019-04-01T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 4 | Normal | . A data.frame: 6 × 8 interval_start_timestampyearmonthdaydiscovery_joinsinvitesvanity_joinsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 0 | 0 | 3 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | 0 | 7 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | 0 | 8 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 0 | 0 | 11 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 2 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 1 | Normal | . A data.frame: 6 × 7 interval_start_timestampyearmonthdaymessagesmessages_per_communicatoryear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 334 | 6.301887 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 236 | 6.210526 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 364 | 8.088889 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 404 | 5.386667 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 543 | 11.312500 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 324 | 7.200000 | Normal | . A data.frame: 6 × 6 interval_start_timestampyearmonthdayspeaking_minutesyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 0 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . A data.frame: 6 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 206 | 25.72816 | 53 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 184 | 20.65217 | 38 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 185 | 24.32432 | 45 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 328 | 22.86585 | 75 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 143 | 33.56643 | 48 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 271 | 16.60517 | 45 | Normal | . . Data Needed For Investigation . The following cells are the final processed data that will be used for analysis . Historical data . head(joins) head(leaves) head(sources) head(messages) head(voices) head(communicators) . A data.frame: 6 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | Normal | . A data.frame: 6 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 32019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 42019-03-31T00:00:00Z | 2019 | March | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 52019-03-31T00:00:00Z | 2019 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 62019-04-01T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 4 | Normal | . A data.frame: 6 × 8 interval_start_timestampyearmonthdaydiscovery_joinsinvitesvanity_joinsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 0 | 0 | 3 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | 0 | 7 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | 0 | 8 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 0 | 0 | 11 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 2 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 1 | Normal | . A data.frame: 6 × 7 interval_start_timestampyearmonthdaymessagesmessages_per_communicatoryear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 334 | 6.301887 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 236 | 6.210526 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 364 | 8.088889 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 404 | 5.386667 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 543 | 11.312500 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 324 | 7.200000 | Normal | . A data.frame: 6 × 6 interval_start_timestampyearmonthdayspeaking_minutesyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 0 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . A data.frame: 6 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 206 | 25.72816 | 53 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 184 | 20.65217 | 38 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 185 | 24.32432 | 45 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 328 | 22.86585 | 75 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 143 | 33.56643 | 48 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 271 | 16.60517 | 45 | Normal | . Last 28 days . head(text) head(voice) . A data.frame: 6 × 6 interval_start_timestampchannel_namechannel_idreaderschattersmessages . &lt;fct&gt;&lt;fct&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt; . 12021-03-27T00:00:00+00:00 | general | 2.124359e+17 | 218 | 51 | 264 | . 22021-03-27T00:00:00+00:00 | hearthstone | 2.124361e+17 | 3 | 0 | 0 | . 32021-03-27T00:00:00+00:00 | overwatch | 2.124362e+17 | 98 | 38 | 794 | . 42021-03-27T00:00:00+00:00 | lol | 2.124362e+17 | 97 | 31 | 181 | . 52021-03-27T00:00:00+00:00 | csgo | 2.124363e+17 | 29 | 4 | 5 | . 62021-03-27T00:00:00+00:00 | dota2 | 2.124364e+17 | 17 | 5 | 11 | . A data.frame: 6 × 2 interval_start_timestampspeaking_minutes . &lt;chr&gt;&lt;int&gt; . 12019-03-29T00:00:00Z | 0 | . 22019-03-30T00:00:00Z | 0 | . 32019-03-31T00:00:00Z | 0 | . 42019-04-01T00:00:00Z | 0 | . 52019-04-02T00:00:00Z | 0 | . 62019-04-03T00:00:00Z | 0 | . Data Aggregation . subsetting by year . Originally I planned on aggregating by the year for my bar charts, but when I read through some more examples of aggregates, I found a better method in &quot;Aggregating by category&quot; . joins.2019 = subset(joins, year == 2019) joins.2020 = subset(joins, year == 2020) joins.2021 = subset(joins, year == 2021) leaves.2019 = subset(leaves, year == 2019) leaves.2020 = subset(leaves, year == 2020) leaves.2021 = subset(leaves, year == 2021) sources.2019 = subset(sources, year == 2019) sources.2020 = subset(sources, year == 2020) sources.2021 = subset(sources, year == 2021) comm.2019 = subset(communicators, year == 2019) comm.2020 = subset(communicators, year == 2020) comm.2021 = subset(communicators, year == 2021) . Aggregating by year . 2019 . joins.2019 leaves.2019 sources.2019 comm.2019 . A data.frame: 278 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | Normal | . 72019-04-04T00:00:00Z | 2019 | April | Thursday | 2 | 100.00000 | 100.00000 | Normal | . 82019-04-05T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 0.00000 | Normal | . 92019-04-06T00:00:00Z | 2019 | April | Saturday | 2 | 0.00000 | 0.00000 | Normal | . 102019-04-07T00:00:00Z | 2019 | April | Sunday | 2 | 0.00000 | 0.00000 | Normal | . 112019-04-08T00:00:00Z | 2019 | April | Monday | 9 | 33.33333 | 33.33333 | Normal | . 122019-04-09T00:00:00Z | 2019 | April | Tuesday | 3 | 33.33333 | 33.33333 | Normal | . 132019-04-10T00:00:00Z | 2019 | April | Wednesday | 1 | 100.00000 | 100.00000 | Normal | . 142019-04-11T00:00:00Z | 2019 | April | Thursday | 1 | 0.00000 | 100.00000 | Normal | . 152019-04-12T00:00:00Z | 2019 | April | Friday | 1 | 0.00000 | 100.00000 | Normal | . 162019-04-13T00:00:00Z | 2019 | April | Saturday | 1 | 0.00000 | 100.00000 | Normal | . 172019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | NA | NA | Normal | . 182019-04-15T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | Normal | . 192019-04-16T00:00:00Z | 2019 | April | Tuesday | 3 | 66.66667 | 0.00000 | Normal | . 202019-04-17T00:00:00Z | 2019 | April | Wednesday | 5 | 0.00000 | 20.00000 | Normal | . 212019-04-18T00:00:00Z | 2019 | April | Thursday | 3 | 100.00000 | 33.33333 | Normal | . 222019-04-19T00:00:00Z | 2019 | April | Friday | 3 | 0.00000 | 33.33333 | Normal | . 232019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | NA | NA | Normal | . 242019-04-21T00:00:00Z | 2019 | April | Sunday | 1 | 100.00000 | 100.00000 | Normal | . 252019-04-22T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | Normal | . 262019-04-23T00:00:00Z | 2019 | April | Tuesday | 1 | 0.00000 | 0.00000 | Normal | . 272019-04-24T00:00:00Z | 2019 | April | Wednesday | 3 | 33.33333 | 0.00000 | Normal | . 282019-04-25T00:00:00Z | 2019 | April | Thursday | 3 | 66.66667 | 66.66667 | Normal | . 292019-04-26T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 33.33333 | Normal | . 302019-04-27T00:00:00Z | 2019 | April | Saturday | 1 | 100.00000 | 0.00000 | Normal | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2492019-12-02T00:00:00Z | 2019 | December | Monday | 2 | 0.00000 | 0.00000 | Normal | . 2502019-12-03T00:00:00Z | 2019 | December | Tuesday | 2 | 0.00000 | 50.00000 | Normal | . 2512019-12-04T00:00:00Z | 2019 | December | Wednesday | 3 | 33.33333 | 66.66667 | Normal | . 2522019-12-05T00:00:00Z | 2019 | December | Thursday | 5 | 0.00000 | 20.00000 | Normal | . 2532019-12-06T00:00:00Z | 2019 | December | Friday | 2 | 50.00000 | 50.00000 | Normal | . 2542019-12-07T00:00:00Z | 2019 | December | Saturday | 1 | 100.00000 | 0.00000 | Normal | . 2552019-12-08T00:00:00Z | 2019 | December | Sunday | 3 | 33.33333 | 33.33333 | Normal | . 2562019-12-09T00:00:00Z | 2019 | December | Monday | 2 | 50.00000 | 50.00000 | Normal | . 2572019-12-10T00:00:00Z | 2019 | December | Tuesday | 1 | 0.00000 | 100.00000 | Normal | . 2582019-12-11T00:00:00Z | 2019 | December | Wednesday | 3 | 66.66667 | 100.00000 | Normal | . 2592019-12-12T00:00:00Z | 2019 | December | Thursday | 1 | 0.00000 | 0.00000 | Normal | . 2602019-12-13T00:00:00Z | 2019 | December | Friday | 0 | NA | NA | Normal | . 2612019-12-14T00:00:00Z | 2019 | December | Saturday | 1 | 0.00000 | 100.00000 | Normal | . 2622019-12-15T00:00:00Z | 2019 | December | Sunday | 1 | 100.00000 | 0.00000 | Normal | . 2632019-12-16T00:00:00Z | 2019 | December | Monday | 1 | 0.00000 | 100.00000 | Normal | . 2642019-12-17T00:00:00Z | 2019 | December | Tuesday | 1 | 0.00000 | 100.00000 | Normal | . 2652019-12-18T00:00:00Z | 2019 | December | Wednesday | 6 | 0.00000 | 50.00000 | Normal | . 2662019-12-19T00:00:00Z | 2019 | December | Thursday | 1 | 0.00000 | 0.00000 | Normal | . 2672019-12-20T00:00:00Z | 2019 | December | Friday | 0 | NA | NA | Normal | . 2682019-12-21T00:00:00Z | 2019 | December | Saturday | 2 | 50.00000 | 50.00000 | Normal | . 2692019-12-22T00:00:00Z | 2019 | December | Sunday | 0 | NA | NA | Normal | . 2702019-12-23T00:00:00Z | 2019 | December | Monday | 0 | NA | NA | Normal | . 2712019-12-24T00:00:00Z | 2019 | December | Tuesday | 0 | NA | NA | Normal | . 2722019-12-25T00:00:00Z | 2019 | December | Wednesday | 1 | 0.00000 | 0.00000 | Normal | . 2732019-12-26T00:00:00Z | 2019 | December | Thursday | 0 | NA | NA | Normal | . 2742019-12-27T00:00:00Z | 2019 | December | Friday | 1 | 0.00000 | 0.00000 | Normal | . 2752019-12-28T00:00:00Z | 2019 | December | Saturday | 1 | 100.00000 | 0.00000 | Normal | . 2762019-12-29T00:00:00Z | 2019 | December | Sunday | 1 | 0.00000 | 0.00000 | Normal | . 2772019-12-30T00:00:00Z | 2019 | December | Monday | 0 | NA | NA | Normal | . 2782019-12-31T00:00:00Z | 2019 | December | Tuesday | 0 | NA | NA | Normal | . A data.frame: 401 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 32019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 42019-03-31T00:00:00Z | 2019 | March | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 52019-03-31T00:00:00Z | 2019 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 62019-04-01T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 4 | Normal | . 72019-04-02T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 82019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | Normal | . 92019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 102019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 2 | Normal | . 112019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 122019-04-05T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 3 | Normal | . 132019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 142019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 152019-04-07T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 1 | Normal | . 162019-04-07T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 172019-04-08T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 182019-04-08T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 192019-04-09T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 202019-04-09T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 212019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | Normal | . 222019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 232019-04-11T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 0 | Normal | . 242019-04-12T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 252019-04-13T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 262019-04-14T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 272019-04-15T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 282019-04-15T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 292019-04-16T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 3 | Normal | . 302019-04-16T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 3722019-12-06T00:00:00Z | 2019 | December | Friday | &#39;Members for 1 month+&#39; | 0 | Normal | . 3732019-12-07T00:00:00Z | 2019 | December | Saturday | &#39;Members for 1 month+&#39; | 4 | Normal | . 3742019-12-08T00:00:00Z | 2019 | December | Sunday | &#39;Members for 1 month+&#39; | 4 | Normal | . 3752019-12-09T00:00:00Z | 2019 | December | Monday | &#39;Members for 1 month+&#39; | 0 | Normal | . 3762019-12-10T00:00:00Z | 2019 | December | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 3772019-12-11T00:00:00Z | 2019 | December | Wednesday | &#39;Members for 1 month+&#39; | 0 | Normal | . 3782019-12-12T00:00:00Z | 2019 | December | Thursday | &#39;Members for 1 month+&#39; | 1 | Normal | . 3792019-12-13T00:00:00Z | 2019 | December | Friday | &#39;Members for 1 month+&#39; | 2 | Normal | . 3802019-12-14T00:00:00Z | 2019 | December | Saturday | &#39;Members for 1 month+&#39; | 0 | Normal | . 3812019-12-15T00:00:00Z | 2019 | December | Sunday | &#39;Members for 1 month+&#39; | 0 | Normal | . 3822019-12-16T00:00:00Z | 2019 | December | Monday | &#39;Members for 1 month+&#39; | 2 | Normal | . 3832019-12-16T00:00:00Z | 2019 | December | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 3842019-12-17T00:00:00Z | 2019 | December | Tuesday | &#39;Members for 1 month+&#39; | 3 | Normal | . 3852019-12-18T00:00:00Z | 2019 | December | Wednesday | &#39;Members for 1 month+&#39; | 2 | Normal | . 3862019-12-19T00:00:00Z | 2019 | December | Thursday | &#39;Members for 1 month+&#39; | 1 | Normal | . 3872019-12-20T00:00:00Z | 2019 | December | Friday | &#39;Members for 1 month+&#39; | 0 | Normal | . 3882019-12-21T00:00:00Z | 2019 | December | Saturday | &#39;Members for 1 month+&#39; | 2 | Normal | . 3892019-12-21T00:00:00Z | 2019 | December | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 3902019-12-22T00:00:00Z | 2019 | December | Sunday | &#39;Members for 1 month+&#39; | 1 | Normal | . 3912019-12-22T00:00:00Z | 2019 | December | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 3922019-12-23T00:00:00Z | 2019 | December | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 3932019-12-24T00:00:00Z | 2019 | December | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 3942019-12-25T00:00:00Z | 2019 | December | Wednesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 3952019-12-26T00:00:00Z | 2019 | December | Thursday | &#39;Members for 1 month+&#39; | 1 | Normal | . 3962019-12-27T00:00:00Z | 2019 | December | Friday | &#39;Members for 1 month+&#39; | 0 | Normal | . 3972019-12-28T00:00:00Z | 2019 | December | Saturday | &#39;Members for 1 month+&#39; | 0 | Normal | . 3982019-12-29T00:00:00Z | 2019 | December | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 3992019-12-29T00:00:00Z | 2019 | December | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 4002019-12-30T00:00:00Z | 2019 | December | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 4012019-12-31T00:00:00Z | 2019 | December | Tuesday | &#39;Members for 1 month+&#39; | 2 | Normal | . A data.frame: 278 × 8 interval_start_timestampyearmonthdaydiscovery_joinsinvitesvanity_joinsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 0 | 0 | 3 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | 0 | 7 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | 0 | 8 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 0 | 0 | 11 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 2 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 1 | Normal | . 72019-04-04T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 3 | Normal | . 82019-04-05T00:00:00Z | 2019 | April | Friday | 0 | 0 | 4 | Normal | . 92019-04-06T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 3 | Normal | . 102019-04-07T00:00:00Z | 2019 | April | Sunday | 0 | 0 | 2 | Normal | . 112019-04-08T00:00:00Z | 2019 | April | Monday | 0 | 0 | 9 | Normal | . 122019-04-09T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 3 | Normal | . 132019-04-10T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 1 | Normal | . 142019-04-11T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 2 | Normal | . 152019-04-12T00:00:00Z | 2019 | April | Friday | 0 | 0 | 1 | Normal | . 162019-04-13T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 1 | Normal | . 172019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | 0 | 0 | Normal | . 182019-04-15T00:00:00Z | 2019 | April | Monday | 0 | 0 | 0 | Normal | . 192019-04-16T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 7 | Normal | . 202019-04-17T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 5 | Normal | . 212019-04-18T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 6 | Normal | . 222019-04-19T00:00:00Z | 2019 | April | Friday | 0 | 0 | 3 | Normal | . 232019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 2 | Normal | . 242019-04-21T00:00:00Z | 2019 | April | Sunday | 0 | 0 | 1 | Normal | . 252019-04-22T00:00:00Z | 2019 | April | Monday | 0 | 0 | 1 | Normal | . 262019-04-23T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 3 | Normal | . 272019-04-24T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 3 | Normal | . 282019-04-25T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 3 | Normal | . 292019-04-26T00:00:00Z | 2019 | April | Friday | 0 | 0 | 4 | Normal | . 302019-04-27T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 3 | Normal | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2492019-12-02T00:00:00Z | 2019 | December | Monday | 0 | 0 | 2 | Normal | . 2502019-12-03T00:00:00Z | 2019 | December | Tuesday | 0 | 0 | 2 | Normal | . 2512019-12-04T00:00:00Z | 2019 | December | Wednesday | 0 | 0 | 3 | Normal | . 2522019-12-05T00:00:00Z | 2019 | December | Thursday | 0 | 0 | 5 | Normal | . 2532019-12-06T00:00:00Z | 2019 | December | Friday | 0 | 0 | 2 | Normal | . 2542019-12-07T00:00:00Z | 2019 | December | Saturday | 0 | 0 | 1 | Normal | . 2552019-12-08T00:00:00Z | 2019 | December | Sunday | 0 | 0 | 4 | Normal | . 2562019-12-09T00:00:00Z | 2019 | December | Monday | 0 | 0 | 2 | Normal | . 2572019-12-10T00:00:00Z | 2019 | December | Tuesday | 0 | 0 | 1 | Normal | . 2582019-12-11T00:00:00Z | 2019 | December | Wednesday | 0 | 0 | 3 | Normal | . 2592019-12-12T00:00:00Z | 2019 | December | Thursday | 0 | 0 | 2 | Normal | . 2602019-12-13T00:00:00Z | 2019 | December | Friday | 0 | 0 | 0 | Normal | . 2612019-12-14T00:00:00Z | 2019 | December | Saturday | 0 | 0 | 1 | Normal | . 2622019-12-15T00:00:00Z | 2019 | December | Sunday | 0 | 0 | 1 | Normal | . 2632019-12-16T00:00:00Z | 2019 | December | Monday | 0 | 0 | 1 | Normal | . 2642019-12-17T00:00:00Z | 2019 | December | Tuesday | 0 | 0 | 1 | Normal | . 2652019-12-18T00:00:00Z | 2019 | December | Wednesday | 0 | 0 | 6 | Normal | . 2662019-12-19T00:00:00Z | 2019 | December | Thursday | 0 | 0 | 2 | Normal | . 2672019-12-20T00:00:00Z | 2019 | December | Friday | 0 | 0 | 0 | Normal | . 2682019-12-21T00:00:00Z | 2019 | December | Saturday | 0 | 0 | 4 | Normal | . 2692019-12-22T00:00:00Z | 2019 | December | Sunday | 0 | 0 | 1 | Normal | . 2702019-12-23T00:00:00Z | 2019 | December | Monday | 0 | 0 | 0 | Normal | . 2712019-12-24T00:00:00Z | 2019 | December | Tuesday | 0 | 0 | 0 | Normal | . 2722019-12-25T00:00:00Z | 2019 | December | Wednesday | 0 | 0 | 1 | Normal | . 2732019-12-26T00:00:00Z | 2019 | December | Thursday | 0 | 0 | 0 | Normal | . 2742019-12-27T00:00:00Z | 2019 | December | Friday | 0 | 0 | 1 | Normal | . 2752019-12-28T00:00:00Z | 2019 | December | Saturday | 0 | 0 | 1 | Normal | . 2762019-12-29T00:00:00Z | 2019 | December | Sunday | 0 | 0 | 1 | Normal | . 2772019-12-30T00:00:00Z | 2019 | December | Monday | 0 | 0 | 0 | Normal | . 2782019-12-31T00:00:00Z | 2019 | December | Tuesday | 0 | 0 | 0 | Normal | . A data.frame: 278 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 206 | 25.72816 | 53 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 184 | 20.65217 | 38 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 185 | 24.32432 | 45 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 328 | 22.86585 | 75 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 143 | 33.56643 | 48 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 271 | 16.60517 | 45 | Normal | . 72019-04-04T00:00:00Z | 2019 | April | Thursday | 381 | 13.38583 | 51 | Normal | . 82019-04-05T00:00:00Z | 2019 | April | Friday | 190 | 24.73684 | 47 | Normal | . 92019-04-06T00:00:00Z | 2019 | April | Saturday | 163 | 26.99387 | 44 | Normal | . 102019-04-07T00:00:00Z | 2019 | April | Sunday | 159 | 31.44654 | 50 | Normal | . 112019-04-08T00:00:00Z | 2019 | April | Monday | 163 | 25.76687 | 42 | Normal | . 122019-04-09T00:00:00Z | 2019 | April | Tuesday | 148 | 31.08108 | 46 | Normal | . 132019-04-10T00:00:00Z | 2019 | April | Wednesday | 163 | 30.67485 | 50 | Normal | . 142019-04-11T00:00:00Z | 2019 | April | Thursday | 139 | 38.12950 | 53 | Normal | . 152019-04-12T00:00:00Z | 2019 | April | Friday | 155 | 29.67742 | 46 | Normal | . 162019-04-13T00:00:00Z | 2019 | April | Saturday | 143 | 30.06993 | 43 | Normal | . 172019-04-14T00:00:00Z | 2019 | April | Sunday | 140 | 28.57143 | 40 | Normal | . 182019-04-15T00:00:00Z | 2019 | April | Monday | 170 | 29.41176 | 50 | Normal | . 192019-04-16T00:00:00Z | 2019 | April | Tuesday | 150 | 40.66667 | 61 | Normal | . 202019-04-17T00:00:00Z | 2019 | April | Wednesday | 153 | 34.64052 | 53 | Normal | . 212019-04-18T00:00:00Z | 2019 | April | Thursday | 167 | 43.71257 | 73 | Normal | . 222019-04-19T00:00:00Z | 2019 | April | Friday | 162 | 33.95062 | 55 | Normal | . 232019-04-20T00:00:00Z | 2019 | April | Saturday | 337 | 15.13353 | 51 | Normal | . 242019-04-21T00:00:00Z | 2019 | April | Sunday | 172 | 25.00000 | 43 | Normal | . 252019-04-22T00:00:00Z | 2019 | April | Monday | 162 | 24.07407 | 39 | Normal | . 262019-04-23T00:00:00Z | 2019 | April | Tuesday | 163 | 35.58282 | 58 | Normal | . 272019-04-24T00:00:00Z | 2019 | April | Wednesday | 340 | 15.29412 | 52 | Normal | . 282019-04-25T00:00:00Z | 2019 | April | Thursday | 196 | 26.53061 | 52 | Normal | . 292019-04-26T00:00:00Z | 2019 | April | Friday | 371 | 16.98113 | 63 | Normal | . 302019-04-27T00:00:00Z | 2019 | April | Saturday | 201 | 27.86070 | 56 | Normal | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2492019-12-02T00:00:00Z | 2019 | December | Monday | 155 | 30.96774 | 48 | Normal | . 2502019-12-03T00:00:00Z | 2019 | December | Tuesday | 170 | 27.05882 | 46 | Normal | . 2512019-12-04T00:00:00Z | 2019 | December | Wednesday | 429 | 10.48951 | 45 | Normal | . 2522019-12-05T00:00:00Z | 2019 | December | Thursday | 247 | 14.97976 | 37 | Normal | . 2532019-12-06T00:00:00Z | 2019 | December | Friday | 432 | 16.43519 | 71 | Normal | . 2542019-12-07T00:00:00Z | 2019 | December | Saturday | 443 | 13.31828 | 59 | Normal | . 2552019-12-08T00:00:00Z | 2019 | December | Sunday | 432 | 13.65741 | 59 | Normal | . 2562019-12-09T00:00:00Z | 2019 | December | Monday | 217 | 22.11982 | 48 | Normal | . 2572019-12-10T00:00:00Z | 2019 | December | Tuesday | 166 | 29.51807 | 49 | Normal | . 2582019-12-11T00:00:00Z | 2019 | December | Wednesday | 162 | 29.62963 | 48 | Normal | . 2592019-12-12T00:00:00Z | 2019 | December | Thursday | 412 | 14.32039 | 59 | Normal | . 2602019-12-13T00:00:00Z | 2019 | December | Friday | 177 | 21.46893 | 38 | Normal | . 2612019-12-14T00:00:00Z | 2019 | December | Saturday | 188 | 21.27660 | 40 | Normal | . 2622019-12-15T00:00:00Z | 2019 | December | Sunday | 169 | 27.81065 | 47 | Normal | . 2632019-12-16T00:00:00Z | 2019 | December | Monday | 136 | 28.67647 | 39 | Normal | . 2642019-12-17T00:00:00Z | 2019 | December | Tuesday | 133 | 32.33083 | 43 | Normal | . 2652019-12-18T00:00:00Z | 2019 | December | Wednesday | 127 | 21.25984 | 27 | Normal | . 2662019-12-19T00:00:00Z | 2019 | December | Thursday | 123 | 25.20325 | 31 | Normal | . 2672019-12-20T00:00:00Z | 2019 | December | Friday | 144 | 19.44444 | 28 | Normal | . 2682019-12-21T00:00:00Z | 2019 | December | Saturday | 125 | 20.80000 | 26 | Normal | . 2692019-12-22T00:00:00Z | 2019 | December | Sunday | 117 | 18.80342 | 22 | Normal | . 2702019-12-23T00:00:00Z | 2019 | December | Monday | 116 | 24.13793 | 28 | Normal | . 2712019-12-24T00:00:00Z | 2019 | December | Tuesday | 108 | 24.07407 | 26 | Normal | . 2722019-12-25T00:00:00Z | 2019 | December | Wednesday | 106 | 26.41509 | 28 | Normal | . 2732019-12-26T00:00:00Z | 2019 | December | Thursday | 110 | 26.36364 | 29 | Normal | . 2742019-12-27T00:00:00Z | 2019 | December | Friday | 96 | 31.25000 | 30 | Normal | . 2752019-12-28T00:00:00Z | 2019 | December | Saturday | 91 | 18.68132 | 17 | Normal | . 2762019-12-29T00:00:00Z | 2019 | December | Sunday | 90 | 21.11111 | 19 | Normal | . 2772019-12-30T00:00:00Z | 2019 | December | Monday | 108 | 25.92593 | 28 | Normal | . 2782019-12-31T00:00:00Z | 2019 | December | Tuesday | 100 | 26.00000 | 26 | Normal | . . 2020 . joins.2020 leaves.2020 sources.2020 comm.2020 . A data.frame: 366 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2792020-01-01T00:00:00Z | 2020 | January | Wednesday | 0 | NA | NA | Covid | . 2802020-01-02T00:00:00Z | 2020 | January | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 2812020-01-03T00:00:00Z | 2020 | January | Friday | 2 | 0.00000 | 50.00000 | Covid | . 2822020-01-04T00:00:00Z | 2020 | January | Saturday | 0 | NA | NA | Covid | . 2832020-01-05T00:00:00Z | 2020 | January | Sunday | 0 | NA | NA | Covid | . 2842020-01-06T00:00:00Z | 2020 | January | Monday | 3 | 0.00000 | 0.00000 | Covid | . 2852020-01-07T00:00:00Z | 2020 | January | Tuesday | 1 | 0.00000 | 100.00000 | Covid | . 2862020-01-08T00:00:00Z | 2020 | January | Wednesday | 2 | 0.00000 | 50.00000 | Covid | . 2872020-01-09T00:00:00Z | 2020 | January | Thursday | 3 | 33.33333 | 33.33333 | Covid | . 2882020-01-10T00:00:00Z | 2020 | January | Friday | 2 | 0.00000 | 0.00000 | Covid | . 2892020-01-11T00:00:00Z | 2020 | January | Saturday | 0 | NA | NA | Covid | . 2902020-01-12T00:00:00Z | 2020 | January | Sunday | 2 | 0.00000 | 100.00000 | Covid | . 2912020-01-13T00:00:00Z | 2020 | January | Monday | 2 | 100.00000 | 100.00000 | Covid | . 2922020-01-14T00:00:00Z | 2020 | January | Tuesday | 7 | 14.28571 | 57.14286 | Covid | . 2932020-01-15T00:00:00Z | 2020 | January | Wednesday | 4 | 0.00000 | 25.00000 | Covid | . 2942020-01-16T00:00:00Z | 2020 | January | Thursday | 3 | 33.33333 | 100.00000 | Covid | . 2952020-01-17T00:00:00Z | 2020 | January | Friday | 1 | 0.00000 | 0.00000 | Covid | . 2962020-01-18T00:00:00Z | 2020 | January | Saturday | 3 | 0.00000 | 100.00000 | Covid | . 2972020-01-19T00:00:00Z | 2020 | January | Sunday | 2 | 0.00000 | 50.00000 | Covid | . 2982020-01-20T00:00:00Z | 2020 | January | Monday | 2 | 50.00000 | 100.00000 | Covid | . 2992020-01-21T00:00:00Z | 2020 | January | Tuesday | 4 | 25.00000 | 75.00000 | Covid | . 3002020-01-22T00:00:00Z | 2020 | January | Wednesday | 3 | 0.00000 | 0.00000 | Covid | . 3012020-01-23T00:00:00Z | 2020 | January | Thursday | 19 | 15.78947 | 21.05263 | Covid | . 3022020-01-24T00:00:00Z | 2020 | January | Friday | 0 | NA | NA | Covid | . 3032020-01-25T00:00:00Z | 2020 | January | Saturday | 3 | 33.33333 | 33.33333 | Covid | . 3042020-01-26T00:00:00Z | 2020 | January | Sunday | 3 | 0.00000 | 100.00000 | Covid | . 3052020-01-27T00:00:00Z | 2020 | January | Monday | 3 | 0.00000 | 66.66667 | Covid | . 3062020-01-28T00:00:00Z | 2020 | January | Tuesday | 2 | 0.00000 | 100.00000 | Covid | . 3072020-01-29T00:00:00Z | 2020 | January | Wednesday | 5 | 40.00000 | 80.00000 | Covid | . 3082020-01-30T00:00:00Z | 2020 | January | Thursday | 1 | 0.00000 | 100.00000 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 6152020-12-02T00:00:00Z | 2020 | December | Wednesday | 2 | 50.00000 | 100.00000 | Covid | . 6162020-12-03T00:00:00Z | 2020 | December | Thursday | 2 | 0.00000 | 50.00000 | Covid | . 6172020-12-04T00:00:00Z | 2020 | December | Friday | 5 | 40.00000 | 80.00000 | Covid | . 6182020-12-05T00:00:00Z | 2020 | December | Saturday | 4 | 25.00000 | 25.00000 | Covid | . 6192020-12-06T00:00:00Z | 2020 | December | Sunday | 3 | 0.00000 | 0.00000 | Covid | . 6202020-12-07T00:00:00Z | 2020 | December | Monday | 1 | 0.00000 | 100.00000 | Covid | . 6212020-12-08T00:00:00Z | 2020 | December | Tuesday | 1 | 0.00000 | 100.00000 | Covid | . 6222020-12-09T00:00:00Z | 2020 | December | Wednesday | 1 | 0.00000 | 0.00000 | Covid | . 6232020-12-10T00:00:00Z | 2020 | December | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 6242020-12-11T00:00:00Z | 2020 | December | Friday | 1 | 0.00000 | 100.00000 | Covid | . 6252020-12-12T00:00:00Z | 2020 | December | Saturday | 3 | 0.00000 | 66.66667 | Covid | . 6262020-12-13T00:00:00Z | 2020 | December | Sunday | 5 | 0.00000 | 20.00000 | Covid | . 6272020-12-14T00:00:00Z | 2020 | December | Monday | 3 | 0.00000 | 66.66667 | Covid | . 6282020-12-15T00:00:00Z | 2020 | December | Tuesday | 2 | 50.00000 | 100.00000 | Covid | . 6292020-12-16T00:00:00Z | 2020 | December | Wednesday | 4 | 50.00000 | 75.00000 | Covid | . 6302020-12-17T00:00:00Z | 2020 | December | Thursday | 0 | NA | NA | Covid | . 6312020-12-18T00:00:00Z | 2020 | December | Friday | 2 | 50.00000 | 50.00000 | Covid | . 6322020-12-19T00:00:00Z | 2020 | December | Saturday | 0 | NA | NA | Covid | . 6332020-12-20T00:00:00Z | 2020 | December | Sunday | 9 | 11.11111 | 55.55556 | Covid | . 6342020-12-21T00:00:00Z | 2020 | December | Monday | 2 | 50.00000 | 50.00000 | Covid | . 6352020-12-22T00:00:00Z | 2020 | December | Tuesday | 3 | 0.00000 | 33.33333 | Covid | . 6362020-12-23T00:00:00Z | 2020 | December | Wednesday | 0 | NA | NA | Covid | . 6372020-12-24T00:00:00Z | 2020 | December | Thursday | 0 | NA | NA | Covid | . 6382020-12-25T00:00:00Z | 2020 | December | Friday | 2 | 0.00000 | 0.00000 | Covid | . 6392020-12-26T00:00:00Z | 2020 | December | Saturday | 3 | 33.33333 | 100.00000 | Covid | . 6402020-12-27T00:00:00Z | 2020 | December | Sunday | 0 | NA | NA | Covid | . 6412020-12-28T00:00:00Z | 2020 | December | Monday | 1 | 0.00000 | 0.00000 | Covid | . 6422020-12-29T00:00:00Z | 2020 | December | Tuesday | 3 | 0.00000 | 33.33333 | Covid | . 6432020-12-30T00:00:00Z | 2020 | December | Wednesday | 1 | 0.00000 | 0.00000 | Covid | . 6442020-12-31T00:00:00Z | 2020 | December | Thursday | 3 | 0.00000 | 33.33333 | Covid | . A data.frame: 568 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 4022020-01-01T00:00:00Z | 2020 | January | Wednesday | &#39;Members for 1 month+&#39; | 0 | Covid | . 4032020-01-02T00:00:00Z | 2020 | January | Thursday | &#39;Members for 1 month+&#39; | 0 | Covid | . 4042020-01-03T00:00:00Z | 2020 | January | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4052020-01-03T00:00:00Z | 2020 | January | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4062020-01-04T00:00:00Z | 2020 | January | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4072020-01-04T00:00:00Z | 2020 | January | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4082020-01-05T00:00:00Z | 2020 | January | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 4092020-01-06T00:00:00Z | 2020 | January | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4102020-01-07T00:00:00Z | 2020 | January | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 4112020-01-08T00:00:00Z | 2020 | January | Wednesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 4122020-01-08T00:00:00Z | 2020 | January | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4132020-01-09T00:00:00Z | 2020 | January | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4142020-01-09T00:00:00Z | 2020 | January | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4152020-01-10T00:00:00Z | 2020 | January | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4162020-01-11T00:00:00Z | 2020 | January | Saturday | &#39;Members for 1 month+&#39; | 0 | Covid | . 4172020-01-12T00:00:00Z | 2020 | January | Sunday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4182020-01-13T00:00:00Z | 2020 | January | Monday | &#39;Members for 1 month+&#39; | 4 | Covid | . 4192020-01-14T00:00:00Z | 2020 | January | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 4202020-01-14T00:00:00Z | 2020 | January | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4212020-01-15T00:00:00Z | 2020 | January | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4222020-01-16T00:00:00Z | 2020 | January | Thursday | &#39;Members for 1 month+&#39; | 3 | Covid | . 4232020-01-16T00:00:00Z | 2020 | January | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4242020-01-17T00:00:00Z | 2020 | January | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4252020-01-17T00:00:00Z | 2020 | January | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4262020-01-18T00:00:00Z | 2020 | January | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4272020-01-19T00:00:00Z | 2020 | January | Sunday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4282020-01-20T00:00:00Z | 2020 | January | Monday | &#39;Members for 1 month+&#39; | 0 | Covid | . 4292020-01-21T00:00:00Z | 2020 | January | Tuesday | &#39;Members for 1 month+&#39; | 7 | Covid | . 4302020-01-22T00:00:00Z | 2020 | January | Wednesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 4312020-01-23T00:00:00Z | 2020 | January | Thursday | &#39;Members for 1 month+&#39; | 1 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 9402020-12-11T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9412020-12-12T00:00:00Z | 2020 | December | Saturday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9422020-12-12T00:00:00Z | 2020 | December | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9432020-12-13T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9442020-12-14T00:00:00Z | 2020 | December | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9452020-12-14T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9462020-12-15T00:00:00Z | 2020 | December | Tuesday | &#39;Members for 1 month+&#39; | 0 | Covid | . 9472020-12-16T00:00:00Z | 2020 | December | Wednesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9482020-12-16T00:00:00Z | 2020 | December | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9492020-12-17T00:00:00Z | 2020 | December | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9502020-12-18T00:00:00Z | 2020 | December | Friday | &#39;Members for 1 month+&#39; | 0 | Covid | . 9512020-12-19T00:00:00Z | 2020 | December | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9522020-12-19T00:00:00Z | 2020 | December | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9532020-12-20T00:00:00Z | 2020 | December | Sunday | &#39;Members for 1 month+&#39; | 7 | Covid | . 9542020-12-20T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9552020-12-21T00:00:00Z | 2020 | December | Monday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9562020-12-22T00:00:00Z | 2020 | December | Tuesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9572020-12-22T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9582020-12-23T00:00:00Z | 2020 | December | Wednesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9592020-12-24T00:00:00Z | 2020 | December | Thursday | &#39;Members for 1 month+&#39; | 0 | Covid | . 9602020-12-25T00:00:00Z | 2020 | December | Friday | &#39;Members for 1 month+&#39; | 7 | Covid | . 9612020-12-25T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9622020-12-26T00:00:00Z | 2020 | December | Saturday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9632020-12-26T00:00:00Z | 2020 | December | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9642020-12-27T00:00:00Z | 2020 | December | Sunday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9652020-12-28T00:00:00Z | 2020 | December | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9662020-12-29T00:00:00Z | 2020 | December | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9672020-12-29T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9682020-12-30T00:00:00Z | 2020 | December | Wednesday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9692020-12-31T00:00:00Z | 2020 | December | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . A data.frame: 366 × 8 interval_start_timestampyearmonthdaydiscovery_joinsinvitesvanity_joinsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;fct&gt; . 2792020-01-01T00:00:00Z | 2020 | January | Wednesday | 0 | 0 | 0 | Covid | . 2802020-01-02T00:00:00Z | 2020 | January | Thursday | 0 | 0 | 1 | Covid | . 2812020-01-03T00:00:00Z | 2020 | January | Friday | 0 | 0 | 2 | Covid | . 2822020-01-04T00:00:00Z | 2020 | January | Saturday | 0 | 0 | 0 | Covid | . 2832020-01-05T00:00:00Z | 2020 | January | Sunday | 0 | 0 | 0 | Covid | . 2842020-01-06T00:00:00Z | 2020 | January | Monday | 0 | 0 | 3 | Covid | . 2852020-01-07T00:00:00Z | 2020 | January | Tuesday | 0 | 0 | 3 | Covid | . 2862020-01-08T00:00:00Z | 2020 | January | Wednesday | 0 | 0 | 4 | Covid | . 2872020-01-09T00:00:00Z | 2020 | January | Thursday | 0 | 0 | 3 | Covid | . 2882020-01-10T00:00:00Z | 2020 | January | Friday | 0 | 0 | 3 | Covid | . 2892020-01-11T00:00:00Z | 2020 | January | Saturday | 0 | 0 | 0 | Covid | . 2902020-01-12T00:00:00Z | 2020 | January | Sunday | 0 | 0 | 2 | Covid | . 2912020-01-13T00:00:00Z | 2020 | January | Monday | 0 | 0 | 3 | Covid | . 2922020-01-14T00:00:00Z | 2020 | January | Tuesday | 0 | 0 | 8 | Covid | . 2932020-01-15T00:00:00Z | 2020 | January | Wednesday | 0 | 0 | 4 | Covid | . 2942020-01-16T00:00:00Z | 2020 | January | Thursday | 0 | 0 | 5 | Covid | . 2952020-01-17T00:00:00Z | 2020 | January | Friday | 0 | 0 | 2 | Covid | . 2962020-01-18T00:00:00Z | 2020 | January | Saturday | 0 | 0 | 4 | Covid | . 2972020-01-19T00:00:00Z | 2020 | January | Sunday | 0 | 0 | 3 | Covid | . 2982020-01-20T00:00:00Z | 2020 | January | Monday | 0 | 0 | 4 | Covid | . 2992020-01-21T00:00:00Z | 2020 | January | Tuesday | 0 | 0 | 4 | Covid | . 3002020-01-22T00:00:00Z | 2020 | January | Wednesday | 0 | 0 | 4 | Covid | . 3012020-01-23T00:00:00Z | 2020 | January | Thursday | 0 | 0 | 21 | Covid | . 3022020-01-24T00:00:00Z | 2020 | January | Friday | 0 | 0 | 1 | Covid | . 3032020-01-25T00:00:00Z | 2020 | January | Saturday | 0 | 0 | 4 | Covid | . 3042020-01-26T00:00:00Z | 2020 | January | Sunday | 0 | 0 | 3 | Covid | . 3052020-01-27T00:00:00Z | 2020 | January | Monday | 0 | 0 | 4 | Covid | . 3062020-01-28T00:00:00Z | 2020 | January | Tuesday | 0 | 0 | 2 | Covid | . 3072020-01-29T00:00:00Z | 2020 | January | Wednesday | 0 | 0 | 5 | Covid | . 3082020-01-30T00:00:00Z | 2020 | January | Thursday | 0 | 0 | 1 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 6152020-12-02T00:00:00Z | 2020 | December | Wednesday | 0 | 0 | 4 | Covid | . 6162020-12-03T00:00:00Z | 2020 | December | Thursday | 1 | 0 | 1 | Covid | . 6172020-12-04T00:00:00Z | 2020 | December | Friday | 0 | 0 | 5 | Covid | . 6182020-12-05T00:00:00Z | 2020 | December | Saturday | 0 | 0 | 5 | Covid | . 6192020-12-06T00:00:00Z | 2020 | December | Sunday | 0 | 0 | 3 | Covid | . 6202020-12-07T00:00:00Z | 2020 | December | Monday | 0 | 0 | 1 | Covid | . 6212020-12-08T00:00:00Z | 2020 | December | Tuesday | 0 | 0 | 1 | Covid | . 6222020-12-09T00:00:00Z | 2020 | December | Wednesday | 0 | 0 | 2 | Covid | . 6232020-12-10T00:00:00Z | 2020 | December | Thursday | 0 | 0 | 1 | Covid | . 6242020-12-11T00:00:00Z | 2020 | December | Friday | 0 | 0 | 1 | Covid | . 6252020-12-12T00:00:00Z | 2020 | December | Saturday | 0 | 0 | 3 | Covid | . 6262020-12-13T00:00:00Z | 2020 | December | Sunday | 2 | 0 | 4 | Covid | . 6272020-12-14T00:00:00Z | 2020 | December | Monday | 0 | 0 | 4 | Covid | . 6282020-12-15T00:00:00Z | 2020 | December | Tuesday | 0 | 0 | 3 | Covid | . 6292020-12-16T00:00:00Z | 2020 | December | Wednesday | 1 | 0 | 3 | Covid | . 6302020-12-17T00:00:00Z | 2020 | December | Thursday | 0 | 0 | 0 | Covid | . 6312020-12-18T00:00:00Z | 2020 | December | Friday | 0 | 0 | 2 | Covid | . 6322020-12-19T00:00:00Z | 2020 | December | Saturday | 0 | 0 | 3 | Covid | . 6332020-12-20T00:00:00Z | 2020 | December | Sunday | 0 | 0 | 9 | Covid | . 6342020-12-21T00:00:00Z | 2020 | December | Monday | 0 | 0 | 3 | Covid | . 6352020-12-22T00:00:00Z | 2020 | December | Tuesday | 0 | 0 | 3 | Covid | . 6362020-12-23T00:00:00Z | 2020 | December | Wednesday | 0 | 0 | 0 | Covid | . 6372020-12-24T00:00:00Z | 2020 | December | Thursday | 0 | 0 | 0 | Covid | . 6382020-12-25T00:00:00Z | 2020 | December | Friday | 0 | 0 | 2 | Covid | . 6392020-12-26T00:00:00Z | 2020 | December | Saturday | 0 | 0 | 4 | Covid | . 6402020-12-27T00:00:00Z | 2020 | December | Sunday | 0 | 0 | 0 | Covid | . 6412020-12-28T00:00:00Z | 2020 | December | Monday | 0 | 0 | 1 | Covid | . 6422020-12-29T00:00:00Z | 2020 | December | Tuesday | 1 | 0 | 2 | Covid | . 6432020-12-30T00:00:00Z | 2020 | December | Wednesday | 0 | 0 | 2 | Covid | . 6442020-12-31T00:00:00Z | 2020 | December | Thursday | 0 | 0 | 3 | Covid | . A data.frame: 366 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2792020-01-01T00:00:00Z | 2020 | January | Wednesday | 106 | 25.471698 | 27 | Covid | . 2802020-01-02T00:00:00Z | 2020 | January | Thursday | 105 | 22.857143 | 24 | Covid | . 2812020-01-03T00:00:00Z | 2020 | January | Friday | 104 | 25.000000 | 26 | Covid | . 2822020-01-04T00:00:00Z | 2020 | January | Saturday | 103 | 26.213592 | 27 | Covid | . 2832020-01-05T00:00:00Z | 2020 | January | Sunday | 93 | 23.655914 | 22 | Covid | . 2842020-01-06T00:00:00Z | 2020 | January | Monday | 102 | 17.647059 | 18 | Covid | . 2852020-01-07T00:00:00Z | 2020 | January | Tuesday | 101 | 26.732673 | 27 | Covid | . 2862020-01-08T00:00:00Z | 2020 | January | Wednesday | 109 | 26.605505 | 29 | Covid | . 2872020-01-09T00:00:00Z | 2020 | January | Thursday | 110 | 24.545455 | 27 | Covid | . 2882020-01-10T00:00:00Z | 2020 | January | Friday | 101 | 19.801980 | 20 | Covid | . 2892020-01-11T00:00:00Z | 2020 | January | Saturday | 96 | 27.083333 | 26 | Covid | . 2902020-01-12T00:00:00Z | 2020 | January | Sunday | 121 | 27.272727 | 33 | Covid | . 2912020-01-13T00:00:00Z | 2020 | January | Monday | 114 | 22.807018 | 26 | Covid | . 2922020-01-14T00:00:00Z | 2020 | January | Tuesday | 112 | 29.464286 | 33 | Covid | . 2932020-01-15T00:00:00Z | 2020 | January | Wednesday | 117 | 29.059829 | 34 | Covid | . 2942020-01-16T00:00:00Z | 2020 | January | Thursday | 134 | 35.820896 | 48 | Covid | . 2952020-01-17T00:00:00Z | 2020 | January | Friday | 124 | 28.225806 | 35 | Covid | . 2962020-01-18T00:00:00Z | 2020 | January | Saturday | 392 | 7.142857 | 28 | Covid | . 2972020-01-19T00:00:00Z | 2020 | January | Sunday | 391 | 5.882353 | 23 | Covid | . 2982020-01-20T00:00:00Z | 2020 | January | Monday | 171 | 21.052632 | 36 | Covid | . 2992020-01-21T00:00:00Z | 2020 | January | Tuesday | 433 | 8.775982 | 38 | Covid | . 3002020-01-22T00:00:00Z | 2020 | January | Wednesday | 242 | 18.595041 | 45 | Covid | . 3012020-01-23T00:00:00Z | 2020 | January | Thursday | 192 | 29.166667 | 56 | Covid | . 3022020-01-24T00:00:00Z | 2020 | January | Friday | 248 | 20.564516 | 51 | Covid | . 3032020-01-25T00:00:00Z | 2020 | January | Saturday | 410 | 14.390244 | 59 | Covid | . 3042020-01-26T00:00:00Z | 2020 | January | Sunday | 191 | 14.659686 | 28 | Covid | . 3052020-01-27T00:00:00Z | 2020 | January | Monday | 154 | 25.324675 | 39 | Covid | . 3062020-01-28T00:00:00Z | 2020 | January | Tuesday | 166 | 25.903614 | 43 | Covid | . 3072020-01-29T00:00:00Z | 2020 | January | Wednesday | 505 | 12.871287 | 65 | Covid | . 3082020-01-30T00:00:00Z | 2020 | January | Thursday | 444 | 10.360360 | 46 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 6152020-12-02T00:00:00Z | 2020 | December | Wednesday | 159 | 16.981132 | 27 | Covid | . 6162020-12-03T00:00:00Z | 2020 | December | Thursday | 266 | 14.285714 | 38 | Covid | . 6172020-12-04T00:00:00Z | 2020 | December | Friday | 193 | 21.761658 | 42 | Covid | . 6182020-12-05T00:00:00Z | 2020 | December | Saturday | 157 | 26.114650 | 41 | Covid | . 6192020-12-06T00:00:00Z | 2020 | December | Sunday | 151 | 18.543046 | 28 | Covid | . 6202020-12-07T00:00:00Z | 2020 | December | Monday | 150 | 18.000000 | 27 | Covid | . 6212020-12-08T00:00:00Z | 2020 | December | Tuesday | 546 | 5.677656 | 31 | Covid | . 6222020-12-09T00:00:00Z | 2020 | December | Wednesday | 157 | 15.286624 | 24 | Covid | . 6232020-12-10T00:00:00Z | 2020 | December | Thursday | 135 | 22.962963 | 31 | Covid | . 6242020-12-11T00:00:00Z | 2020 | December | Friday | 167 | 17.964072 | 30 | Covid | . 6252020-12-12T00:00:00Z | 2020 | December | Saturday | 250 | 11.200000 | 28 | Covid | . 6262020-12-13T00:00:00Z | 2020 | December | Sunday | 137 | 16.788321 | 23 | Covid | . 6272020-12-14T00:00:00Z | 2020 | December | Monday | 120 | 23.333333 | 28 | Covid | . 6282020-12-15T00:00:00Z | 2020 | December | Tuesday | 126 | 24.603175 | 31 | Covid | . 6292020-12-16T00:00:00Z | 2020 | December | Wednesday | 242 | 17.768595 | 43 | Covid | . 6302020-12-17T00:00:00Z | 2020 | December | Thursday | 168 | 22.619048 | 38 | Covid | . 6312020-12-18T00:00:00Z | 2020 | December | Friday | 138 | 13.043478 | 18 | Covid | . 6322020-12-19T00:00:00Z | 2020 | December | Saturday | 263 | 9.125475 | 24 | Covid | . 6332020-12-20T00:00:00Z | 2020 | December | Sunday | 258 | 9.689922 | 25 | Covid | . 6342020-12-21T00:00:00Z | 2020 | December | Monday | 130 | 13.076923 | 17 | Covid | . 6352020-12-22T00:00:00Z | 2020 | December | Tuesday | 136 | 13.235294 | 18 | Covid | . 6362020-12-23T00:00:00Z | 2020 | December | Wednesday | 120 | 16.666667 | 20 | Covid | . 6372020-12-24T00:00:00Z | 2020 | December | Thursday | 107 | 26.168224 | 28 | Covid | . 6382020-12-25T00:00:00Z | 2020 | December | Friday | 550 | 3.818182 | 21 | Covid | . 6392020-12-26T00:00:00Z | 2020 | December | Saturday | 149 | 12.751678 | 19 | Covid | . 6402020-12-27T00:00:00Z | 2020 | December | Sunday | 141 | 14.893617 | 21 | Covid | . 6412020-12-28T00:00:00Z | 2020 | December | Monday | 116 | 22.413793 | 26 | Covid | . 6422020-12-29T00:00:00Z | 2020 | December | Tuesday | 114 | 26.315789 | 30 | Covid | . 6432020-12-30T00:00:00Z | 2020 | December | Wednesday | 125 | 18.400000 | 23 | Covid | . 6442020-12-31T00:00:00Z | 2020 | December | Thursday | 156 | 21.794872 | 34 | Covid | . . 2021 . joins.2021 leaves.2021 sources.2021 comm.2021 . A data.frame: 85 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 6452021-01-01T00:00:00Z | 2021 | January | Friday | 5 | 20.00000 | 40.00000 | Covid | . 6462021-01-02T00:00:00Z | 2021 | January | Saturday | 2 | 0.00000 | 100.00000 | Covid | . 6472021-01-03T00:00:00Z | 2021 | January | Sunday | 2 | 0.00000 | 50.00000 | Covid | . 6482021-01-04T00:00:00Z | 2021 | January | Monday | 0 | NA | NA | Covid | . 6492021-01-05T00:00:00Z | 2021 | January | Tuesday | 2 | 0.00000 | 50.00000 | Covid | . 6502021-01-06T00:00:00Z | 2021 | January | Wednesday | 1 | 0.00000 | 100.00000 | Covid | . 6512021-01-07T00:00:00Z | 2021 | January | Thursday | 2 | 50.00000 | 50.00000 | Covid | . 6522021-01-08T00:00:00Z | 2021 | January | Friday | 16 | 31.25000 | 68.75000 | Covid | . 6532021-01-09T00:00:00Z | 2021 | January | Saturday | 3 | 0.00000 | 0.00000 | Covid | . 6542021-01-10T00:00:00Z | 2021 | January | Sunday | 3 | 33.33333 | 66.66667 | Covid | . 6552021-01-11T00:00:00Z | 2021 | January | Monday | 2 | 0.00000 | 50.00000 | Covid | . 6562021-01-12T00:00:00Z | 2021 | January | Tuesday | 2 | 0.00000 | 50.00000 | Covid | . 6572021-01-13T00:00:00Z | 2021 | January | Wednesday | 4 | 0.00000 | 75.00000 | Covid | . 6582021-01-14T00:00:00Z | 2021 | January | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 6592021-01-15T00:00:00Z | 2021 | January | Friday | 5 | 80.00000 | 100.00000 | Covid | . 6602021-01-16T00:00:00Z | 2021 | January | Saturday | 2 | 0.00000 | 50.00000 | Covid | . 6612021-01-17T00:00:00Z | 2021 | January | Sunday | 2 | 0.00000 | 100.00000 | Covid | . 6622021-01-18T00:00:00Z | 2021 | January | Monday | 3 | 66.66667 | 100.00000 | Covid | . 6632021-01-19T00:00:00Z | 2021 | January | Tuesday | 1 | 0.00000 | 0.00000 | Covid | . 6642021-01-20T00:00:00Z | 2021 | January | Wednesday | 2 | 50.00000 | 50.00000 | Covid | . 6652021-01-21T00:00:00Z | 2021 | January | Thursday | 8 | 0.00000 | 25.00000 | Covid | . 6662021-01-22T00:00:00Z | 2021 | January | Friday | 1 | 0.00000 | 100.00000 | Covid | . 6672021-01-23T00:00:00Z | 2021 | January | Saturday | 1 | 0.00000 | 100.00000 | Covid | . 6682021-01-24T00:00:00Z | 2021 | January | Sunday | 4 | 0.00000 | 75.00000 | Covid | . 6692021-01-25T00:00:00Z | 2021 | January | Monday | 14 | 21.42857 | 57.14286 | Covid | . 6702021-01-26T00:00:00Z | 2021 | January | Tuesday | 2 | 0.00000 | 50.00000 | Covid | . 6712021-01-27T00:00:00Z | 2021 | January | Wednesday | 6 | 33.33333 | 83.33333 | Covid | . 6722021-01-28T00:00:00Z | 2021 | January | Thursday | 5 | 0.00000 | 20.00000 | Covid | . 6732021-01-29T00:00:00Z | 2021 | January | Friday | 6 | 16.66667 | 66.66667 | Covid | . 6742021-01-30T00:00:00Z | 2021 | January | Saturday | 2 | 50.00000 | 100.00000 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 7002021-02-25T00:00:00Z | 2021 | February | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 7012021-02-26T00:00:00Z | 2021 | February | Friday | 5 | 40.00000 | 100.00000 | Covid | . 7022021-02-27T00:00:00Z | 2021 | February | Saturday | 8 | 12.50000 | 100.00000 | Covid | . 7032021-02-28T00:00:00Z | 2021 | February | Sunday | 5 | 20.00000 | 100.00000 | Covid | . 7042021-03-01T00:00:00Z | 2021 | March | Monday | 2 | 0.00000 | 50.00000 | Covid | . 7052021-03-02T00:00:00Z | 2021 | March | Tuesday | 6 | 16.66667 | 16.66667 | Covid | . 7062021-03-03T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | Covid | . 7072021-03-04T00:00:00Z | 2021 | March | Thursday | 8 | 0.00000 | 62.50000 | Covid | . 7082021-03-05T00:00:00Z | 2021 | March | Friday | 3 | 33.33333 | 33.33333 | Covid | . 7092021-03-06T00:00:00Z | 2021 | March | Saturday | 3 | 0.00000 | 66.66667 | Covid | . 7102021-03-07T00:00:00Z | 2021 | March | Sunday | 3 | 0.00000 | 33.33333 | Covid | . 7112021-03-08T00:00:00Z | 2021 | March | Monday | 7 | 14.28571 | 42.85714 | Covid | . 7122021-03-09T00:00:00Z | 2021 | March | Tuesday | 7 | 0.00000 | 57.14286 | Covid | . 7132021-03-10T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | Covid | . 7142021-03-11T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 7152021-03-12T00:00:00Z | 2021 | March | Friday | 11 | 18.18182 | 45.45455 | Covid | . 7162021-03-13T00:00:00Z | 2021 | March | Saturday | 4 | 0.00000 | 50.00000 | Covid | . 7172021-03-14T00:00:00Z | 2021 | March | Sunday | 1 | 0.00000 | 0.00000 | Covid | . 7182021-03-15T00:00:00Z | 2021 | March | Monday | 1 | 0.00000 | 0.00000 | Covid | . 7192021-03-16T00:00:00Z | 2021 | March | Tuesday | 6 | 0.00000 | 83.33333 | Covid | . 7202021-03-17T00:00:00Z | 2021 | March | Wednesday | 7 | 0.00000 | 71.42857 | Covid | . 7212021-03-18T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | Covid | . 7222021-03-19T00:00:00Z | 2021 | March | Friday | 5 | 0.00000 | 80.00000 | Covid | . 7232021-03-20T00:00:00Z | 2021 | March | Saturday | 2 | 0.00000 | 0.00000 | Covid | . 7242021-03-21T00:00:00Z | 2021 | March | Sunday | 6 | 33.33333 | 33.33333 | Covid | . 7252021-03-22T00:00:00Z | 2021 | March | Monday | 5 | 20.00000 | 60.00000 | Covid | . 7262021-03-23T00:00:00Z | 2021 | March | Tuesday | 1 | 0.00000 | 0.00000 | Covid | . 7272021-03-24T00:00:00Z | 2021 | March | Wednesday | 4 | 0.00000 | 50.00000 | Covid | . 7282021-03-25T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | Covid | . 7292021-03-26T00:00:00Z | 2021 | March | Friday | 4 | NA | NA | Covid | . A data.frame: 135 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 9702021-01-01T00:00:00Z | 2021 | January | Friday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9712021-01-01T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9722021-01-02T00:00:00Z | 2021 | January | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9732021-01-02T00:00:00Z | 2021 | January | Saturday | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9742021-01-03T00:00:00Z | 2021 | January | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9752021-01-03T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9762021-01-04T00:00:00Z | 2021 | January | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9772021-01-05T00:00:00Z | 2021 | January | Tuesday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9782021-01-06T00:00:00Z | 2021 | January | Wednesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9792021-01-07T00:00:00Z | 2021 | January | Thursday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9802021-01-07T00:00:00Z | 2021 | January | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9812021-01-08T00:00:00Z | 2021 | January | Friday | &#39;Members for 1 month+&#39; | 5 | Covid | . 9822021-01-08T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 9832021-01-09T00:00:00Z | 2021 | January | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9842021-01-09T00:00:00Z | 2021 | January | Saturday | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9852021-01-10T00:00:00Z | 2021 | January | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9862021-01-11T00:00:00Z | 2021 | January | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9872021-01-12T00:00:00Z | 2021 | January | Tuesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9882021-01-13T00:00:00Z | 2021 | January | Wednesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9892021-01-13T00:00:00Z | 2021 | January | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9902021-01-14T00:00:00Z | 2021 | January | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9912021-01-15T00:00:00Z | 2021 | January | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9922021-01-16T00:00:00Z | 2021 | January | Saturday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9932021-01-17T00:00:00Z | 2021 | January | Sunday | &#39;Members for 1 month+&#39; | 0 | Covid | . 9942021-01-18T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9952021-01-19T00:00:00Z | 2021 | January | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9962021-01-19T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9972021-01-20T00:00:00Z | 2021 | January | Wednesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9982021-01-20T00:00:00Z | 2021 | January | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9992021-01-21T00:00:00Z | 2021 | January | Thursday | &#39;Members for 1 month+&#39; | 1 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 10752021-03-09T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10762021-03-09T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10772021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10782021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 10792021-03-11T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10802021-03-12T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10812021-03-12T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 5 | Covid | . 10822021-03-13T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10832021-03-14T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10842021-03-14T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10852021-03-15T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10862021-03-16T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10872021-03-16T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 10882021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 4 | Covid | . 10892021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 10902021-03-18T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10912021-03-19T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10922021-03-19T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 10932021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for 1 month+&#39; | 5 | Covid | . 10942021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10952021-03-21T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10962021-03-21T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 10972021-03-22T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10982021-03-23T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 10992021-03-23T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 11002021-03-24T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 0 | Covid | . 11012021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 11022021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 11032021-03-26T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 3 | Covid | . 11042021-03-26T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . A data.frame: 85 × 8 interval_start_timestampyearmonthdaydiscovery_joinsinvitesvanity_joinsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;fct&gt; . 6452021-01-01T00:00:00Z | 2021 | January | Friday | 0 | 0 | 6 | Covid | . 6462021-01-02T00:00:00Z | 2021 | January | Saturday | 0 | 0 | 2 | Covid | . 6472021-01-03T00:00:00Z | 2021 | January | Sunday | 1 | 0 | 1 | Covid | . 6482021-01-04T00:00:00Z | 2021 | January | Monday | 0 | 0 | 0 | Covid | . 6492021-01-05T00:00:00Z | 2021 | January | Tuesday | 0 | 0 | 2 | Covid | . 6502021-01-06T00:00:00Z | 2021 | January | Wednesday | 0 | 0 | 1 | Covid | . 6512021-01-07T00:00:00Z | 2021 | January | Thursday | 0 | 0 | 2 | Covid | . 6522021-01-08T00:00:00Z | 2021 | January | Friday | 0 | 0 | 16 | Covid | . 6532021-01-09T00:00:00Z | 2021 | January | Saturday | 0 | 0 | 4 | Covid | . 6542021-01-10T00:00:00Z | 2021 | January | Sunday | 0 | 0 | 3 | Covid | . 6552021-01-11T00:00:00Z | 2021 | January | Monday | 0 | 0 | 2 | Covid | . 6562021-01-12T00:00:00Z | 2021 | January | Tuesday | 0 | 0 | 2 | Covid | . 6572021-01-13T00:00:00Z | 2021 | January | Wednesday | 0 | 0 | 4 | Covid | . 6582021-01-14T00:00:00Z | 2021 | January | Thursday | 0 | 0 | 1 | Covid | . 6592021-01-15T00:00:00Z | 2021 | January | Friday | 0 | 0 | 5 | Covid | . 6602021-01-16T00:00:00Z | 2021 | January | Saturday | 0 | 0 | 2 | Covid | . 6612021-01-17T00:00:00Z | 2021 | January | Sunday | 0 | 0 | 3 | Covid | . 6622021-01-18T00:00:00Z | 2021 | January | Monday | 0 | 0 | 3 | Covid | . 6632021-01-19T00:00:00Z | 2021 | January | Tuesday | 0 | 0 | 2 | Covid | . 6642021-01-20T00:00:00Z | 2021 | January | Wednesday | 0 | 0 | 2 | Covid | . 6652021-01-21T00:00:00Z | 2021 | January | Thursday | 0 | 0 | 9 | Covid | . 6662021-01-22T00:00:00Z | 2021 | January | Friday | 0 | 0 | 1 | Covid | . 6672021-01-23T00:00:00Z | 2021 | January | Saturday | 0 | 0 | 4 | Covid | . 6682021-01-24T00:00:00Z | 2021 | January | Sunday | 0 | 0 | 4 | Covid | . 6692021-01-25T00:00:00Z | 2021 | January | Monday | 0 | 0 | 14 | Covid | . 6702021-01-26T00:00:00Z | 2021 | January | Tuesday | 0 | 0 | 5 | Covid | . 6712021-01-27T00:00:00Z | 2021 | January | Wednesday | 0 | 0 | 6 | Covid | . 6722021-01-28T00:00:00Z | 2021 | January | Thursday | 0 | 0 | 5 | Covid | . 6732021-01-29T00:00:00Z | 2021 | January | Friday | 1 | 0 | 5 | Covid | . 6742021-01-30T00:00:00Z | 2021 | January | Saturday | 0 | 0 | 2 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 7002021-02-25T00:00:00Z | 2021 | February | Thursday | 0 | 0 | 1 | Covid | . 7012021-02-26T00:00:00Z | 2021 | February | Friday | 0 | 0 | 6 | Covid | . 7022021-02-27T00:00:00Z | 2021 | February | Saturday | 0 | 0 | 9 | Covid | . 7032021-02-28T00:00:00Z | 2021 | February | Sunday | 0 | 0 | 5 | Covid | . 7042021-03-01T00:00:00Z | 2021 | March | Monday | 0 | 0 | 3 | Covid | . 7052021-03-02T00:00:00Z | 2021 | March | Tuesday | 0 | 0 | 6 | Covid | . 7062021-03-03T00:00:00Z | 2021 | March | Wednesday | 0 | 0 | 5 | Covid | . 7072021-03-04T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 8 | Covid | . 7082021-03-05T00:00:00Z | 2021 | March | Friday | 0 | 0 | 4 | Covid | . 7092021-03-06T00:00:00Z | 2021 | March | Saturday | 0 | 0 | 3 | Covid | . 7102021-03-07T00:00:00Z | 2021 | March | Sunday | 0 | 0 | 4 | Covid | . 7112021-03-08T00:00:00Z | 2021 | March | Monday | 0 | 0 | 7 | Covid | . 7122021-03-09T00:00:00Z | 2021 | March | Tuesday | 1 | 0 | 6 | Covid | . 7132021-03-10T00:00:00Z | 2021 | March | Wednesday | 0 | 0 | 5 | Covid | . 7142021-03-11T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 2 | Covid | . 7152021-03-12T00:00:00Z | 2021 | March | Friday | 0 | 0 | 11 | Covid | . 7162021-03-13T00:00:00Z | 2021 | March | Saturday | 1 | 0 | 3 | Covid | . 7172021-03-14T00:00:00Z | 2021 | March | Sunday | 0 | 0 | 1 | Covid | . 7182021-03-15T00:00:00Z | 2021 | March | Monday | 0 | 0 | 2 | Covid | . 7192021-03-16T00:00:00Z | 2021 | March | Tuesday | 1 | 0 | 6 | Covid | . 7202021-03-17T00:00:00Z | 2021 | March | Wednesday | 1 | 0 | 9 | Covid | . 7212021-03-18T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 1 | Covid | . 7222021-03-19T00:00:00Z | 2021 | March | Friday | 1 | 0 | 4 | Covid | . 7232021-03-20T00:00:00Z | 2021 | March | Saturday | 0 | 0 | 2 | Covid | . 7242021-03-21T00:00:00Z | 2021 | March | Sunday | 0 | 0 | 7 | Covid | . 7252021-03-22T00:00:00Z | 2021 | March | Monday | 0 | 0 | 6 | Covid | . 7262021-03-23T00:00:00Z | 2021 | March | Tuesday | 0 | 0 | 1 | Covid | . 7272021-03-24T00:00:00Z | 2021 | March | Wednesday | 0 | 0 | 5 | Covid | . 7282021-03-25T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 2 | Covid | . 7292021-03-26T00:00:00Z | 2021 | March | Friday | 0 | 0 | 4 | Covid | . A data.frame: 85 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 6452021-01-01T00:00:00Z | 2021 | January | Friday | 312 | 9.294872 | 29 | Covid | . 6462021-01-02T00:00:00Z | 2021 | January | Saturday | 174 | 17.241379 | 30 | Covid | . 6472021-01-03T00:00:00Z | 2021 | January | Sunday | 132 | 18.939394 | 25 | Covid | . 6482021-01-04T00:00:00Z | 2021 | January | Monday | 112 | 21.428571 | 24 | Covid | . 6492021-01-05T00:00:00Z | 2021 | January | Tuesday | 144 | 12.500000 | 18 | Covid | . 6502021-01-06T00:00:00Z | 2021 | January | Wednesday | 368 | 7.065217 | 26 | Covid | . 6512021-01-07T00:00:00Z | 2021 | January | Thursday | 315 | 13.015873 | 41 | Covid | . 6522021-01-08T00:00:00Z | 2021 | January | Friday | 274 | 16.788321 | 46 | Covid | . 6532021-01-09T00:00:00Z | 2021 | January | Saturday | 248 | 10.483871 | 26 | Covid | . 6542021-01-10T00:00:00Z | 2021 | January | Sunday | 149 | 18.791946 | 28 | Covid | . 6552021-01-11T00:00:00Z | 2021 | January | Monday | 225 | 16.888889 | 38 | Covid | . 6562021-01-12T00:00:00Z | 2021 | January | Tuesday | 150 | 17.333333 | 26 | Covid | . 6572021-01-13T00:00:00Z | 2021 | January | Wednesday | 152 | 18.421053 | 28 | Covid | . 6582021-01-14T00:00:00Z | 2021 | January | Thursday | 144 | 15.277778 | 22 | Covid | . 6592021-01-15T00:00:00Z | 2021 | January | Friday | 148 | 27.027027 | 40 | Covid | . 6602021-01-16T00:00:00Z | 2021 | January | Saturday | 123 | 19.512195 | 24 | Covid | . 6612021-01-17T00:00:00Z | 2021 | January | Sunday | 129 | 13.178295 | 17 | Covid | . 6622021-01-18T00:00:00Z | 2021 | January | Monday | 136 | 23.529412 | 32 | Covid | . 6632021-01-19T00:00:00Z | 2021 | January | Tuesday | 133 | 20.300752 | 27 | Covid | . 6642021-01-20T00:00:00Z | 2021 | January | Wednesday | 136 | 19.852941 | 27 | Covid | . 6652021-01-21T00:00:00Z | 2021 | January | Thursday | 127 | 23.622047 | 30 | Covid | . 6662021-01-22T00:00:00Z | 2021 | January | Friday | 192 | 19.270833 | 37 | Covid | . 6672021-01-23T00:00:00Z | 2021 | January | Saturday | 139 | 19.424460 | 27 | Covid | . 6682021-01-24T00:00:00Z | 2021 | January | Sunday | 153 | 15.686275 | 24 | Covid | . 6692021-01-25T00:00:00Z | 2021 | January | Monday | 276 | 15.217391 | 42 | Covid | . 6702021-01-26T00:00:00Z | 2021 | January | Tuesday | 184 | 19.021739 | 35 | Covid | . 6712021-01-27T00:00:00Z | 2021 | January | Wednesday | 182 | 24.725275 | 45 | Covid | . 6722021-01-28T00:00:00Z | 2021 | January | Thursday | 605 | 6.280992 | 38 | Covid | . 6732021-01-29T00:00:00Z | 2021 | January | Friday | 261 | 13.409962 | 35 | Covid | . 6742021-01-30T00:00:00Z | 2021 | January | Saturday | 201 | 20.398010 | 41 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 7002021-02-25T00:00:00Z | 2021 | February | Thursday | 172 | 23.255814 | 40 | Covid | . 7012021-02-26T00:00:00Z | 2021 | February | Friday | 167 | 19.161677 | 32 | Covid | . 7022021-02-27T00:00:00Z | 2021 | February | Saturday | 208 | 20.673077 | 43 | Covid | . 7032021-02-28T00:00:00Z | 2021 | February | Sunday | 167 | 17.964072 | 30 | Covid | . 7042021-03-01T00:00:00Z | 2021 | March | Monday | 164 | 18.292683 | 30 | Covid | . 7052021-03-02T00:00:00Z | 2021 | March | Tuesday | 199 | 15.075377 | 30 | Covid | . 7062021-03-03T00:00:00Z | 2021 | March | Wednesday | 163 | 18.404908 | 30 | Covid | . 7072021-03-04T00:00:00Z | 2021 | March | Thursday | 163 | 20.858896 | 34 | Covid | . 7082021-03-05T00:00:00Z | 2021 | March | Friday | 179 | 17.318436 | 31 | Covid | . 7092021-03-06T00:00:00Z | 2021 | March | Saturday | 304 | 9.539474 | 29 | Covid | . 7102021-03-07T00:00:00Z | 2021 | March | Sunday | 162 | 15.432099 | 25 | Covid | . 7112021-03-08T00:00:00Z | 2021 | March | Monday | 234 | 13.675214 | 32 | Covid | . 7122021-03-09T00:00:00Z | 2021 | March | Tuesday | 160 | 23.125000 | 37 | Covid | . 7132021-03-10T00:00:00Z | 2021 | March | Wednesday | 156 | 20.512821 | 32 | Covid | . 7142021-03-11T00:00:00Z | 2021 | March | Thursday | 553 | 7.233273 | 40 | Covid | . 7152021-03-12T00:00:00Z | 2021 | March | Friday | 253 | 14.624506 | 37 | Covid | . 7162021-03-13T00:00:00Z | 2021 | March | Saturday | 237 | 14.345992 | 34 | Covid | . 7172021-03-14T00:00:00Z | 2021 | March | Sunday | 147 | 20.408163 | 30 | Covid | . 7182021-03-15T00:00:00Z | 2021 | March | Monday | 154 | 18.831169 | 29 | Covid | . 7192021-03-16T00:00:00Z | 2021 | March | Tuesday | 154 | 21.428571 | 33 | Covid | . 7202021-03-17T00:00:00Z | 2021 | March | Wednesday | 141 | 21.985816 | 31 | Covid | . 7212021-03-18T00:00:00Z | 2021 | March | Thursday | 153 | 20.261438 | 31 | Covid | . 7222021-03-19T00:00:00Z | 2021 | March | Friday | 268 | 19.402985 | 52 | Covid | . 7232021-03-20T00:00:00Z | 2021 | March | Saturday | 658 | 6.382979 | 42 | Covid | . 7242021-03-21T00:00:00Z | 2021 | March | Sunday | 170 | 23.529412 | 40 | Covid | . 7252021-03-22T00:00:00Z | 2021 | March | Monday | 174 | 22.413793 | 39 | Covid | . 7262021-03-23T00:00:00Z | 2021 | March | Tuesday | 143 | 16.783217 | 24 | Covid | . 7272021-03-24T00:00:00Z | 2021 | March | Wednesday | 157 | 17.197452 | 27 | Covid | . 7282021-03-25T00:00:00Z | 2021 | March | Thursday | 165 | 25.454545 | 42 | Covid | . 7292021-03-26T00:00:00Z | 2021 | March | Friday | 573 | 6.108202 | 35 | Covid | . . Aggregating by month . 2019 . head(joins.2019) head(leaves.2019) head(comm.2019) agg_joins.2019 = aggregate(joins.2019$new_members, list(joins.2019$month), sum) colnames(agg_joins.2019) &lt;- c(&quot;Months&quot;, &quot;Total New Members&quot;) agg_leaves.2019 = aggregate(leaves.2019$leavers, list(leaves.2019$month), sum) colnames(agg_leaves.2019) &lt;- c(&quot;Months&quot;, &quot;Total Leavers&quot;) agg_comm.2019 = aggregate(comm.2019$total_communicated, list(comm.2019$month), sum) colnames(agg_comm.2019) &lt;- c(&quot;Months&quot;, &quot;Total Communicated&quot;) . A data.frame: 6 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | Normal | . A data.frame: 6 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 32019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 42019-03-31T00:00:00Z | 2019 | March | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 52019-03-31T00:00:00Z | 2019 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 62019-04-01T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 4 | Normal | . A data.frame: 6 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 206 | 25.72816 | 53 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 184 | 20.65217 | 38 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 185 | 24.32432 | 45 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 328 | 22.86585 | 75 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 143 | 33.56643 | 48 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 271 | 16.60517 | 45 | Normal | . 2020 . joins.2020 leaves.2020 comm.2020 agg_joins.2020 = aggregate(joins.2020$new_members, list(joins.2020$month), sum) colnames(agg_joins.2020) &lt;- c(&quot;Months&quot;, &quot;Total New Members&quot;) agg_leaves.2020 = aggregate(leaves.2020$leavers, list(leaves.2020$month), sum) colnames(agg_leaves.2020) &lt;- c(&quot;Months&quot;, &quot;Total Leavers&quot;) agg_comm.2020 = aggregate(comm.2020$total_communicated, list(comm.2020$month), sum) colnames(agg_comm.2020) &lt;- c(&quot;Months&quot;, &quot;Total Communicated&quot;) . A data.frame: 366 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2792020-01-01T00:00:00Z | 2020 | January | Wednesday | 0 | NA | NA | Covid | . 2802020-01-02T00:00:00Z | 2020 | January | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 2812020-01-03T00:00:00Z | 2020 | January | Friday | 2 | 0.00000 | 50.00000 | Covid | . 2822020-01-04T00:00:00Z | 2020 | January | Saturday | 0 | NA | NA | Covid | . 2832020-01-05T00:00:00Z | 2020 | January | Sunday | 0 | NA | NA | Covid | . 2842020-01-06T00:00:00Z | 2020 | January | Monday | 3 | 0.00000 | 0.00000 | Covid | . 2852020-01-07T00:00:00Z | 2020 | January | Tuesday | 1 | 0.00000 | 100.00000 | Covid | . 2862020-01-08T00:00:00Z | 2020 | January | Wednesday | 2 | 0.00000 | 50.00000 | Covid | . 2872020-01-09T00:00:00Z | 2020 | January | Thursday | 3 | 33.33333 | 33.33333 | Covid | . 2882020-01-10T00:00:00Z | 2020 | January | Friday | 2 | 0.00000 | 0.00000 | Covid | . 2892020-01-11T00:00:00Z | 2020 | January | Saturday | 0 | NA | NA | Covid | . 2902020-01-12T00:00:00Z | 2020 | January | Sunday | 2 | 0.00000 | 100.00000 | Covid | . 2912020-01-13T00:00:00Z | 2020 | January | Monday | 2 | 100.00000 | 100.00000 | Covid | . 2922020-01-14T00:00:00Z | 2020 | January | Tuesday | 7 | 14.28571 | 57.14286 | Covid | . 2932020-01-15T00:00:00Z | 2020 | January | Wednesday | 4 | 0.00000 | 25.00000 | Covid | . 2942020-01-16T00:00:00Z | 2020 | January | Thursday | 3 | 33.33333 | 100.00000 | Covid | . 2952020-01-17T00:00:00Z | 2020 | January | Friday | 1 | 0.00000 | 0.00000 | Covid | . 2962020-01-18T00:00:00Z | 2020 | January | Saturday | 3 | 0.00000 | 100.00000 | Covid | . 2972020-01-19T00:00:00Z | 2020 | January | Sunday | 2 | 0.00000 | 50.00000 | Covid | . 2982020-01-20T00:00:00Z | 2020 | January | Monday | 2 | 50.00000 | 100.00000 | Covid | . 2992020-01-21T00:00:00Z | 2020 | January | Tuesday | 4 | 25.00000 | 75.00000 | Covid | . 3002020-01-22T00:00:00Z | 2020 | January | Wednesday | 3 | 0.00000 | 0.00000 | Covid | . 3012020-01-23T00:00:00Z | 2020 | January | Thursday | 19 | 15.78947 | 21.05263 | Covid | . 3022020-01-24T00:00:00Z | 2020 | January | Friday | 0 | NA | NA | Covid | . 3032020-01-25T00:00:00Z | 2020 | January | Saturday | 3 | 33.33333 | 33.33333 | Covid | . 3042020-01-26T00:00:00Z | 2020 | January | Sunday | 3 | 0.00000 | 100.00000 | Covid | . 3052020-01-27T00:00:00Z | 2020 | January | Monday | 3 | 0.00000 | 66.66667 | Covid | . 3062020-01-28T00:00:00Z | 2020 | January | Tuesday | 2 | 0.00000 | 100.00000 | Covid | . 3072020-01-29T00:00:00Z | 2020 | January | Wednesday | 5 | 40.00000 | 80.00000 | Covid | . 3082020-01-30T00:00:00Z | 2020 | January | Thursday | 1 | 0.00000 | 100.00000 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 6152020-12-02T00:00:00Z | 2020 | December | Wednesday | 2 | 50.00000 | 100.00000 | Covid | . 6162020-12-03T00:00:00Z | 2020 | December | Thursday | 2 | 0.00000 | 50.00000 | Covid | . 6172020-12-04T00:00:00Z | 2020 | December | Friday | 5 | 40.00000 | 80.00000 | Covid | . 6182020-12-05T00:00:00Z | 2020 | December | Saturday | 4 | 25.00000 | 25.00000 | Covid | . 6192020-12-06T00:00:00Z | 2020 | December | Sunday | 3 | 0.00000 | 0.00000 | Covid | . 6202020-12-07T00:00:00Z | 2020 | December | Monday | 1 | 0.00000 | 100.00000 | Covid | . 6212020-12-08T00:00:00Z | 2020 | December | Tuesday | 1 | 0.00000 | 100.00000 | Covid | . 6222020-12-09T00:00:00Z | 2020 | December | Wednesday | 1 | 0.00000 | 0.00000 | Covid | . 6232020-12-10T00:00:00Z | 2020 | December | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 6242020-12-11T00:00:00Z | 2020 | December | Friday | 1 | 0.00000 | 100.00000 | Covid | . 6252020-12-12T00:00:00Z | 2020 | December | Saturday | 3 | 0.00000 | 66.66667 | Covid | . 6262020-12-13T00:00:00Z | 2020 | December | Sunday | 5 | 0.00000 | 20.00000 | Covid | . 6272020-12-14T00:00:00Z | 2020 | December | Monday | 3 | 0.00000 | 66.66667 | Covid | . 6282020-12-15T00:00:00Z | 2020 | December | Tuesday | 2 | 50.00000 | 100.00000 | Covid | . 6292020-12-16T00:00:00Z | 2020 | December | Wednesday | 4 | 50.00000 | 75.00000 | Covid | . 6302020-12-17T00:00:00Z | 2020 | December | Thursday | 0 | NA | NA | Covid | . 6312020-12-18T00:00:00Z | 2020 | December | Friday | 2 | 50.00000 | 50.00000 | Covid | . 6322020-12-19T00:00:00Z | 2020 | December | Saturday | 0 | NA | NA | Covid | . 6332020-12-20T00:00:00Z | 2020 | December | Sunday | 9 | 11.11111 | 55.55556 | Covid | . 6342020-12-21T00:00:00Z | 2020 | December | Monday | 2 | 50.00000 | 50.00000 | Covid | . 6352020-12-22T00:00:00Z | 2020 | December | Tuesday | 3 | 0.00000 | 33.33333 | Covid | . 6362020-12-23T00:00:00Z | 2020 | December | Wednesday | 0 | NA | NA | Covid | . 6372020-12-24T00:00:00Z | 2020 | December | Thursday | 0 | NA | NA | Covid | . 6382020-12-25T00:00:00Z | 2020 | December | Friday | 2 | 0.00000 | 0.00000 | Covid | . 6392020-12-26T00:00:00Z | 2020 | December | Saturday | 3 | 33.33333 | 100.00000 | Covid | . 6402020-12-27T00:00:00Z | 2020 | December | Sunday | 0 | NA | NA | Covid | . 6412020-12-28T00:00:00Z | 2020 | December | Monday | 1 | 0.00000 | 0.00000 | Covid | . 6422020-12-29T00:00:00Z | 2020 | December | Tuesday | 3 | 0.00000 | 33.33333 | Covid | . 6432020-12-30T00:00:00Z | 2020 | December | Wednesday | 1 | 0.00000 | 0.00000 | Covid | . 6442020-12-31T00:00:00Z | 2020 | December | Thursday | 3 | 0.00000 | 33.33333 | Covid | . A data.frame: 568 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 4022020-01-01T00:00:00Z | 2020 | January | Wednesday | &#39;Members for 1 month+&#39; | 0 | Covid | . 4032020-01-02T00:00:00Z | 2020 | January | Thursday | &#39;Members for 1 month+&#39; | 0 | Covid | . 4042020-01-03T00:00:00Z | 2020 | January | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4052020-01-03T00:00:00Z | 2020 | January | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4062020-01-04T00:00:00Z | 2020 | January | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4072020-01-04T00:00:00Z | 2020 | January | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4082020-01-05T00:00:00Z | 2020 | January | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 4092020-01-06T00:00:00Z | 2020 | January | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4102020-01-07T00:00:00Z | 2020 | January | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 4112020-01-08T00:00:00Z | 2020 | January | Wednesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 4122020-01-08T00:00:00Z | 2020 | January | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4132020-01-09T00:00:00Z | 2020 | January | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4142020-01-09T00:00:00Z | 2020 | January | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4152020-01-10T00:00:00Z | 2020 | January | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4162020-01-11T00:00:00Z | 2020 | January | Saturday | &#39;Members for 1 month+&#39; | 0 | Covid | . 4172020-01-12T00:00:00Z | 2020 | January | Sunday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4182020-01-13T00:00:00Z | 2020 | January | Monday | &#39;Members for 1 month+&#39; | 4 | Covid | . 4192020-01-14T00:00:00Z | 2020 | January | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 4202020-01-14T00:00:00Z | 2020 | January | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4212020-01-15T00:00:00Z | 2020 | January | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4222020-01-16T00:00:00Z | 2020 | January | Thursday | &#39;Members for 1 month+&#39; | 3 | Covid | . 4232020-01-16T00:00:00Z | 2020 | January | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4242020-01-17T00:00:00Z | 2020 | January | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4252020-01-17T00:00:00Z | 2020 | January | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 4262020-01-18T00:00:00Z | 2020 | January | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4272020-01-19T00:00:00Z | 2020 | January | Sunday | &#39;Members for 1 month+&#39; | 2 | Covid | . 4282020-01-20T00:00:00Z | 2020 | January | Monday | &#39;Members for 1 month+&#39; | 0 | Covid | . 4292020-01-21T00:00:00Z | 2020 | January | Tuesday | &#39;Members for 1 month+&#39; | 7 | Covid | . 4302020-01-22T00:00:00Z | 2020 | January | Wednesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 4312020-01-23T00:00:00Z | 2020 | January | Thursday | &#39;Members for 1 month+&#39; | 1 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 9402020-12-11T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9412020-12-12T00:00:00Z | 2020 | December | Saturday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9422020-12-12T00:00:00Z | 2020 | December | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9432020-12-13T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9442020-12-14T00:00:00Z | 2020 | December | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9452020-12-14T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9462020-12-15T00:00:00Z | 2020 | December | Tuesday | &#39;Members for 1 month+&#39; | 0 | Covid | . 9472020-12-16T00:00:00Z | 2020 | December | Wednesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9482020-12-16T00:00:00Z | 2020 | December | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9492020-12-17T00:00:00Z | 2020 | December | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9502020-12-18T00:00:00Z | 2020 | December | Friday | &#39;Members for 1 month+&#39; | 0 | Covid | . 9512020-12-19T00:00:00Z | 2020 | December | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9522020-12-19T00:00:00Z | 2020 | December | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9532020-12-20T00:00:00Z | 2020 | December | Sunday | &#39;Members for 1 month+&#39; | 7 | Covid | . 9542020-12-20T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9552020-12-21T00:00:00Z | 2020 | December | Monday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9562020-12-22T00:00:00Z | 2020 | December | Tuesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9572020-12-22T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9582020-12-23T00:00:00Z | 2020 | December | Wednesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9592020-12-24T00:00:00Z | 2020 | December | Thursday | &#39;Members for 1 month+&#39; | 0 | Covid | . 9602020-12-25T00:00:00Z | 2020 | December | Friday | &#39;Members for 1 month+&#39; | 7 | Covid | . 9612020-12-25T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9622020-12-26T00:00:00Z | 2020 | December | Saturday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9632020-12-26T00:00:00Z | 2020 | December | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9642020-12-27T00:00:00Z | 2020 | December | Sunday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9652020-12-28T00:00:00Z | 2020 | December | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9662020-12-29T00:00:00Z | 2020 | December | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9672020-12-29T00:00:00Z | 2020 | December | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9682020-12-30T00:00:00Z | 2020 | December | Wednesday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9692020-12-31T00:00:00Z | 2020 | December | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . A data.frame: 366 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2792020-01-01T00:00:00Z | 2020 | January | Wednesday | 106 | 25.471698 | 27 | Covid | . 2802020-01-02T00:00:00Z | 2020 | January | Thursday | 105 | 22.857143 | 24 | Covid | . 2812020-01-03T00:00:00Z | 2020 | January | Friday | 104 | 25.000000 | 26 | Covid | . 2822020-01-04T00:00:00Z | 2020 | January | Saturday | 103 | 26.213592 | 27 | Covid | . 2832020-01-05T00:00:00Z | 2020 | January | Sunday | 93 | 23.655914 | 22 | Covid | . 2842020-01-06T00:00:00Z | 2020 | January | Monday | 102 | 17.647059 | 18 | Covid | . 2852020-01-07T00:00:00Z | 2020 | January | Tuesday | 101 | 26.732673 | 27 | Covid | . 2862020-01-08T00:00:00Z | 2020 | January | Wednesday | 109 | 26.605505 | 29 | Covid | . 2872020-01-09T00:00:00Z | 2020 | January | Thursday | 110 | 24.545455 | 27 | Covid | . 2882020-01-10T00:00:00Z | 2020 | January | Friday | 101 | 19.801980 | 20 | Covid | . 2892020-01-11T00:00:00Z | 2020 | January | Saturday | 96 | 27.083333 | 26 | Covid | . 2902020-01-12T00:00:00Z | 2020 | January | Sunday | 121 | 27.272727 | 33 | Covid | . 2912020-01-13T00:00:00Z | 2020 | January | Monday | 114 | 22.807018 | 26 | Covid | . 2922020-01-14T00:00:00Z | 2020 | January | Tuesday | 112 | 29.464286 | 33 | Covid | . 2932020-01-15T00:00:00Z | 2020 | January | Wednesday | 117 | 29.059829 | 34 | Covid | . 2942020-01-16T00:00:00Z | 2020 | January | Thursday | 134 | 35.820896 | 48 | Covid | . 2952020-01-17T00:00:00Z | 2020 | January | Friday | 124 | 28.225806 | 35 | Covid | . 2962020-01-18T00:00:00Z | 2020 | January | Saturday | 392 | 7.142857 | 28 | Covid | . 2972020-01-19T00:00:00Z | 2020 | January | Sunday | 391 | 5.882353 | 23 | Covid | . 2982020-01-20T00:00:00Z | 2020 | January | Monday | 171 | 21.052632 | 36 | Covid | . 2992020-01-21T00:00:00Z | 2020 | January | Tuesday | 433 | 8.775982 | 38 | Covid | . 3002020-01-22T00:00:00Z | 2020 | January | Wednesday | 242 | 18.595041 | 45 | Covid | . 3012020-01-23T00:00:00Z | 2020 | January | Thursday | 192 | 29.166667 | 56 | Covid | . 3022020-01-24T00:00:00Z | 2020 | January | Friday | 248 | 20.564516 | 51 | Covid | . 3032020-01-25T00:00:00Z | 2020 | January | Saturday | 410 | 14.390244 | 59 | Covid | . 3042020-01-26T00:00:00Z | 2020 | January | Sunday | 191 | 14.659686 | 28 | Covid | . 3052020-01-27T00:00:00Z | 2020 | January | Monday | 154 | 25.324675 | 39 | Covid | . 3062020-01-28T00:00:00Z | 2020 | January | Tuesday | 166 | 25.903614 | 43 | Covid | . 3072020-01-29T00:00:00Z | 2020 | January | Wednesday | 505 | 12.871287 | 65 | Covid | . 3082020-01-30T00:00:00Z | 2020 | January | Thursday | 444 | 10.360360 | 46 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 6152020-12-02T00:00:00Z | 2020 | December | Wednesday | 159 | 16.981132 | 27 | Covid | . 6162020-12-03T00:00:00Z | 2020 | December | Thursday | 266 | 14.285714 | 38 | Covid | . 6172020-12-04T00:00:00Z | 2020 | December | Friday | 193 | 21.761658 | 42 | Covid | . 6182020-12-05T00:00:00Z | 2020 | December | Saturday | 157 | 26.114650 | 41 | Covid | . 6192020-12-06T00:00:00Z | 2020 | December | Sunday | 151 | 18.543046 | 28 | Covid | . 6202020-12-07T00:00:00Z | 2020 | December | Monday | 150 | 18.000000 | 27 | Covid | . 6212020-12-08T00:00:00Z | 2020 | December | Tuesday | 546 | 5.677656 | 31 | Covid | . 6222020-12-09T00:00:00Z | 2020 | December | Wednesday | 157 | 15.286624 | 24 | Covid | . 6232020-12-10T00:00:00Z | 2020 | December | Thursday | 135 | 22.962963 | 31 | Covid | . 6242020-12-11T00:00:00Z | 2020 | December | Friday | 167 | 17.964072 | 30 | Covid | . 6252020-12-12T00:00:00Z | 2020 | December | Saturday | 250 | 11.200000 | 28 | Covid | . 6262020-12-13T00:00:00Z | 2020 | December | Sunday | 137 | 16.788321 | 23 | Covid | . 6272020-12-14T00:00:00Z | 2020 | December | Monday | 120 | 23.333333 | 28 | Covid | . 6282020-12-15T00:00:00Z | 2020 | December | Tuesday | 126 | 24.603175 | 31 | Covid | . 6292020-12-16T00:00:00Z | 2020 | December | Wednesday | 242 | 17.768595 | 43 | Covid | . 6302020-12-17T00:00:00Z | 2020 | December | Thursday | 168 | 22.619048 | 38 | Covid | . 6312020-12-18T00:00:00Z | 2020 | December | Friday | 138 | 13.043478 | 18 | Covid | . 6322020-12-19T00:00:00Z | 2020 | December | Saturday | 263 | 9.125475 | 24 | Covid | . 6332020-12-20T00:00:00Z | 2020 | December | Sunday | 258 | 9.689922 | 25 | Covid | . 6342020-12-21T00:00:00Z | 2020 | December | Monday | 130 | 13.076923 | 17 | Covid | . 6352020-12-22T00:00:00Z | 2020 | December | Tuesday | 136 | 13.235294 | 18 | Covid | . 6362020-12-23T00:00:00Z | 2020 | December | Wednesday | 120 | 16.666667 | 20 | Covid | . 6372020-12-24T00:00:00Z | 2020 | December | Thursday | 107 | 26.168224 | 28 | Covid | . 6382020-12-25T00:00:00Z | 2020 | December | Friday | 550 | 3.818182 | 21 | Covid | . 6392020-12-26T00:00:00Z | 2020 | December | Saturday | 149 | 12.751678 | 19 | Covid | . 6402020-12-27T00:00:00Z | 2020 | December | Sunday | 141 | 14.893617 | 21 | Covid | . 6412020-12-28T00:00:00Z | 2020 | December | Monday | 116 | 22.413793 | 26 | Covid | . 6422020-12-29T00:00:00Z | 2020 | December | Tuesday | 114 | 26.315789 | 30 | Covid | . 6432020-12-30T00:00:00Z | 2020 | December | Wednesday | 125 | 18.400000 | 23 | Covid | . 6442020-12-31T00:00:00Z | 2020 | December | Thursday | 156 | 21.794872 | 34 | Covid | . . 2021 . joins.2021 leaves.2021 comm.2021 agg_joins.2021 = aggregate(joins.2021$new_members, list(joins.2021$month), sum) colnames(agg_joins.2021) &lt;- c(&quot;Months&quot;, &quot;Total New Members&quot;) agg_leaves.2021 = aggregate(leaves.2021$leavers, list(leaves.2021$month), sum) colnames(agg_leaves.2021) &lt;- c(&quot;Months&quot;, &quot;Total Leavers&quot;) agg_comm.2021 = aggregate(comm.2021$total_communicated, list(comm.2021$month), sum) colnames(agg_comm.2021) &lt;- c(&quot;Months&quot;, &quot;Total Communicated&quot;) . A data.frame: 85 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 6452021-01-01T00:00:00Z | 2021 | January | Friday | 5 | 20.00000 | 40.00000 | Covid | . 6462021-01-02T00:00:00Z | 2021 | January | Saturday | 2 | 0.00000 | 100.00000 | Covid | . 6472021-01-03T00:00:00Z | 2021 | January | Sunday | 2 | 0.00000 | 50.00000 | Covid | . 6482021-01-04T00:00:00Z | 2021 | January | Monday | 0 | NA | NA | Covid | . 6492021-01-05T00:00:00Z | 2021 | January | Tuesday | 2 | 0.00000 | 50.00000 | Covid | . 6502021-01-06T00:00:00Z | 2021 | January | Wednesday | 1 | 0.00000 | 100.00000 | Covid | . 6512021-01-07T00:00:00Z | 2021 | January | Thursday | 2 | 50.00000 | 50.00000 | Covid | . 6522021-01-08T00:00:00Z | 2021 | January | Friday | 16 | 31.25000 | 68.75000 | Covid | . 6532021-01-09T00:00:00Z | 2021 | January | Saturday | 3 | 0.00000 | 0.00000 | Covid | . 6542021-01-10T00:00:00Z | 2021 | January | Sunday | 3 | 33.33333 | 66.66667 | Covid | . 6552021-01-11T00:00:00Z | 2021 | January | Monday | 2 | 0.00000 | 50.00000 | Covid | . 6562021-01-12T00:00:00Z | 2021 | January | Tuesday | 2 | 0.00000 | 50.00000 | Covid | . 6572021-01-13T00:00:00Z | 2021 | January | Wednesday | 4 | 0.00000 | 75.00000 | Covid | . 6582021-01-14T00:00:00Z | 2021 | January | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 6592021-01-15T00:00:00Z | 2021 | January | Friday | 5 | 80.00000 | 100.00000 | Covid | . 6602021-01-16T00:00:00Z | 2021 | January | Saturday | 2 | 0.00000 | 50.00000 | Covid | . 6612021-01-17T00:00:00Z | 2021 | January | Sunday | 2 | 0.00000 | 100.00000 | Covid | . 6622021-01-18T00:00:00Z | 2021 | January | Monday | 3 | 66.66667 | 100.00000 | Covid | . 6632021-01-19T00:00:00Z | 2021 | January | Tuesday | 1 | 0.00000 | 0.00000 | Covid | . 6642021-01-20T00:00:00Z | 2021 | January | Wednesday | 2 | 50.00000 | 50.00000 | Covid | . 6652021-01-21T00:00:00Z | 2021 | January | Thursday | 8 | 0.00000 | 25.00000 | Covid | . 6662021-01-22T00:00:00Z | 2021 | January | Friday | 1 | 0.00000 | 100.00000 | Covid | . 6672021-01-23T00:00:00Z | 2021 | January | Saturday | 1 | 0.00000 | 100.00000 | Covid | . 6682021-01-24T00:00:00Z | 2021 | January | Sunday | 4 | 0.00000 | 75.00000 | Covid | . 6692021-01-25T00:00:00Z | 2021 | January | Monday | 14 | 21.42857 | 57.14286 | Covid | . 6702021-01-26T00:00:00Z | 2021 | January | Tuesday | 2 | 0.00000 | 50.00000 | Covid | . 6712021-01-27T00:00:00Z | 2021 | January | Wednesday | 6 | 33.33333 | 83.33333 | Covid | . 6722021-01-28T00:00:00Z | 2021 | January | Thursday | 5 | 0.00000 | 20.00000 | Covid | . 6732021-01-29T00:00:00Z | 2021 | January | Friday | 6 | 16.66667 | 66.66667 | Covid | . 6742021-01-30T00:00:00Z | 2021 | January | Saturday | 2 | 50.00000 | 100.00000 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 7002021-02-25T00:00:00Z | 2021 | February | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 7012021-02-26T00:00:00Z | 2021 | February | Friday | 5 | 40.00000 | 100.00000 | Covid | . 7022021-02-27T00:00:00Z | 2021 | February | Saturday | 8 | 12.50000 | 100.00000 | Covid | . 7032021-02-28T00:00:00Z | 2021 | February | Sunday | 5 | 20.00000 | 100.00000 | Covid | . 7042021-03-01T00:00:00Z | 2021 | March | Monday | 2 | 0.00000 | 50.00000 | Covid | . 7052021-03-02T00:00:00Z | 2021 | March | Tuesday | 6 | 16.66667 | 16.66667 | Covid | . 7062021-03-03T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | Covid | . 7072021-03-04T00:00:00Z | 2021 | March | Thursday | 8 | 0.00000 | 62.50000 | Covid | . 7082021-03-05T00:00:00Z | 2021 | March | Friday | 3 | 33.33333 | 33.33333 | Covid | . 7092021-03-06T00:00:00Z | 2021 | March | Saturday | 3 | 0.00000 | 66.66667 | Covid | . 7102021-03-07T00:00:00Z | 2021 | March | Sunday | 3 | 0.00000 | 33.33333 | Covid | . 7112021-03-08T00:00:00Z | 2021 | March | Monday | 7 | 14.28571 | 42.85714 | Covid | . 7122021-03-09T00:00:00Z | 2021 | March | Tuesday | 7 | 0.00000 | 57.14286 | Covid | . 7132021-03-10T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | Covid | . 7142021-03-11T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 7152021-03-12T00:00:00Z | 2021 | March | Friday | 11 | 18.18182 | 45.45455 | Covid | . 7162021-03-13T00:00:00Z | 2021 | March | Saturday | 4 | 0.00000 | 50.00000 | Covid | . 7172021-03-14T00:00:00Z | 2021 | March | Sunday | 1 | 0.00000 | 0.00000 | Covid | . 7182021-03-15T00:00:00Z | 2021 | March | Monday | 1 | 0.00000 | 0.00000 | Covid | . 7192021-03-16T00:00:00Z | 2021 | March | Tuesday | 6 | 0.00000 | 83.33333 | Covid | . 7202021-03-17T00:00:00Z | 2021 | March | Wednesday | 7 | 0.00000 | 71.42857 | Covid | . 7212021-03-18T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | Covid | . 7222021-03-19T00:00:00Z | 2021 | March | Friday | 5 | 0.00000 | 80.00000 | Covid | . 7232021-03-20T00:00:00Z | 2021 | March | Saturday | 2 | 0.00000 | 0.00000 | Covid | . 7242021-03-21T00:00:00Z | 2021 | March | Sunday | 6 | 33.33333 | 33.33333 | Covid | . 7252021-03-22T00:00:00Z | 2021 | March | Monday | 5 | 20.00000 | 60.00000 | Covid | . 7262021-03-23T00:00:00Z | 2021 | March | Tuesday | 1 | 0.00000 | 0.00000 | Covid | . 7272021-03-24T00:00:00Z | 2021 | March | Wednesday | 4 | 0.00000 | 50.00000 | Covid | . 7282021-03-25T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | Covid | . 7292021-03-26T00:00:00Z | 2021 | March | Friday | 4 | NA | NA | Covid | . A data.frame: 135 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 9702021-01-01T00:00:00Z | 2021 | January | Friday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9712021-01-01T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9722021-01-02T00:00:00Z | 2021 | January | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9732021-01-02T00:00:00Z | 2021 | January | Saturday | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9742021-01-03T00:00:00Z | 2021 | January | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9752021-01-03T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9762021-01-04T00:00:00Z | 2021 | January | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9772021-01-05T00:00:00Z | 2021 | January | Tuesday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9782021-01-06T00:00:00Z | 2021 | January | Wednesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9792021-01-07T00:00:00Z | 2021 | January | Thursday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9802021-01-07T00:00:00Z | 2021 | January | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9812021-01-08T00:00:00Z | 2021 | January | Friday | &#39;Members for 1 month+&#39; | 5 | Covid | . 9822021-01-08T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 9832021-01-09T00:00:00Z | 2021 | January | Saturday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9842021-01-09T00:00:00Z | 2021 | January | Saturday | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 9852021-01-10T00:00:00Z | 2021 | January | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9862021-01-11T00:00:00Z | 2021 | January | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9872021-01-12T00:00:00Z | 2021 | January | Tuesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 9882021-01-13T00:00:00Z | 2021 | January | Wednesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9892021-01-13T00:00:00Z | 2021 | January | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9902021-01-14T00:00:00Z | 2021 | January | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9912021-01-15T00:00:00Z | 2021 | January | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 9922021-01-16T00:00:00Z | 2021 | January | Saturday | &#39;Members for 1 month+&#39; | 4 | Covid | . 9932021-01-17T00:00:00Z | 2021 | January | Sunday | &#39;Members for 1 month+&#39; | 0 | Covid | . 9942021-01-18T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9952021-01-19T00:00:00Z | 2021 | January | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9962021-01-19T00:00:00Z | 2021 | January | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9972021-01-20T00:00:00Z | 2021 | January | Wednesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 9982021-01-20T00:00:00Z | 2021 | January | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 9992021-01-21T00:00:00Z | 2021 | January | Thursday | &#39;Members for 1 month+&#39; | 1 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 10752021-03-09T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10762021-03-09T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10772021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10782021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 10792021-03-11T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10802021-03-12T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10812021-03-12T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 5 | Covid | . 10822021-03-13T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10832021-03-14T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10842021-03-14T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10852021-03-15T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10862021-03-16T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10872021-03-16T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 10882021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 4 | Covid | . 10892021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 10902021-03-18T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10912021-03-19T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 10922021-03-19T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 10932021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for 1 month+&#39; | 5 | Covid | . 10942021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 10952021-03-21T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10962021-03-21T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 10972021-03-22T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 1 | Covid | . 10982021-03-23T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 10992021-03-23T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 11002021-03-24T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 0 | Covid | . 11012021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 11022021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 11032021-03-26T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 3 | Covid | . 11042021-03-26T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . A data.frame: 85 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 6452021-01-01T00:00:00Z | 2021 | January | Friday | 312 | 9.294872 | 29 | Covid | . 6462021-01-02T00:00:00Z | 2021 | January | Saturday | 174 | 17.241379 | 30 | Covid | . 6472021-01-03T00:00:00Z | 2021 | January | Sunday | 132 | 18.939394 | 25 | Covid | . 6482021-01-04T00:00:00Z | 2021 | January | Monday | 112 | 21.428571 | 24 | Covid | . 6492021-01-05T00:00:00Z | 2021 | January | Tuesday | 144 | 12.500000 | 18 | Covid | . 6502021-01-06T00:00:00Z | 2021 | January | Wednesday | 368 | 7.065217 | 26 | Covid | . 6512021-01-07T00:00:00Z | 2021 | January | Thursday | 315 | 13.015873 | 41 | Covid | . 6522021-01-08T00:00:00Z | 2021 | January | Friday | 274 | 16.788321 | 46 | Covid | . 6532021-01-09T00:00:00Z | 2021 | January | Saturday | 248 | 10.483871 | 26 | Covid | . 6542021-01-10T00:00:00Z | 2021 | January | Sunday | 149 | 18.791946 | 28 | Covid | . 6552021-01-11T00:00:00Z | 2021 | January | Monday | 225 | 16.888889 | 38 | Covid | . 6562021-01-12T00:00:00Z | 2021 | January | Tuesday | 150 | 17.333333 | 26 | Covid | . 6572021-01-13T00:00:00Z | 2021 | January | Wednesday | 152 | 18.421053 | 28 | Covid | . 6582021-01-14T00:00:00Z | 2021 | January | Thursday | 144 | 15.277778 | 22 | Covid | . 6592021-01-15T00:00:00Z | 2021 | January | Friday | 148 | 27.027027 | 40 | Covid | . 6602021-01-16T00:00:00Z | 2021 | January | Saturday | 123 | 19.512195 | 24 | Covid | . 6612021-01-17T00:00:00Z | 2021 | January | Sunday | 129 | 13.178295 | 17 | Covid | . 6622021-01-18T00:00:00Z | 2021 | January | Monday | 136 | 23.529412 | 32 | Covid | . 6632021-01-19T00:00:00Z | 2021 | January | Tuesday | 133 | 20.300752 | 27 | Covid | . 6642021-01-20T00:00:00Z | 2021 | January | Wednesday | 136 | 19.852941 | 27 | Covid | . 6652021-01-21T00:00:00Z | 2021 | January | Thursday | 127 | 23.622047 | 30 | Covid | . 6662021-01-22T00:00:00Z | 2021 | January | Friday | 192 | 19.270833 | 37 | Covid | . 6672021-01-23T00:00:00Z | 2021 | January | Saturday | 139 | 19.424460 | 27 | Covid | . 6682021-01-24T00:00:00Z | 2021 | January | Sunday | 153 | 15.686275 | 24 | Covid | . 6692021-01-25T00:00:00Z | 2021 | January | Monday | 276 | 15.217391 | 42 | Covid | . 6702021-01-26T00:00:00Z | 2021 | January | Tuesday | 184 | 19.021739 | 35 | Covid | . 6712021-01-27T00:00:00Z | 2021 | January | Wednesday | 182 | 24.725275 | 45 | Covid | . 6722021-01-28T00:00:00Z | 2021 | January | Thursday | 605 | 6.280992 | 38 | Covid | . 6732021-01-29T00:00:00Z | 2021 | January | Friday | 261 | 13.409962 | 35 | Covid | . 6742021-01-30T00:00:00Z | 2021 | January | Saturday | 201 | 20.398010 | 41 | Covid | . ⋮⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 7002021-02-25T00:00:00Z | 2021 | February | Thursday | 172 | 23.255814 | 40 | Covid | . 7012021-02-26T00:00:00Z | 2021 | February | Friday | 167 | 19.161677 | 32 | Covid | . 7022021-02-27T00:00:00Z | 2021 | February | Saturday | 208 | 20.673077 | 43 | Covid | . 7032021-02-28T00:00:00Z | 2021 | February | Sunday | 167 | 17.964072 | 30 | Covid | . 7042021-03-01T00:00:00Z | 2021 | March | Monday | 164 | 18.292683 | 30 | Covid | . 7052021-03-02T00:00:00Z | 2021 | March | Tuesday | 199 | 15.075377 | 30 | Covid | . 7062021-03-03T00:00:00Z | 2021 | March | Wednesday | 163 | 18.404908 | 30 | Covid | . 7072021-03-04T00:00:00Z | 2021 | March | Thursday | 163 | 20.858896 | 34 | Covid | . 7082021-03-05T00:00:00Z | 2021 | March | Friday | 179 | 17.318436 | 31 | Covid | . 7092021-03-06T00:00:00Z | 2021 | March | Saturday | 304 | 9.539474 | 29 | Covid | . 7102021-03-07T00:00:00Z | 2021 | March | Sunday | 162 | 15.432099 | 25 | Covid | . 7112021-03-08T00:00:00Z | 2021 | March | Monday | 234 | 13.675214 | 32 | Covid | . 7122021-03-09T00:00:00Z | 2021 | March | Tuesday | 160 | 23.125000 | 37 | Covid | . 7132021-03-10T00:00:00Z | 2021 | March | Wednesday | 156 | 20.512821 | 32 | Covid | . 7142021-03-11T00:00:00Z | 2021 | March | Thursday | 553 | 7.233273 | 40 | Covid | . 7152021-03-12T00:00:00Z | 2021 | March | Friday | 253 | 14.624506 | 37 | Covid | . 7162021-03-13T00:00:00Z | 2021 | March | Saturday | 237 | 14.345992 | 34 | Covid | . 7172021-03-14T00:00:00Z | 2021 | March | Sunday | 147 | 20.408163 | 30 | Covid | . 7182021-03-15T00:00:00Z | 2021 | March | Monday | 154 | 18.831169 | 29 | Covid | . 7192021-03-16T00:00:00Z | 2021 | March | Tuesday | 154 | 21.428571 | 33 | Covid | . 7202021-03-17T00:00:00Z | 2021 | March | Wednesday | 141 | 21.985816 | 31 | Covid | . 7212021-03-18T00:00:00Z | 2021 | March | Thursday | 153 | 20.261438 | 31 | Covid | . 7222021-03-19T00:00:00Z | 2021 | March | Friday | 268 | 19.402985 | 52 | Covid | . 7232021-03-20T00:00:00Z | 2021 | March | Saturday | 658 | 6.382979 | 42 | Covid | . 7242021-03-21T00:00:00Z | 2021 | March | Sunday | 170 | 23.529412 | 40 | Covid | . 7252021-03-22T00:00:00Z | 2021 | March | Monday | 174 | 22.413793 | 39 | Covid | . 7262021-03-23T00:00:00Z | 2021 | March | Tuesday | 143 | 16.783217 | 24 | Covid | . 7272021-03-24T00:00:00Z | 2021 | March | Wednesday | 157 | 17.197452 | 27 | Covid | . 7282021-03-25T00:00:00Z | 2021 | March | Thursday | 165 | 25.454545 | 42 | Covid | . 7292021-03-26T00:00:00Z | 2021 | March | Friday | 573 | 6.108202 | 35 | Covid | . . Testing aggregations . This section includes my initial tests for data aggregation. In the next section I learned a easier to read method to aggregate multiple variables. . communicators median_comm = aggregate(communicators$visitors, list(communicators$month), sum) median_comm[order(median_comm$x),] . A data.frame: 729 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 206 | 25.72816 | 53 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 184 | 20.65217 | 38 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 185 | 24.32432 | 45 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 328 | 22.86585 | 75 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 143 | 33.56643 | 48 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 271 | 16.60517 | 45 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 381 | 13.38583 | 51 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 190 | 24.73684 | 47 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 163 | 26.99387 | 44 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 159 | 31.44654 | 50 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 163 | 25.76687 | 42 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 148 | 31.08108 | 46 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 163 | 30.67485 | 50 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 139 | 38.12950 | 53 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 155 | 29.67742 | 46 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 143 | 30.06993 | 43 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 140 | 28.57143 | 40 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 170 | 29.41176 | 50 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 150 | 40.66667 | 61 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 153 | 34.64052 | 53 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 167 | 43.71257 | 73 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 162 | 33.95062 | 55 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 337 | 15.13353 | 51 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 172 | 25.00000 | 43 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 162 | 24.07407 | 39 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 163 | 35.58282 | 58 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 340 | 15.29412 | 52 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 196 | 26.53061 | 52 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 371 | 16.98113 | 63 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 201 | 27.86070 | 56 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 172 | 23.255814 | 40 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 167 | 19.161677 | 32 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 208 | 20.673077 | 43 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 167 | 17.964072 | 30 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 164 | 18.292683 | 30 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 199 | 15.075377 | 30 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 163 | 18.404908 | 30 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 163 | 20.858896 | 34 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 179 | 17.318436 | 31 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 304 | 9.539474 | 29 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 162 | 15.432099 | 25 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 234 | 13.675214 | 32 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 160 | 23.125000 | 37 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 156 | 20.512821 | 32 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 553 | 7.233273 | 40 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 253 | 14.624506 | 37 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 237 | 14.345992 | 34 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 147 | 20.408163 | 30 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 154 | 18.831169 | 29 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 154 | 21.428571 | 33 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 141 | 21.985816 | 31 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 153 | 20.261438 | 31 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 268 | 19.402985 | 52 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 658 | 6.382979 | 42 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 170 | 23.529412 | 40 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 174 | 22.413793 | 39 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 143 | 16.783217 | 24 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 157 | 17.197452 | 27 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 165 | 25.454545 | 42 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 573 | 6.108202 | 35 | Covid | . A data.frame: 12 × 2 Group.1x . &lt;fct&gt;&lt;int&gt; . 6June | 10342 | . 5May | 10814 | . 4April | 11595 | . 12December | 11671 | . 1January | 12220 | . 7July | 12230 | . 2February | 12236 | . 3March | 12848 | . 8August | 15664 | . 11November | 16734 | . 10October | 17617 | . 9September | 22230 | . . Aggregating by category . As mentioned in the subsetting by year section, upon reading some examples for aggregating in R, I found that there was a method to aggregate by multiple columns. The following article &quot;Aggregate in R&quot; was particularly helpful as it had sample code with useful outputs. The second option of using R linear model notation is a bit more intuitive than the first suggestion. . aggregate(df_2$weight, by = list(df_2$feed, df_2$cat_var), FUN = sum) # Equivalent to: aggregate(weight ~ feed + cat_var, data = df_2, FUN = sum) . Joins . head(joins) agg_joins = aggregate(new_members ~ month + year, data = joins, FUN = sum) head(agg_joins) . A data.frame: 6 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | Normal | . A data.frame: 6 × 3 monthyearnew_members . &lt;fct&gt;&lt;fct&gt;&lt;int&gt; . 1March | 2019 | 16 | . 2April | 2019 | 69 | . 3May | 2019 | 54 | . 4June | 2019 | 54 | . 5July | 2019 | 37 | . 6August | 2019 | 256 | . Leaves . leaves agg_leaves = aggregate(leavers ~ month + year, data = leaves, FUN = sum) agg_leaves . A data.frame: 1104 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 4 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 3 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 0 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 3 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 5 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 4 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for 1 month+&#39; | 5 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 0 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 3 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . A data.frame: 25 × 3 monthyearleavers . &lt;fct&gt;&lt;fct&gt;&lt;int&gt; . March | 2019 | 6 | . April | 2019 | 75 | . May | 2019 | 54 | . June | 2019 | 45 | . July | 2019 | 47 | . August | 2019 | 66 | . September | 2019 | 90 | . October | 2019 | 60 | . November | 2019 | 118 | . December | 2019 | 43 | . January | 2020 | 66 | . February | 2020 | 82 | . March | 2020 | 73 | . April | 2020 | 95 | . May | 2020 | 72 | . June | 2020 | 82 | . July | 2020 | 90 | . August | 2020 | 127 | . September | 2020 | 132 | . October | 2020 | 100 | . November | 2020 | 91 | . December | 2020 | 83 | . January | 2021 | 93 | . February | 2021 | 88 | . March | 2021 | 78 | . . Experimental 3d agg . I was curious to see what would happen if I were to add another dimension of days_in_guild. I ended up not using it as it would be hard to visualize with a chart. . leaves agg_leaves = aggregate(leavers ~ month + year + days_in_guild, data = leaves, FUN = sum) agg_leaves . A data.frame: 1104 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 4 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 3 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 0 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 3 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 5 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 4 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for 1 month+&#39; | 5 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 0 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 3 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . A data.frame: 50 × 4 monthyeardays_in_guildleavers . &lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt; . &lt;span style=white-space:pre-wrap&gt;March &lt;/span&gt; | 2019 | &#39;Members for &lt; 1 month&#39; | 2 | . &lt;span style=white-space:pre-wrap&gt;April &lt;/span&gt; | 2019 | &#39;Members for &lt; 1 month&#39; | 27 | . &lt;span style=white-space:pre-wrap&gt;May &lt;/span&gt; | 2019 | &#39;Members for &lt; 1 month&#39; | 18 | . &lt;span style=white-space:pre-wrap&gt;June &lt;/span&gt; | 2019 | &#39;Members for &lt; 1 month&#39; | 12 | . &lt;span style=white-space:pre-wrap&gt;July &lt;/span&gt; | 2019 | &#39;Members for &lt; 1 month&#39; | 11 | . &lt;span style=white-space:pre-wrap&gt;August &lt;/span&gt; | 2019 | &#39;Members for &lt; 1 month&#39; | 23 | . September | 2019 | &#39;Members for &lt; 1 month&#39; | 34 | . &lt;span style=white-space:pre-wrap&gt;October &lt;/span&gt; | 2019 | &#39;Members for &lt; 1 month&#39; | 31 | . November | 2019 | &#39;Members for &lt; 1 month&#39; | 65 | . December | 2019 | &#39;Members for &lt; 1 month&#39; | 7 | . &lt;span style=white-space:pre-wrap&gt;January &lt;/span&gt; | 2020 | &#39;Members for &lt; 1 month&#39; | 17 | . February | 2020 | &#39;Members for &lt; 1 month&#39; | 32 | . &lt;span style=white-space:pre-wrap&gt;March &lt;/span&gt; | 2020 | &#39;Members for &lt; 1 month&#39; | 20 | . &lt;span style=white-space:pre-wrap&gt;April &lt;/span&gt; | 2020 | &#39;Members for &lt; 1 month&#39; | 20 | . &lt;span style=white-space:pre-wrap&gt;May &lt;/span&gt; | 2020 | &#39;Members for &lt; 1 month&#39; | 16 | . &lt;span style=white-space:pre-wrap&gt;June &lt;/span&gt; | 2020 | &#39;Members for &lt; 1 month&#39; | 28 | . &lt;span style=white-space:pre-wrap&gt;July &lt;/span&gt; | 2020 | &#39;Members for &lt; 1 month&#39; | 28 | . &lt;span style=white-space:pre-wrap&gt;August &lt;/span&gt; | 2020 | &#39;Members for &lt; 1 month&#39; | 61 | . September | 2020 | &#39;Members for &lt; 1 month&#39; | 68 | . &lt;span style=white-space:pre-wrap&gt;October &lt;/span&gt; | 2020 | &#39;Members for &lt; 1 month&#39; | 42 | . November | 2020 | &#39;Members for &lt; 1 month&#39; | 35 | . December | 2020 | &#39;Members for &lt; 1 month&#39; | 20 | . &lt;span style=white-space:pre-wrap&gt;January &lt;/span&gt; | 2021 | &#39;Members for &lt; 1 month&#39; | 26 | . February | 2021 | &#39;Members for &lt; 1 month&#39; | 40 | . &lt;span style=white-space:pre-wrap&gt;March &lt;/span&gt; | 2021 | &#39;Members for &lt; 1 month&#39; | 32 | . March | 2019 | &#39;Members for 1 month+&#39; | 4 | . April | 2019 | &#39;Members for 1 month+&#39; | 48 | . May | 2019 | &#39;Members for 1 month+&#39; | 36 | . June | 2019 | &#39;Members for 1 month+&#39; | 33 | . July | 2019 | &#39;Members for 1 month+&#39; | 36 | . August | 2019 | &#39;Members for 1 month+&#39; | 43 | . September | 2019 | &#39;Members for 1 month+&#39; | 56 | . October | 2019 | &#39;Members for 1 month+&#39; | 29 | . November | 2019 | &#39;Members for 1 month+&#39; | 53 | . December | 2019 | &#39;Members for 1 month+&#39; | 36 | . January | 2020 | &#39;Members for 1 month+&#39; | 49 | . February | 2020 | &#39;Members for 1 month+&#39; | 50 | . March | 2020 | &#39;Members for 1 month+&#39; | 53 | . April | 2020 | &#39;Members for 1 month+&#39; | 75 | . May | 2020 | &#39;Members for 1 month+&#39; | 56 | . June | 2020 | &#39;Members for 1 month+&#39; | 54 | . July | 2020 | &#39;Members for 1 month+&#39; | 62 | . August | 2020 | &#39;Members for 1 month+&#39; | 66 | . September | 2020 | &#39;Members for 1 month+&#39; | 64 | . October | 2020 | &#39;Members for 1 month+&#39; | 58 | . November | 2020 | &#39;Members for 1 month+&#39; | 56 | . December | 2020 | &#39;Members for 1 month+&#39; | 63 | . January | 2021 | &#39;Members for 1 month+&#39; | 67 | . February | 2021 | &#39;Members for 1 month+&#39; | 48 | . March | 2021 | &#39;Members for 1 month+&#39; | 46 | . . Sources . I tried aggregating the various sources. Our group later realized we could get the same data from another file. So this ended up being unused. . sources agg_sources = aggregate(discovery_joins + invites + vanity_joins ~ month + year, data = sources, FUN = sum) agg_sources . A data.frame: 729 × 8 interval_start_timestampyearmonthdaydiscovery_joinsinvitesvanity_joinsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;int&gt;&lt;int&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 0 | 0 | 3 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | 0 | 7 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | 0 | 8 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 0 | 0 | 11 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 2 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 1 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 3 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 0 | 0 | 4 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 3 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 0 | 0 | 2 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 0 | 0 | 9 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 3 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 1 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 2 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 0 | 0 | 1 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 1 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | 0 | 0 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 0 | 0 | 0 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 7 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 5 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 6 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 0 | 0 | 3 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 2 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 0 | 0 | 1 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 0 | 0 | 1 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 0 | 0 | 3 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 0 | 0 | 3 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 0 | 0 | 3 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 0 | 0 | 4 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 0 | 0 | 3 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 0 | 0 | 1 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 0 | 0 | 6 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 0 | 0 | 9 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 0 | 0 | 5 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 0 | 0 | 3 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 0 | 0 | 6 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 0 | 0 | 5 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 8 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 0 | 0 | 4 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 0 | 0 | 3 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 0 | 0 | 4 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 0 | 0 | 7 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 1 | 0 | 6 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 0 | 0 | 5 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 2 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 0 | 0 | 11 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 1 | 0 | 3 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 0 | 0 | 1 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 0 | 0 | 2 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 1 | 0 | 6 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 1 | 0 | 9 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 1 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 1 | 0 | 4 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 0 | 0 | 2 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 0 | 0 | 7 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 0 | 0 | 6 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 0 | 0 | 1 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 0 | 0 | 5 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 0 | 0 | 2 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 0 | 0 | 4 | Covid | . A data.frame: 25 × 3 monthyeardiscovery_joins + invites + vanity_joins . &lt;fct&gt;&lt;fct&gt;&lt;int&gt; . March | 2019 | 18 | . April | 2019 | 92 | . May | 2019 | 64 | . June | 2019 | 58 | . July | 2019 | 46 | . August | 2019 | 273 | . September | 2019 | 196 | . October | 2019 | 119 | . November | 2019 | 190 | . December | 2019 | 49 | . January | 2020 | 106 | . February | 2020 | 79 | . March | 2020 | 74 | . April | 2020 | 134 | . May | 2020 | 96 | . June | 2020 | 85 | . July | 2020 | 125 | . August | 2020 | 345 | . September | 2020 | 260 | . October | 2020 | 214 | . November | 2020 | 143 | . December | 2020 | 82 | . January | 2021 | 126 | . February | 2021 | 147 | . March | 2021 | 122 | . . Communicators . communicators agg_comms = aggregate(total_communicated ~ month + year, data = communicators, FUN = sum) agg_comms . A data.frame: 729 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 206 | 25.72816 | 53 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 184 | 20.65217 | 38 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 185 | 24.32432 | 45 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 328 | 22.86585 | 75 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 143 | 33.56643 | 48 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 271 | 16.60517 | 45 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 381 | 13.38583 | 51 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 190 | 24.73684 | 47 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 163 | 26.99387 | 44 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 159 | 31.44654 | 50 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 163 | 25.76687 | 42 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 148 | 31.08108 | 46 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 163 | 30.67485 | 50 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 139 | 38.12950 | 53 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 155 | 29.67742 | 46 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 143 | 30.06993 | 43 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 140 | 28.57143 | 40 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 170 | 29.41176 | 50 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 150 | 40.66667 | 61 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 153 | 34.64052 | 53 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 167 | 43.71257 | 73 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 162 | 33.95062 | 55 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 337 | 15.13353 | 51 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 172 | 25.00000 | 43 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 162 | 24.07407 | 39 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 163 | 35.58282 | 58 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 340 | 15.29412 | 52 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 196 | 26.53061 | 52 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 371 | 16.98113 | 63 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 201 | 27.86070 | 56 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 172 | 23.255814 | 40 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 167 | 19.161677 | 32 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 208 | 20.673077 | 43 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 167 | 17.964072 | 30 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 164 | 18.292683 | 30 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 199 | 15.075377 | 30 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 163 | 18.404908 | 30 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 163 | 20.858896 | 34 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 179 | 17.318436 | 31 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 304 | 9.539474 | 29 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 162 | 15.432099 | 25 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 234 | 13.675214 | 32 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 160 | 23.125000 | 37 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 156 | 20.512821 | 32 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 553 | 7.233273 | 40 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 253 | 14.624506 | 37 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 237 | 14.345992 | 34 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 147 | 20.408163 | 30 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 154 | 18.831169 | 29 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 154 | 21.428571 | 33 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 141 | 21.985816 | 31 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 153 | 20.261438 | 31 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 268 | 19.402985 | 52 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 658 | 6.382979 | 42 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 170 | 23.529412 | 40 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 174 | 22.413793 | 39 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 143 | 16.783217 | 24 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 157 | 17.197452 | 27 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 165 | 25.454545 | 42 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 573 | 6.108202 | 35 | Covid | . A data.frame: 25 × 3 monthyeartotal_communicated . &lt;fct&gt;&lt;fct&gt;&lt;dbl&gt; . March | 2019 | 136 | . April | 2019 | 1531 | . May | 2019 | 1238 | . June | 2019 | 1094 | . July | 2019 | 1150 | . August | 2019 | 1760 | . September | 2019 | 2588 | . October | 2019 | 2168 | . November | 2019 | 1861 | . December | 2019 | 1184 | . January | 2020 | 1094 | . February | 2020 | 1232 | . March | 2020 | 1174 | . April | 2020 | 1186 | . May | 2020 | 1077 | . June | 2020 | 1139 | . July | 2020 | 1071 | . August | 2020 | 1859 | . September | 2020 | 2175 | . October | 2020 | 1602 | . November | 2020 | 1165 | . December | 2020 | 864 | . January | 2021 | 968 | . February | 2021 | 948 | . March | 2021 | 876 | . . Visualizations . I realized that using R&#39;s base plots were not going to make the cut. I recall that when I was searching for graphing solutions on a different project, I found an appealing graph solution with ggplots. At the time I was using python, so ggplot wasn&#39;t a library supported. In another class, the professor introduced ggplots. I could have used excel to generate the plots, but I wanted a learning opportunity to try ggplot on something that wasn&#39;t homework or classwork. I knew I needed a stacked bar chart as I needed to compare the changes across the months and years. . After a search on the web, I found the following guide &quot;How to Create and Customize Bar Plot Using ggplot2 Package in R- One Zero Blog&quot; on the towards data science medium to be particularly helpful, as there was sample code with outputs. I used the sample code from section on bar labels on a stack bar plot as a base and made modifications to fit my data. . all joins . To make it easier for me to input the parameters and give me a sanity check for my graphs, I loaded all the aggregate data. . library(ggplot2) head(joins) head(agg_joins.2019) head(agg_joins.2020) head(agg_joins.2021) head(agg_joins) . A data.frame: 6 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 12019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | Normal | . 22019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | Normal | . 32019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | Normal | . 42019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | Normal | . 52019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | Normal | . 62019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | Normal | . A data.frame: 6 × 2 MonthsTotal New Members . &lt;fct&gt;&lt;int&gt; . 1March | 16 | . 2April | 69 | . 3May | 54 | . 4June | 54 | . 5July | 37 | . 6August | 256 | . A data.frame: 6 × 2 MonthsTotal New Members . &lt;fct&gt;&lt;int&gt; . 1January | 86 | . 2February | 61 | . 3March | 63 | . 4April | 123 | . 5May | 84 | . 6June | 74 | . A data.frame: 3 × 2 MonthsTotal New Members . &lt;fct&gt;&lt;int&gt; . 1January | 113 | . 2February | 137 | . 3March | 109 | . A data.frame: 6 × 3 monthyearnew_members . &lt;fct&gt;&lt;fct&gt;&lt;int&gt; . 1March | 2019 | 16 | . 2April | 2019 | 69 | . 3May | 2019 | 54 | . 4June | 2019 | 54 | . 5July | 2019 | 37 | . 6August | 2019 | 256 | . . I started by substituting the sample parameters with my own dataset. I quickly realized that the graph had some issues on the x axis. The month names were overlapping. . all_joins = ggplot(data = agg_joins, mapping = aes(x = month, y = new_members, fill = year)) + xlab(&quot;Month&quot;) + ylab(&quot;Total New Members&quot;) + geom_col()+ geom_text(aes(label=new_members), position = position_stack(vjust= 0.5), colour = &quot;black&quot;, size = 5) all_joins = all_joins + labs(title = &quot;New Member Joins Across the Year&quot;) all_joins . After searching the web, I found a great stack overflow answer How to maintain size of ggplot with long labels that ultimately influenced the final graphs. . all_joins = ggplot(data = agg_joins, mapping = aes(x = month, y = new_members, fill = year)) + xlab(&quot;Month&quot;) + ylab(&quot;Total New Members&quot;) + geom_col()+ geom_text(aes(label=new_members), position = position_stack(vjust= 0.5), colour = &quot;black&quot;, size = 5) + coord_flip() all_joins = all_joins + labs(title = &quot;New Member Joins Across the Year&quot;) all_joins . When I first made the graphs, the order of the x axis was backwards from a normal year. For the presentation I used the version above, but when I came back for the final report and final write up, I decided to search for a solution. I knew previously that coord_flip() was the cause of the initial reversed order. Searching ggplot coord_flip() change order of x axis+change+order+of+x+axis&amp;t=ffab&amp;ia=web) found the answer I was looking for. The following answer from Reversed order after coord_flip in R was had the solution I was looking for. I learned that I could use a limits parameter to change the order, as passing scale_x_discrete() with out any parameters wouldn&#39;t change my graph. . Ultimately this is the final version of the graph. For the report, I scaled the horizontal dimension to be 1920 and had the aspect ratio fixed. . all_joins = ggplot(data = agg_joins, mapping = aes(x = month, y = new_members, fill = year)) + xlab(&quot;Month&quot;) + ylab(&quot;Total New Members&quot;) + geom_col()+ geom_text(aes(label=new_members), position = position_stack(vjust= 0.5), colour = &quot;black&quot;, size = 5) + coord_flip() + scale_x_discrete(limits = rev(levels(agg_joins$month))) all_joins = all_joins + labs(title = &quot;New Member Joins Across the Year&quot;) all_joins . All leaves . I decided to also make a graph for leaves, but it was ultimately scrapped because our analysis was more focused in the new user changes. Perhaps we can return to analyze the leaves . leaves agg_leaves.2019 agg_leaves.2020 agg_leaves.2021 agg_leaves . A data.frame: 1104 × 7 interval_start_timestampyearmonthdaydays_in_guildleaversyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 4 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 3 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | &#39;Members for 1 month+&#39; | 0 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | &#39;Members for 1 month+&#39; | 2 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | &#39;Members for 1 month+&#39; | 1 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Monday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | &#39;Members for 1 month+&#39; | 3 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 5 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 4 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 2 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for 1 month+&#39; | 5 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Sunday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 3 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | &#39;Members for 1 month+&#39; | 1 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | &#39;Members for 1 month+&#39; | 3 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Tuesday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | &#39;Members for 1 month+&#39; | 0 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for 1 month+&#39; | 2 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | &#39;Members for 1 month+&#39; | 3 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | &lt;span style=white-space:pre-wrap&gt;Friday &lt;/span&gt; | &#39;Members for &lt; 1 month&#39; | 1 | Covid | . A data.frame: 10 × 2 MonthsTotal Leavers . &lt;fct&gt;&lt;int&gt; . March | 6 | . April | 75 | . May | 54 | . June | 45 | . July | 47 | . August | 66 | . September | 90 | . October | 60 | . November | 118 | . December | 43 | . A data.frame: 12 × 2 MonthsTotal Leavers . &lt;fct&gt;&lt;int&gt; . January | 66 | . February | 82 | . March | 73 | . April | 95 | . May | 72 | . June | 82 | . July | 90 | . August | 127 | . September | 132 | . October | 100 | . November | 91 | . December | 83 | . A data.frame: 3 × 2 MonthsTotal Leavers . &lt;fct&gt;&lt;int&gt; . January | 93 | . February | 88 | . March | 78 | . A data.frame: 25 × 3 monthyearleavers . &lt;fct&gt;&lt;fct&gt;&lt;int&gt; . March | 2019 | 6 | . April | 2019 | 75 | . May | 2019 | 54 | . June | 2019 | 45 | . July | 2019 | 47 | . August | 2019 | 66 | . September | 2019 | 90 | . October | 2019 | 60 | . November | 2019 | 118 | . December | 2019 | 43 | . January | 2020 | 66 | . February | 2020 | 82 | . March | 2020 | 73 | . April | 2020 | 95 | . May | 2020 | 72 | . June | 2020 | 82 | . July | 2020 | 90 | . August | 2020 | 127 | . September | 2020 | 132 | . October | 2020 | 100 | . November | 2020 | 91 | . December | 2020 | 83 | . January | 2021 | 93 | . February | 2021 | 88 | . March | 2021 | 78 | . . all_leaves = ggplot(data = agg_leaves, mapping = aes(x = month, y = leavers, fill = year)) + xlab(&quot;Month&quot;) + ylab(&quot;Total Leaves&quot;) + geom_col()+ geom_text(aes(label=leavers), position = position_stack(vjust= 0.5), colour = &quot;black&quot;, size = 5) + coord_flip() + scale_x_discrete(limits = rev(levels(agg_leaves$month))) all_leaves = all_leaves + labs(title = &quot;Member Leaves Across the Year&quot;) all_leaves . All communicators . communicators agg_comm.2019 agg_comm.2020 agg_comm.2021 agg_comms . A data.frame: 729 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 206 | 25.72816 | 53 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 184 | 20.65217 | 38 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 185 | 24.32432 | 45 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 328 | 22.86585 | 75 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 143 | 33.56643 | 48 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 271 | 16.60517 | 45 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 381 | 13.38583 | 51 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 190 | 24.73684 | 47 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 163 | 26.99387 | 44 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 159 | 31.44654 | 50 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 163 | 25.76687 | 42 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 148 | 31.08108 | 46 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 163 | 30.67485 | 50 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 139 | 38.12950 | 53 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 155 | 29.67742 | 46 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 143 | 30.06993 | 43 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 140 | 28.57143 | 40 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 170 | 29.41176 | 50 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 150 | 40.66667 | 61 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 153 | 34.64052 | 53 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 167 | 43.71257 | 73 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 162 | 33.95062 | 55 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 337 | 15.13353 | 51 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 172 | 25.00000 | 43 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 162 | 24.07407 | 39 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 163 | 35.58282 | 58 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 340 | 15.29412 | 52 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 196 | 26.53061 | 52 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 371 | 16.98113 | 63 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 201 | 27.86070 | 56 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 172 | 23.255814 | 40 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 167 | 19.161677 | 32 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 208 | 20.673077 | 43 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 167 | 17.964072 | 30 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 164 | 18.292683 | 30 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 199 | 15.075377 | 30 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 163 | 18.404908 | 30 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 163 | 20.858896 | 34 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 179 | 17.318436 | 31 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 304 | 9.539474 | 29 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 162 | 15.432099 | 25 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 234 | 13.675214 | 32 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 160 | 23.125000 | 37 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 156 | 20.512821 | 32 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 553 | 7.233273 | 40 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 253 | 14.624506 | 37 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 237 | 14.345992 | 34 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 147 | 20.408163 | 30 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 154 | 18.831169 | 29 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 154 | 21.428571 | 33 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 141 | 21.985816 | 31 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 153 | 20.261438 | 31 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 268 | 19.402985 | 52 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 658 | 6.382979 | 42 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 170 | 23.529412 | 40 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 174 | 22.413793 | 39 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 143 | 16.783217 | 24 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 157 | 17.197452 | 27 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 165 | 25.454545 | 42 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 573 | 6.108202 | 35 | Covid | . A data.frame: 10 × 2 MonthsTotal Communicated . &lt;fct&gt;&lt;dbl&gt; . March | 136 | . April | 1531 | . May | 1238 | . June | 1094 | . July | 1150 | . August | 1760 | . September | 2588 | . October | 2168 | . November | 1861 | . December | 1184 | . A data.frame: 12 × 2 MonthsTotal Communicated . &lt;fct&gt;&lt;dbl&gt; . January | 1094 | . February | 1232 | . March | 1174 | . April | 1186 | . May | 1077 | . June | 1139 | . July | 1071 | . August | 1859 | . September | 2175 | . October | 1602 | . November | 1165 | . December | 864 | . A data.frame: 3 × 2 MonthsTotal Communicated . &lt;fct&gt;&lt;dbl&gt; . January | 968 | . February | 948 | . March | 876 | . A data.frame: 25 × 3 monthyeartotal_communicated . &lt;fct&gt;&lt;fct&gt;&lt;dbl&gt; . March | 2019 | 136 | . April | 2019 | 1531 | . May | 2019 | 1238 | . June | 2019 | 1094 | . July | 2019 | 1150 | . August | 2019 | 1760 | . September | 2019 | 2588 | . October | 2019 | 2168 | . November | 2019 | 1861 | . December | 2019 | 1184 | . January | 2020 | 1094 | . February | 2020 | 1232 | . March | 2020 | 1174 | . April | 2020 | 1186 | . May | 2020 | 1077 | . June | 2020 | 1139 | . July | 2020 | 1071 | . August | 2020 | 1859 | . September | 2020 | 2175 | . October | 2020 | 1602 | . November | 2020 | 1165 | . December | 2020 | 864 | . January | 2021 | 968 | . February | 2021 | 948 | . March | 2021 | 876 | . . all_comms = ggplot(data = agg_comms, mapping = aes(x = month, y = total_communicated, fill = year)) + xlab(&quot;Month&quot;) + ylab(&quot;Total Members Communicated&quot;) + geom_col()+ geom_text(aes(label=total_communicated), position = position_stack(vjust= 0.5), colour = &quot;black&quot;, size = 5) + coord_flip() + scale_x_discrete(limits = rev(levels(agg_comms$month))) all_comms = all_comms + labs(title = &quot;All Communicating Members&quot;) all_comms . Multiple Models Excluding Effect of Year . This section contains the code for generating linear models for the other variables we were interested in. I followed my professor&#39;s notes for setting up the parameters. For fun I decided to experiment with the messages dataset, as it included an additional variable of messages_per_communicator which gives a bit more granularity in comparing between individuals and aggregates for messages. . New members linear model . joins . A data.frame: 729 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 2 | 100.00000 | 100.00000 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 0.00000 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 2 | 0.00000 | 0.00000 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 2 | 0.00000 | 0.00000 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 9 | 33.33333 | 33.33333 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 3 | 33.33333 | 33.33333 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 1 | 100.00000 | 100.00000 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 1 | 0.00000 | 100.00000 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 1 | 0.00000 | 100.00000 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 1 | 0.00000 | 100.00000 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | NA | NA | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 3 | 66.66667 | 0.00000 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 5 | 0.00000 | 20.00000 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 3 | 100.00000 | 33.33333 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 3 | 0.00000 | 33.33333 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | NA | NA | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 1 | 100.00000 | 100.00000 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 1 | 0.00000 | 0.00000 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 3 | 33.33333 | 0.00000 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 3 | 66.66667 | 66.66667 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 33.33333 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 1 | 100.00000 | 0.00000 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 5 | 40.00000 | 100.00000 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 8 | 12.50000 | 100.00000 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 5 | 20.00000 | 100.00000 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 2 | 0.00000 | 50.00000 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 6 | 16.66667 | 16.66667 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 8 | 0.00000 | 62.50000 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 3 | 33.33333 | 33.33333 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 3 | 0.00000 | 66.66667 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 3 | 0.00000 | 33.33333 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 7 | 14.28571 | 42.85714 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 7 | 0.00000 | 57.14286 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 11 | 18.18182 | 45.45455 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 4 | 0.00000 | 50.00000 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 6 | 0.00000 | 83.33333 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 7 | 0.00000 | 71.42857 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 5 | 0.00000 | 80.00000 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 2 | 0.00000 | 0.00000 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 6 | 33.33333 | 33.33333 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 5 | 20.00000 | 60.00000 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 4 | 0.00000 | 50.00000 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 4 | NA | NA | Covid | . . joins_lm = lm(new_members ~ month + year_type, data = joins) print(summary(joins_lm)) . Call: lm(formula = new_members ~ month + year_type, data = joins) Residuals: Min 1Q Median 3Q Max -8.759 -2.195 -0.612 0.808 85.469 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 1.98132 0.80555 2.460 0.01414 * monthFebruary 0.26401 0.96935 0.272 0.78543 monthMarch -0.01493 0.95690 -0.016 0.98756 monthApril 0.60450 0.98228 0.615 0.53848 monthMay -0.36969 0.97461 -0.379 0.70456 monthJune -0.46217 0.98228 -0.471 0.63814 monthJuly -0.30518 0.97461 -0.313 0.75428 monthAugust 6.54966 0.97461 6.720 3.70e-11 *** monthSeptember 4.28783 0.98228 4.365 1.46e-05 *** monthOctober 2.22708 0.97461 2.285 0.02260 * monthNovember 2.25450 0.98228 2.295 0.02201 * monthDecember -0.78905 0.97461 -0.810 0.41844 year_typeCovid 1.22836 0.44590 2.755 0.00602 ** Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 5.283 on 716 degrees of freedom Multiple R-squared: 0.1475, Adjusted R-squared: 0.1332 F-statistic: 10.32 on 12 and 716 DF, p-value: &lt; 2.2e-16 . Total messages linear model . messages . A data.frame: 729 × 7 interval_start_timestampyearmonthdaymessagesmessages_per_communicatoryear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 334 | 6.301887 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 236 | 6.210526 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 364 | 8.088889 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 404 | 5.386667 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 543 | 11.312500 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 324 | 7.200000 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 556 | 10.901961 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 273 | 5.808511 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 335 | 7.613636 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 1102 | 22.040000 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 188 | 4.476190 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 399 | 8.673913 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 531 | 10.620000 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 689 | 13.000000 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 418 | 9.086957 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 566 | 13.162791 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 481 | 12.025000 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 659 | 13.180000 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 779 | 12.770492 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 596 | 11.245283 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 1143 | 15.657534 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 898 | 16.327273 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 331 | 6.490196 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 473 | 11.000000 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 283 | 7.256410 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 1270 | 21.896552 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 746 | 14.346154 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 287 | 5.519231 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 728 | 11.555556 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 691 | 12.339286 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 138 | 3.450000 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 78 | 2.437500 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 93 | 2.162791 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 46 | 1.533333 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 53 | 1.766667 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 72 | 2.400000 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 122 | 4.066667 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 168 | 4.941176 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 74 | 2.387097 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 43 | 1.482759 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 43 | 1.720000 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 106 | 3.312500 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 114 | 3.081081 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 83 | 2.593750 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 109 | 2.725000 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 75 | 2.027027 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 158 | 4.647059 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 73 | 2.433333 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 73 | 2.517241 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 52 | 1.575758 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 64 | 2.064516 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 65 | 2.096774 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 182 | 3.500000 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 121 | 2.880952 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 157 | 3.925000 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 94 | 2.410256 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 34 | 1.416667 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 51 | 1.888889 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 120 | 2.857143 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 122 | 3.485714 | Covid | . . messages_lm = lm(messages ~ month + year_type, data = messages) print(summary(messages_lm)) . Call: lm(formula = messages ~ month + year_type, data = messages) Residuals: Min 1Q Median 3Q Max -533.72 -131.98 -34.98 68.19 2435.80 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 370.7838 37.3808 9.919 &lt; 2e-16 *** monthFebruary 0.7405 44.9820 0.016 0.98687 monthMarch 19.0476 44.4043 0.429 0.66808 monthApril 153.6371 45.5819 3.371 0.00079 *** monthMay 24.6162 45.2261 0.544 0.58641 monthJune -73.9795 45.5819 -1.623 0.10503 monthJuly -42.4322 45.2261 -0.938 0.34845 monthAugust 210.2452 45.2261 4.649 3.98e-06 *** monthSeptember 433.9371 45.5819 9.520 &lt; 2e-16 *** monthOctober 261.9549 45.2261 5.792 1.04e-08 *** monthNovember 109.9371 45.5819 2.412 0.01612 * monthDecember -79.8354 45.2261 -1.765 0.07795 . year_typeCovid -193.5419 20.6915 -9.354 &lt; 2e-16 *** Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 245.1 on 716 degrees of freedom Multiple R-squared: 0.369, Adjusted R-squared: 0.3584 F-statistic: 34.89 on 12 and 716 DF, p-value: &lt; 2.2e-16 . Messages experiments . Including messages_per_communicator in full model . messages . A data.frame: 729 × 7 interval_start_timestampyearmonthdaymessagesmessages_per_communicatoryear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 334 | 6.301887 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 236 | 6.210526 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 364 | 8.088889 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 404 | 5.386667 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 543 | 11.312500 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 324 | 7.200000 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 556 | 10.901961 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 273 | 5.808511 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 335 | 7.613636 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 1102 | 22.040000 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 188 | 4.476190 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 399 | 8.673913 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 531 | 10.620000 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 689 | 13.000000 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 418 | 9.086957 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 566 | 13.162791 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 481 | 12.025000 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 659 | 13.180000 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 779 | 12.770492 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 596 | 11.245283 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 1143 | 15.657534 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 898 | 16.327273 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 331 | 6.490196 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 473 | 11.000000 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 283 | 7.256410 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 1270 | 21.896552 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 746 | 14.346154 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 287 | 5.519231 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 728 | 11.555556 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 691 | 12.339286 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 138 | 3.450000 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 78 | 2.437500 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 93 | 2.162791 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 46 | 1.533333 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 53 | 1.766667 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 72 | 2.400000 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 122 | 4.066667 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 168 | 4.941176 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 74 | 2.387097 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 43 | 1.482759 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 43 | 1.720000 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 106 | 3.312500 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 114 | 3.081081 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 83 | 2.593750 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 109 | 2.725000 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 75 | 2.027027 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 158 | 4.647059 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 73 | 2.433333 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 73 | 2.517241 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 52 | 1.575758 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 64 | 2.064516 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 65 | 2.096774 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 182 | 3.500000 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 121 | 2.880952 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 157 | 3.925000 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 94 | 2.410256 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 34 | 1.416667 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 51 | 1.888889 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 120 | 2.857143 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 122 | 3.485714 | Covid | . . messages_lm1 = lm(messages ~ month + year_type + messages_per_communicator, data = messages) print(summary(messages_lm1)) . Call: lm(formula = messages ~ month + year_type + messages_per_communicator, data = messages) Residuals: Min 1Q Median 3Q Max -794.57 -58.66 1.20 50.09 1112.68 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -80.219 22.265 -3.603 0.000337 *** monthFebruary 44.936 23.694 1.896 0.058298 . monthMarch 13.590 23.369 0.582 0.561041 monthApril 12.429 24.209 0.513 0.607821 monthMay -37.842 23.845 -1.587 0.112952 monthJune -2.577 24.045 -0.107 0.914678 monthJuly -33.459 23.802 -1.406 0.160241 monthAugust 128.790 23.875 5.394 9.36e-08 *** monthSeptember 311.849 24.154 12.911 &lt; 2e-16 *** monthOctober 187.593 23.863 7.861 1.40e-14 *** monthNovember 101.338 23.989 4.224 2.71e-05 *** monthDecember -12.940 23.851 -0.543 0.587613 year_typeCovid -36.598 11.478 -3.189 0.001492 ** messages_per_communicator 55.895 1.292 43.247 &lt; 2e-16 *** Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 129 on 715 degrees of freedom Multiple R-squared: 0.8255, Adjusted R-squared: 0.8223 F-statistic: 260.2 on 13 and 715 DF, p-value: &lt; 2.2e-16 . Including messages_per_communicator in full model . messages . A data.frame: 729 × 7 interval_start_timestampyearmonthdaymessagesmessages_per_communicatoryear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 334 | 6.301887 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 236 | 6.210526 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 364 | 8.088889 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 404 | 5.386667 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 543 | 11.312500 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 324 | 7.200000 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 556 | 10.901961 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 273 | 5.808511 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 335 | 7.613636 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 1102 | 22.040000 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 188 | 4.476190 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 399 | 8.673913 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 531 | 10.620000 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 689 | 13.000000 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 418 | 9.086957 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 566 | 13.162791 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 481 | 12.025000 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 659 | 13.180000 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 779 | 12.770492 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 596 | 11.245283 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 1143 | 15.657534 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 898 | 16.327273 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 331 | 6.490196 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 473 | 11.000000 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 283 | 7.256410 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 1270 | 21.896552 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 746 | 14.346154 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 287 | 5.519231 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 728 | 11.555556 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 691 | 12.339286 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 138 | 3.450000 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 78 | 2.437500 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 93 | 2.162791 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 46 | 1.533333 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 53 | 1.766667 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 72 | 2.400000 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 122 | 4.066667 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 168 | 4.941176 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 74 | 2.387097 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 43 | 1.482759 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 43 | 1.720000 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 106 | 3.312500 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 114 | 3.081081 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 83 | 2.593750 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 109 | 2.725000 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 75 | 2.027027 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 158 | 4.647059 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 73 | 2.433333 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 73 | 2.517241 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 52 | 1.575758 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 64 | 2.064516 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 65 | 2.096774 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 182 | 3.500000 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 121 | 2.880952 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 157 | 3.925000 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 94 | 2.410256 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 34 | 1.416667 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 51 | 1.888889 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 120 | 2.857143 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 122 | 3.485714 | Covid | . . messages_lm2 = lm(messages_per_communicator ~ month + year_type, data = messages) print(summary(messages_lm2)) . Call: lm(formula = messages_per_communicator ~ month + year_type, data = messages) Residuals: Min 1Q Median 3Q Max -7.5431 -2.2972 -0.7784 1.2309 28.5756 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 8.06881 0.56882 14.185 &lt; 2e-16 *** monthFebruary -0.79070 0.68449 -1.155 0.24841 monthMarch 0.09763 0.67570 0.144 0.88515 monthApril 2.52633 0.69362 3.642 0.00029 *** monthMay 1.11743 0.68821 1.624 0.10489 monthJune -1.27745 0.69362 -1.842 0.06593 . monthJuly -0.16054 0.68821 -0.233 0.81561 monthAugust 1.45731 0.68821 2.118 0.03456 * monthSeptember 2.18426 0.69362 3.149 0.00171 ** monthOctober 1.33040 0.68821 1.933 0.05361 . monthNovember 0.15385 0.69362 0.222 0.82452 monthDecember -1.19681 0.68821 -1.739 0.08246 . year_typeCovid -2.80785 0.31486 -8.918 &lt; 2e-16 *** Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 3.73 on 716 degrees of freedom Multiple R-squared: 0.2164, Adjusted R-squared: 0.2033 F-statistic: 16.48 on 12 and 716 DF, p-value: &lt; 2.2e-16 . Voices linear model . voices . A data.frame: 729 × 6 interval_start_timestampyearmonthdayspeaking_minutesyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 0 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 0 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 0 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 0 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 0 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 0 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 0 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 0 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 0 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 0 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 0 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 0 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 0 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 0 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 1495 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 913 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 1118 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 1354 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 1269 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 1200 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 2031 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 2293 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 1124 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 1398 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 1460 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 1834 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 1523 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 1119 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 1878 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 1429 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 730 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 567 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 1282 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 1234 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 1146 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 2464 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 840 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 428 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 880 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 1598 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 873 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 771 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 1742 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 1038 | Covid | . . voices_lm = lm(speaking_minutes ~ month + year_type, data = voices) print(summary(voices_lm)) . Call: lm(formula = speaking_minutes ~ month + year_type, data = voices) Residuals: Min 1Q Median 3Q Max -928.94 -287.96 -21.33 150.04 2268.59 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 238.42 68.62 3.475 0.000542 *** monthFebruary 53.85 82.57 0.652 0.514493 monthMarch 261.27 81.51 3.205 0.001409 ** monthApril -217.09 83.67 -2.595 0.009665 ** monthMay -269.06 83.02 -3.241 0.001246 ** monthJune -225.25 83.67 -2.692 0.007265 ** monthJuly -265.07 83.02 -3.193 0.001470 ** monthAugust 142.77 83.02 1.720 0.085914 . monthSeptember 474.25 83.67 5.668 2.09e-08 *** monthOctober 463.99 83.02 5.589 3.25e-08 *** monthNovember 256.21 83.67 3.062 0.002280 ** monthDecember -9.41 83.02 -0.113 0.909785 year_typeCovid 216.28 37.98 5.694 1.81e-08 *** Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 450 on 716 degrees of freedom Multiple R-squared: 0.2877, Adjusted R-squared: 0.2757 F-statistic: 24.1 on 12 and 716 DF, p-value: &lt; 2.2e-16 . Communicators linear model . communicators . A data.frame: 729 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 206 | 25.72816 | 53 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 184 | 20.65217 | 38 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 185 | 24.32432 | 45 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 328 | 22.86585 | 75 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 143 | 33.56643 | 48 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 271 | 16.60517 | 45 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 381 | 13.38583 | 51 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 190 | 24.73684 | 47 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 163 | 26.99387 | 44 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 159 | 31.44654 | 50 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 163 | 25.76687 | 42 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 148 | 31.08108 | 46 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 163 | 30.67485 | 50 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 139 | 38.12950 | 53 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 155 | 29.67742 | 46 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 143 | 30.06993 | 43 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 140 | 28.57143 | 40 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 170 | 29.41176 | 50 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 150 | 40.66667 | 61 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 153 | 34.64052 | 53 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 167 | 43.71257 | 73 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 162 | 33.95062 | 55 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 337 | 15.13353 | 51 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 172 | 25.00000 | 43 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 162 | 24.07407 | 39 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 163 | 35.58282 | 58 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 340 | 15.29412 | 52 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 196 | 26.53061 | 52 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 371 | 16.98113 | 63 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 201 | 27.86070 | 56 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 172 | 23.255814 | 40 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 167 | 19.161677 | 32 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 208 | 20.673077 | 43 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 167 | 17.964072 | 30 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 164 | 18.292683 | 30 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 199 | 15.075377 | 30 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 163 | 18.404908 | 30 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 163 | 20.858896 | 34 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 179 | 17.318436 | 31 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 304 | 9.539474 | 29 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 162 | 15.432099 | 25 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 234 | 13.675214 | 32 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 160 | 23.125000 | 37 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 156 | 20.512821 | 32 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 553 | 7.233273 | 40 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 253 | 14.624506 | 37 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 237 | 14.345992 | 34 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 147 | 20.408163 | 30 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 154 | 18.831169 | 29 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 154 | 21.428571 | 33 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 141 | 21.985816 | 31 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 153 | 20.261438 | 31 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 268 | 19.402985 | 52 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 658 | 6.382979 | 42 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 170 | 23.529412 | 40 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 174 | 22.413793 | 39 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 143 | 16.783217 | 24 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 157 | 17.197452 | 27 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 165 | 25.454545 | 42 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 573 | 6.108202 | 35 | Covid | . . communicators_lm = lm(total_communicated ~ month + year_type, data = communicators) print(summary(communicators_lm)) . Call: lm(formula = total_communicated ~ month + year_type, data = communicators) Residuals: Min 1Q Median 3Q Max -39.805 -7.258 -1.258 5.628 77.195 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 42.1266 1.9689 21.396 &lt; 2e-16 *** monthFebruary 4.9875 2.3693 2.105 0.03563 * monthMarch 2.7318 2.3388 1.168 0.24318 monthApril 7.5910 2.4009 3.162 0.00163 ** monthMay -0.3536 2.3821 -0.148 0.88203 monthJune -0.4757 2.4009 -0.198 0.84300 monthJuly -1.8698 2.3821 -0.785 0.43277 monthAugust 20.6786 2.3821 8.681 &lt; 2e-16 *** monthSeptember 41.6910 2.4009 17.365 &lt; 2e-16 *** monthOctober 23.1141 2.3821 9.703 &lt; 2e-16 *** monthNovember 12.7410 2.4009 5.307 1.49e-07 *** monthDecember -4.6601 2.3821 -1.956 0.05082 . year_typeCovid -8.8685 1.0899 -8.137 1.79e-15 *** Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 12.91 on 716 degrees of freedom Multiple R-squared: 0.552, Adjusted R-squared: 0.5445 F-statistic: 73.53 on 12 and 716 DF, p-value: &lt; 2.2e-16 . Testing Year Effect . After our group presented our project, our professor was concerned that there was confounding variables that the anova test had not factored in. Thus for our final report, we generated multiple regression models . New members multiple regression model . joins . A data.frame: 729 × 8 interval_start_timestampyearmonthdaynew_memberspct_communicatedpct_opened_channelsyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 2 | 50.00000 | 50.00000 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 6 | 16.66667 | 33.33333 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 8 | 25.00000 | 37.50000 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 9 | 44.44444 | 33.33333 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 2 | 50.00000 | 100.00000 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | NA | NA | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 2 | 100.00000 | 100.00000 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 0.00000 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 2 | 0.00000 | 0.00000 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 2 | 0.00000 | 0.00000 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 9 | 33.33333 | 33.33333 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 3 | 33.33333 | 33.33333 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 1 | 100.00000 | 100.00000 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 1 | 0.00000 | 100.00000 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 1 | 0.00000 | 100.00000 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 1 | 0.00000 | 100.00000 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | NA | NA | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 3 | 66.66667 | 0.00000 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 5 | 0.00000 | 20.00000 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 3 | 100.00000 | 33.33333 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 3 | 0.00000 | 33.33333 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | NA | NA | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 1 | 100.00000 | 100.00000 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 0 | NA | NA | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 1 | 0.00000 | 0.00000 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 3 | 33.33333 | 0.00000 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 3 | 66.66667 | 66.66667 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 3 | 33.33333 | 33.33333 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 1 | 100.00000 | 0.00000 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 5 | 40.00000 | 100.00000 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 8 | 12.50000 | 100.00000 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 5 | 20.00000 | 100.00000 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 2 | 0.00000 | 50.00000 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 6 | 16.66667 | 16.66667 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 8 | 0.00000 | 62.50000 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 3 | 33.33333 | 33.33333 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 3 | 0.00000 | 66.66667 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 3 | 0.00000 | 33.33333 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 7 | 14.28571 | 42.85714 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 7 | 0.00000 | 57.14286 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 5 | 0.00000 | 40.00000 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 100.00000 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 11 | 18.18182 | 45.45455 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 4 | 0.00000 | 50.00000 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 6 | 0.00000 | 83.33333 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 7 | 0.00000 | 71.42857 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 5 | 0.00000 | 80.00000 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 2 | 0.00000 | 0.00000 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 6 | 33.33333 | 33.33333 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 5 | 20.00000 | 60.00000 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 4 | 0.00000 | 50.00000 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 1 | 0.00000 | 0.00000 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 4 | NA | NA | Covid | . . joins_lm = lm(new_members ~ month + year + year_type, data = joins) print(summary(joins_lm)) . Call: lm(formula = new_members ~ month + year + year_type, data = joins) Residuals: Min 1Q Median 3Q Max -8.751 -2.100 -0.594 0.789 85.461 Coefficients: (1 not defined because of singularities) Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 1.10756 0.89191 1.242 0.214722 monthFebruary 0.27963 0.96663 0.289 0.772452 monthMarch 0.10295 0.95562 0.108 0.914240 monthApril 1.48651 1.05476 1.409 0.159174 monthMay 0.51231 1.04767 0.489 0.624990 monthJune 0.41984 1.05476 0.398 0.690719 monthJuly 0.57683 1.04767 0.551 0.582092 monthAugust 7.43167 1.04767 7.094 3.15e-12 *** monthSeptember 5.16984 1.05476 4.901 1.18e-06 *** monthOctober 3.10909 1.04767 2.968 0.003101 ** monthNovember 3.13651 1.05476 2.974 0.003042 ** monthDecember 0.09296 1.04767 0.089 0.929323 year2020 1.21187 0.44469 2.725 0.006584 ** year2021 2.99237 0.90010 3.324 0.000931 *** year_typeCovid NA NA NA NA Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 5.268 on 715 degrees of freedom Multiple R-squared: 0.1535, Adjusted R-squared: 0.1381 F-statistic: 9.971 on 13 and 715 DF, p-value: &lt; 2.2e-16 . Total messages multiple regression model . messages . A data.frame: 729 × 7 interval_start_timestampyearmonthdaymessagesmessages_per_communicatoryear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 334 | 6.301887 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 236 | 6.210526 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 364 | 8.088889 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 404 | 5.386667 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 543 | 11.312500 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 324 | 7.200000 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 556 | 10.901961 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 273 | 5.808511 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 335 | 7.613636 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 1102 | 22.040000 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 188 | 4.476190 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 399 | 8.673913 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 531 | 10.620000 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 689 | 13.000000 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 418 | 9.086957 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 566 | 13.162791 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 481 | 12.025000 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 659 | 13.180000 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 779 | 12.770492 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 596 | 11.245283 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 1143 | 15.657534 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 898 | 16.327273 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 331 | 6.490196 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 473 | 11.000000 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 283 | 7.256410 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 1270 | 21.896552 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 746 | 14.346154 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 287 | 5.519231 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 728 | 11.555556 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 691 | 12.339286 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 138 | 3.450000 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 78 | 2.437500 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 93 | 2.162791 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 46 | 1.533333 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 53 | 1.766667 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 72 | 2.400000 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 122 | 4.066667 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 168 | 4.941176 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 74 | 2.387097 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 43 | 1.482759 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 43 | 1.720000 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 106 | 3.312500 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 114 | 3.081081 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 83 | 2.593750 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 109 | 2.725000 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 75 | 2.027027 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 158 | 4.647059 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 73 | 2.433333 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 73 | 2.517241 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 52 | 1.575758 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 64 | 2.064516 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 65 | 2.096774 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 182 | 3.500000 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 121 | 2.880952 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 157 | 3.925000 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 94 | 2.410256 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 34 | 1.416667 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 51 | 1.888889 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 120 | 2.857143 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 122 | 3.485714 | Covid | . . messages_lm = lm(messages ~ month + year + year_type, data = messages) print(summary(messages_lm)) . Call: lm(formula = messages ~ month + year + year_type, data = messages) Residuals: Min 1Q Median 3Q Max -533.05 -127.07 -32.48 66.92 2435.13 Coefficients: (1 not defined because of singularities) Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 441.7623 41.0836 10.753 &lt; 2e-16 *** monthFebruary -0.5282 44.5253 -0.012 0.99054 monthMarch 9.4722 44.0183 0.215 0.82968 monthApril 81.9887 48.5851 1.688 0.09194 . monthMay -47.0322 48.2583 -0.975 0.33009 monthJune -145.6279 48.5851 -2.997 0.00282 ** monthJuly -114.0806 48.2583 -2.364 0.01835 * monthAugust 138.5968 48.2583 2.872 0.00420 ** monthSeptember 362.2887 48.5851 7.457 2.57e-13 *** monthOctober 190.3065 48.2583 3.943 8.82e-05 *** monthNovember 38.2887 48.5851 0.788 0.43091 monthDecember -151.4838 48.2583 -3.139 0.00176 ** year2020 -192.2022 20.4837 -9.383 &lt; 2e-16 *** year2021 -336.8387 41.4610 -8.124 1.98e-15 *** year_typeCovid NA NA NA NA Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 242.6 on 715 degrees of freedom Multiple R-squared: 0.3827, Adjusted R-squared: 0.3714 F-statistic: 34.09 on 13 and 715 DF, p-value: &lt; 2.2e-16 . Voices multiple regression model . voices . A data.frame: 729 × 6 interval_start_timestampyearmonthdayspeaking_minutesyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 0 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 0 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 0 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 0 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 0 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 0 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 0 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 0 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 0 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 0 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 0 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 0 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 0 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 0 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 0 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 0 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 0 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 0 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 0 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 0 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 0 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 1495 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 913 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 1118 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 1354 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 1269 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 1200 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 2031 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 2293 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 1124 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 1398 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 1460 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 1834 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 1523 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 1119 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 1878 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 1429 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 730 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 567 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 1282 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 1234 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 1146 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 2464 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 840 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 428 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 880 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 1598 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 873 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 771 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 1742 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 1038 | Covid | . . voices_lm = lm(speaking_minutes ~ month + year + year_type, data = voices) summary(voices_lm) . Call: lm(formula = speaking_minutes ~ month + year + year_type, data = voices) Residuals: Min 1Q Median 3Q Max -925.30 -193.30 -24.96 135.36 2264.95 Coefficients: (1 not defined because of singularities) Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -146.89 68.66 -2.139 0.0327 * monthFebruary 60.74 74.41 0.816 0.4146 monthMarch 313.25 73.56 4.258 2.33e-05 *** monthApril 171.85 81.19 2.117 0.0346 * monthMay 119.88 80.65 1.487 0.1376 monthJune 163.68 81.19 2.016 0.0442 * monthJuly 123.87 80.65 1.536 0.1250 monthAugust 531.71 80.65 6.593 8.37e-11 *** monthSeptember 863.18 81.19 10.631 &lt; 2e-16 *** monthOctober 852.93 80.65 10.576 &lt; 2e-16 *** monthNovember 645.15 81.19 7.946 7.50e-15 *** monthDecember 379.53 80.65 4.706 3.03e-06 *** year2020 209.00 34.23 6.106 1.68e-09 *** year2021 994.15 69.29 14.348 &lt; 2e-16 *** year_typeCovid NA NA NA NA Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 405.5 on 715 degrees of freedom Multiple R-squared: 0.4224, Adjusted R-squared: 0.4119 F-statistic: 40.22 on 13 and 715 DF, p-value: &lt; 2.2e-16 . Communicators multiple regression model . communicators . A data.frame: 729 × 8 interval_start_timestampyearmonthdayvisitorspct_communicatedtotal_communicatedyear_type . &lt;chr&gt;&lt;fct&gt;&lt;fct&gt;&lt;fct&gt;&lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;fct&gt; . 2019-03-29T00:00:00Z | 2019 | March | Friday | 206 | 25.72816 | 53 | Normal | . 2019-03-30T00:00:00Z | 2019 | March | Saturday | 184 | 20.65217 | 38 | Normal | . 2019-03-31T00:00:00Z | 2019 | March | Sunday | 185 | 24.32432 | 45 | Normal | . 2019-04-01T00:00:00Z | 2019 | April | Monday | 328 | 22.86585 | 75 | Normal | . 2019-04-02T00:00:00Z | 2019 | April | Tuesday | 143 | 33.56643 | 48 | Normal | . 2019-04-03T00:00:00Z | 2019 | April | Wednesday | 271 | 16.60517 | 45 | Normal | . 2019-04-04T00:00:00Z | 2019 | April | Thursday | 381 | 13.38583 | 51 | Normal | . 2019-04-05T00:00:00Z | 2019 | April | Friday | 190 | 24.73684 | 47 | Normal | . 2019-04-06T00:00:00Z | 2019 | April | Saturday | 163 | 26.99387 | 44 | Normal | . 2019-04-07T00:00:00Z | 2019 | April | Sunday | 159 | 31.44654 | 50 | Normal | . 2019-04-08T00:00:00Z | 2019 | April | Monday | 163 | 25.76687 | 42 | Normal | . 2019-04-09T00:00:00Z | 2019 | April | Tuesday | 148 | 31.08108 | 46 | Normal | . 2019-04-10T00:00:00Z | 2019 | April | Wednesday | 163 | 30.67485 | 50 | Normal | . 2019-04-11T00:00:00Z | 2019 | April | Thursday | 139 | 38.12950 | 53 | Normal | . 2019-04-12T00:00:00Z | 2019 | April | Friday | 155 | 29.67742 | 46 | Normal | . 2019-04-13T00:00:00Z | 2019 | April | Saturday | 143 | 30.06993 | 43 | Normal | . 2019-04-14T00:00:00Z | 2019 | April | Sunday | 140 | 28.57143 | 40 | Normal | . 2019-04-15T00:00:00Z | 2019 | April | Monday | 170 | 29.41176 | 50 | Normal | . 2019-04-16T00:00:00Z | 2019 | April | Tuesday | 150 | 40.66667 | 61 | Normal | . 2019-04-17T00:00:00Z | 2019 | April | Wednesday | 153 | 34.64052 | 53 | Normal | . 2019-04-18T00:00:00Z | 2019 | April | Thursday | 167 | 43.71257 | 73 | Normal | . 2019-04-19T00:00:00Z | 2019 | April | Friday | 162 | 33.95062 | 55 | Normal | . 2019-04-20T00:00:00Z | 2019 | April | Saturday | 337 | 15.13353 | 51 | Normal | . 2019-04-21T00:00:00Z | 2019 | April | Sunday | 172 | 25.00000 | 43 | Normal | . 2019-04-22T00:00:00Z | 2019 | April | Monday | 162 | 24.07407 | 39 | Normal | . 2019-04-23T00:00:00Z | 2019 | April | Tuesday | 163 | 35.58282 | 58 | Normal | . 2019-04-24T00:00:00Z | 2019 | April | Wednesday | 340 | 15.29412 | 52 | Normal | . 2019-04-25T00:00:00Z | 2019 | April | Thursday | 196 | 26.53061 | 52 | Normal | . 2019-04-26T00:00:00Z | 2019 | April | Friday | 371 | 16.98113 | 63 | Normal | . 2019-04-27T00:00:00Z | 2019 | April | Saturday | 201 | 27.86070 | 56 | Normal | . ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | ⋮ | . 2021-02-25T00:00:00Z | 2021 | February | Thursday | 172 | 23.255814 | 40 | Covid | . 2021-02-26T00:00:00Z | 2021 | February | Friday | 167 | 19.161677 | 32 | Covid | . 2021-02-27T00:00:00Z | 2021 | February | Saturday | 208 | 20.673077 | 43 | Covid | . 2021-02-28T00:00:00Z | 2021 | February | Sunday | 167 | 17.964072 | 30 | Covid | . 2021-03-01T00:00:00Z | 2021 | March | Monday | 164 | 18.292683 | 30 | Covid | . 2021-03-02T00:00:00Z | 2021 | March | Tuesday | 199 | 15.075377 | 30 | Covid | . 2021-03-03T00:00:00Z | 2021 | March | Wednesday | 163 | 18.404908 | 30 | Covid | . 2021-03-04T00:00:00Z | 2021 | March | Thursday | 163 | 20.858896 | 34 | Covid | . 2021-03-05T00:00:00Z | 2021 | March | Friday | 179 | 17.318436 | 31 | Covid | . 2021-03-06T00:00:00Z | 2021 | March | Saturday | 304 | 9.539474 | 29 | Covid | . 2021-03-07T00:00:00Z | 2021 | March | Sunday | 162 | 15.432099 | 25 | Covid | . 2021-03-08T00:00:00Z | 2021 | March | Monday | 234 | 13.675214 | 32 | Covid | . 2021-03-09T00:00:00Z | 2021 | March | Tuesday | 160 | 23.125000 | 37 | Covid | . 2021-03-10T00:00:00Z | 2021 | March | Wednesday | 156 | 20.512821 | 32 | Covid | . 2021-03-11T00:00:00Z | 2021 | March | Thursday | 553 | 7.233273 | 40 | Covid | . 2021-03-12T00:00:00Z | 2021 | March | Friday | 253 | 14.624506 | 37 | Covid | . 2021-03-13T00:00:00Z | 2021 | March | Saturday | 237 | 14.345992 | 34 | Covid | . 2021-03-14T00:00:00Z | 2021 | March | Sunday | 147 | 20.408163 | 30 | Covid | . 2021-03-15T00:00:00Z | 2021 | March | Monday | 154 | 18.831169 | 29 | Covid | . 2021-03-16T00:00:00Z | 2021 | March | Tuesday | 154 | 21.428571 | 33 | Covid | . 2021-03-17T00:00:00Z | 2021 | March | Wednesday | 141 | 21.985816 | 31 | Covid | . 2021-03-18T00:00:00Z | 2021 | March | Thursday | 153 | 20.261438 | 31 | Covid | . 2021-03-19T00:00:00Z | 2021 | March | Friday | 268 | 19.402985 | 52 | Covid | . 2021-03-20T00:00:00Z | 2021 | March | Saturday | 658 | 6.382979 | 42 | Covid | . 2021-03-21T00:00:00Z | 2021 | March | Sunday | 170 | 23.529412 | 40 | Covid | . 2021-03-22T00:00:00Z | 2021 | March | Monday | 174 | 22.413793 | 39 | Covid | . 2021-03-23T00:00:00Z | 2021 | March | Tuesday | 143 | 16.783217 | 24 | Covid | . 2021-03-24T00:00:00Z | 2021 | March | Wednesday | 157 | 17.197452 | 27 | Covid | . 2021-03-25T00:00:00Z | 2021 | March | Thursday | 165 | 25.454545 | 42 | Covid | . 2021-03-26T00:00:00Z | 2021 | March | Friday | 573 | 6.108202 | 35 | Covid | . . communicators_lm = lm(total_communicated ~ month + year + year_type, data = communicators) summary(communicators_lm) . Call: lm(formula = total_communicated ~ month + year + year_type, data = communicators) Residuals: Min 1Q Median 3Q Max -39.780 -7.398 -1.624 6.070 77.220 Coefficients: (1 not defined because of singularities) Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 44.837 2.175 20.612 &lt; 2e-16 *** monthFebruary 4.939 2.357 2.095 0.03652 * monthMarch 2.366 2.331 1.015 0.31033 monthApril 4.855 2.572 1.887 0.05953 . monthMay -3.090 2.555 -1.209 0.22696 monthJune -3.212 2.572 -1.249 0.21223 monthJuly -4.606 2.555 -1.803 0.07187 . monthAugust 17.942 2.555 7.022 5.09e-12 *** monthSeptember 38.955 2.572 15.143 &lt; 2e-16 *** monthOctober 20.378 2.555 7.975 6.03e-15 *** monthNovember 10.005 2.572 3.889 0.00011 *** monthDecember -7.396 2.555 -2.895 0.00391 ** year2020 -8.817 1.085 -8.130 1.89e-15 *** year2021 -14.341 2.195 -6.533 1.23e-10 *** year_typeCovid NA NA NA NA Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 Residual standard error: 12.85 on 715 degrees of freedom Multiple R-squared: 0.5571, Adjusted R-squared: 0.5491 F-statistic: 69.19 on 13 and 715 DF, p-value: &lt; 2.2e-16 .",
            "url": "https://progressedd.github.io/blog/2021/05/18/Behind-The-Scenes-of-Illini-Esports-Growth-and-Engagement-Analysis.html",
            "relUrl": "/2021/05/18/Behind-The-Scenes-of-Illini-Esports-Growth-and-Engagement-Analysis.html",
            "date": " • May 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Investigating RPiPlay — Apple Airplay on Fedora Linux",
            "content": "Table of Contents . 1&nbsp;&nbsp;Investigating RPiPlay — Apple Airplay on Fedora Linux | 2&nbsp;&nbsp;Steps To Installing RPiPlay2.1&nbsp;&nbsp;Install all dependencies cmake, libraries, and gstreamer | 2.2&nbsp;&nbsp;Download the zip file from github or use git clone to the directory | 2.3&nbsp;&nbsp;Navigate to the directory you want to the app in | 2.4&nbsp;&nbsp;Within directory run following commands2.4.1&nbsp;&nbsp;Make a folder called build | 2.4.2&nbsp;&nbsp;Navigate to build folder | 2.4.3&nbsp;&nbsp;Have cmake prepare the application | 2.4.4&nbsp;&nbsp;Make the application | . | 2.5&nbsp;&nbsp;Bonus, make it possible to run RPiPlay anywhere | 2.6&nbsp;&nbsp;Additional Notes | . | 3&nbsp;&nbsp;Demonstration | 4&nbsp;&nbsp;Why RPiPlay? Doesn&#39;t Zoom Have iPad Screen Sharing? | 5&nbsp;&nbsp;How I Found RPiPlay5.1&nbsp;&nbsp;Initial Searches | 5.2&nbsp;&nbsp;Reddit Solutions | 5.3&nbsp;&nbsp;Open-Airplay, Slave in the Magic Mirror | 5.4&nbsp;&nbsp;Ambystome Gstreamer Plugin | 5.5&nbsp;&nbsp;UxPlay | 5.6&nbsp;&nbsp;RPiPlay | . | . Steps To Installing RPiPlay . The following Fedora instructions are adapted from the github page. For instructions on Ubuntu, please check their page . Install all dependencies cmake, libraries, and gstreamer . sudo dnf install cmake avahi-compat-libdns_sd-devel libplist-devel openssl-devel gstreamer1-plugins-base-devel gstreamer1-libav gstreamer1-vaapi gstreamer1-plugins-bad-free . Download the zip file from github or use git clone to the directory . git clone https://github.com/FD-/RPiPlay.git . Navigate to the directory you want to the app in . Within directory run following commands . Make a folder called build . mkdir build . Navigate to build folder . cd build . Have cmake prepare the application . cmake .. . Make the application . make . Bonus, make it possible to run RPiPlay anywhere . sudo make install . Additional Notes . If you close the window make sure you end it in the task manager/system monitor/terminal, otherwise if you try sharing your screen the window won’t reopen. This is best demonstrated in the demonstration section . Demonstration . . Why RPiPlay? Doesn&#39;t Zoom Have iPad Screen Sharing? . Zoom does indeed have screen casting, however, this requires installing the Zoom application. My preference is to run everything in a browser due to the nature browsers sandboxing everything, and I would not need to add an additional repository for updates. . Furthermore, screen casting is an exclusive Zoom feature, RPiPlay opens the screencast as a window. Since Microsoft Teams, Google Meet, or Open Broadcaster Studio allows for window capture, I have more choices to share my iPad screen . How I Found RPiPlay . Initial Searches . I started by searching for &quot;airplay from ipad to linux&quot;. One of the first results was from Jonathansblog, who suggested using gnome videos (totem) with a totem plugin by phuang. I was able to install totem, but I ran into issues preparing the dependencies other than totem. . Reddit Solutions . After no luck with the totem plugin, I tried a different search &quot;mirror ipad to linux&quot;. The first result was a reddit post on the iPad subreddit. . Open-Airplay, Slave in the Magic Mirror . The top rated response suggested looking into solutions from the open-airplay library github page. Having no luck with the totem plugin, I decided to look into the Slave in the Magic Mirror. I ran into issues preparing the dependencies in particular with the pip packages. After trying solutions to fixing the dependency issues from multiple web searches, I decided cut my losses try another reddit solution. . Ambystome Gstreamer Plugin . The second top rated response was from ambystome, there were multiple responses from people who got it working. A response to the solution had instructions for Ubuntu, there was a follow up response for instructions with Fedora. I had issues with getting the libgstairplay.so working, and with little documentation for Fedora, I kept looking through the suggested solutions . UxPlay . The fourth top rated response suggested using UxPlay. The readme was made for Ubuntu, but browsing the pull requests had a guide for building on Fedora. After following the Fedora instructions, I had finally found my solution. Initially I had written a draft using UxPlay, intending to publish it within a couple days, but I wanted a fix to the two issues I encountered. The first issue is the same bug with RPiPlay, where a closed screen share window would not reopen upon re-pairing. The second issue is that to close UxPlay, you would need to find it in the system monitor and kill it from there. The third issue is that to launch UxPlay, you would need to go to the build directory and open the executable. After looking around for ways to make a shortcut, I couldn&#39;t find a good shortcut solution. Looking at the comments to the UxPlay response and the readme on Github, I realized I could try RPiPlay. . RPiPlay . I decided to try RPiPlay to see if the upstream version had a better shortcut solution. There was an additional command that made it globally installed, allowing me to run and close the application in a terminal partially solving the first issue. Running the application in the terminal solves the second issue. . sudo make install .",
            "url": "https://progressedd.github.io/blog/2020/12/23/Investigating-RPiPlay-Apple-Airplay-on-Fedora-Linux.html",
            "relUrl": "/2020/12/23/Investigating-RPiPlay-Apple-Airplay-on-Fedora-Linux.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "nbdev + GitHub Codespaces: A New Literate Programming Environment",
            "content": "Today, we are going to show you how to set up a literate programming environment, allowing you to use an IDE (VS Code) and an interactive computing environment (Jupyter), without leaving your browser, for free, in under 5 minutes. You’ll even see how VSCode and Jupyter work together automatically! But first, what is literate programming? And how did I go from skeptic to a zealot of literate programming? . Introduction . Literate programming is a programming paradigm introduced by Donald Knuth in which a computer program is given an explanation of its logic in a natural language, such as English, interspersed with snippets of macros and traditional source code, from which compilable source code can be generated. According to Knuth, literate programming provides higher-quality programs by forcing programmers to explicitly state the thoughts behind the program. This process makes poorly thought-out design decisions more obvious. Knuth also claims that literate programming provides a first-rate documentation system, which is not an add-on, but is grown naturally in the process of exposition of one’s thoughts during a program’s creation. 1 . When I first learned about literate programming, I was quite skeptical. For the longest time, I had wrongly equated Jupyter notebooks with literate programming. Indeed, Jupyter is a brilliant interactive computing system, which was awarded the Association of Computing Machinery (ACM) Software System Award, and is loved by many developers. However, Jupyter falls short of the literate programming paradigm for the following reasons:2 . It can be difficult to compile source code from notebooks. | It can be difficult to diff and use version control with notebooks because they are not stored in plain text. | It is not clear how to automatically generate documentation from notebooks. | It is not clear how to properly run tests suites when writing code in notebooks. | . My skepticism quickly evaporated when I began using nbdev, a project that extends notebooks to complete the literate programming ideal. I spent a month, full time, using nbdev while contributing to the python library fastcore, and can report that Donald Knuth was definitely onto something. The process of writing prose and tests alongside code forced me to deeply understand why the code does what it does, and to think deeply about its design. Furthermore, the reduced cognitive load and speed of iteration of having documentation, code, and tests in one location boosted my productivity to levels I have never before experienced as a software developer. Furthermore, I found that developing this way bolstered collaboration such that code reviews not only happened faster but were more meaningful. In short, nbdev may be the most profound productivity tool I have ever used. . As a teaser, look how easy it is to instantiate this literate programming environment, which includes a notebook, a docs site and an IDE with all dependencies pre-installed! :point_down: . . Features of nbdev . As discussed in the docs, nbdev provides the following features: . Searchable, hyperlinked documentation, which can be automatically hosted on GitHub Pages for free. | Python modules, following best practices such as automatically defining __all__ with your exported functions, classes, and variables. | Pip and Conda installers. | Tests defined directly in notebooks which run in parallel. This testing system has been thoroughly tested with GitHub Actions. | Navigate and edit your code in a standard text editor or IDE, and export any changes automatically back into your notebooks. | . Since you are in a notebook, you can also add charts, text, links, images, videos, etc, that are included automatically in the documentation of your library, along with standardized documentation generated automatically from your code. This site is an example of docs generated automatically by nbdev. . GitHub Codespaces . Thanks to Conda and nbdev_template, setting up a development environment with nbdev is far easier than it used to be. However, we realized it could be even easier, thanks to a new GitHub product called Codespaces. Codespaces is a fully functional development environment in your browser, accessible directly from GitHub, that provides the following features: . A full VS Code IDE. | An environment that has files from the repository mounted into the environment, along with your GitHub credentials. | A development environment with dependencies pre-installed, backed by Docker. | The ability to serve additional applications on arbitrary ports. For nbdev, we serve a Jupyter notebook server as well as a Jekyll based documentation site. | A shared file system, which facilitates editing code in one browser tab and rendering the results in another. | … and more. | Codespaces enables developers to immediately participate in a project without wasting time on DevOps or complicated setup steps. Most importantly, CodeSpaces with nbdev allows developers to quickly get started with creating their own software with literate programming. . A demo of nbdev + Codespaces . This demo uses the project fastai/fastcore, which was built with nbdev, as an example. First, we can navigate to this repo and launch a Codespace: . . If you are launching a fresh Codespace, it may take several minutes to set up. Once the environment is ready, we can verify that all dependencies we want are installed (in this case fastcore and nbdev): . . Additionally, we can serve an arbitrary number of applications on user-specified ports, which we can open through VSCode as shown below: . . In this case, these applications are a notebook and docs site. Changes to a notebook are reflected immediately in the data docs. Furthermore, we can use the cli command nbdev_build_lib to sync our notebooks with python modules. This functionality is shown below: . . This is amazing! With a click of a button, I was able to: . Launch an IDE with all dependencies pre-installed. | Launch two additional applications: a Jupyter Notebook server on port 8080 and a docs site on port 4000. | Automatically update the docs and modules every time I make a change to a Jupyter notebook. | This is just the tip of the iceberg. There are additional utilities for writing and executing tests, diffing notebooks, special flags for hiding, showing, and collapsing cells in the generated docs, as well as git hooks for automation. This and more functionality is covered in the nbdev docs. . Give It A Try For Yourself . To try out nbdev yourself, take this tutorial, which will walk you through everything you need to know. The tutorial also shows you how to use a repository template with the configuration files necessary to enable Codespaces with nbdev. . You Can Write Blogs With Notebooks, Too! . This blog post was written in fastpages which is also built on nbdev! We recommend fastpages if you want an easy way to blog with Jupyter notebooks. . Additional Resources . The GitHub Codepaces site. | The official docs for Codespaces. | The nbdev docs. | The nbdev GitHub repo. | fastpages: The project used to write this blog. | The GitHub repo fastai/fastcore, which is what we used in this blog post as an example. | . Wikipedia article: Literate Programming &#8617; . | This is not a criticism of Jupyter. Jupyter doesn’t claim to be a full literate programming system. However, people can sometimes (unfairly) judge Jupyter according to this criteria. &#8617; . |",
            "url": "https://progressedd.github.io/blog/codespaces",
            "relUrl": "/codespaces",
            "date": " • Dec 10, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Explaining Immune Cells and Telomeres",
            "content": "Table of Contents . 1&nbsp;&nbsp;Explaining Immune Cells and Telomeres | 2&nbsp;&nbsp;Introduction | 3&nbsp;&nbsp;Summary of The Paper | 4&nbsp;&nbsp;What Are The Functions of Immune Cells4.1&nbsp;&nbsp;Explanation of Immune Cells4.1.1&nbsp;&nbsp;T lympocytes (T cells and T cytotoxic) | 4.1.2&nbsp;&nbsp;B cells | 4.1.3&nbsp;&nbsp;Natural Killer | . | . | 5&nbsp;&nbsp;Why Telomeres are Important5.1&nbsp;&nbsp;Explanation of Telomeres5.1.1&nbsp;&nbsp;A Very Short Explanation of Telomeres | . | . | . Introduction . While browsing YouTube, I found a video by Jake Tran . on Hyperbaric Oxygen Therapy (HBOT)which explained the findings of the following paper published in Aging. . I noticed that Jake didn&#39;t go super in depth with the immune cells, so I decided to fill the gap with my biology and anatomy knowledge backed by some sources I found. . Summary of The Paper . On a small healthy population of thirty individuals with ages ranging from 60-70 year old, researchers found that hyperbaric oxygen therapy can increase telomere lengths in T helper, T cytotoxic, natural killer and B cells. To quote the results of the paper, . Telomeres length of T helper, T cytotoxic, natural killer and B cells increased significantly by over 20% following HBOT. The most significant change was noticed in B cells which increased at the 30th session, 60th session and post HBOT by 25.68%±40.42 (p=0.007), 29.39%±23.39 (p=0.0001) and 37.63%±52.73 (p=0.007), respectively. . I was originally excited by the results presented by the video and paper, but I vaguely remember being excited for another promising headline about the &quot;anxiety brain&quot; from sci-show. I decided to follow the suggestion to use pubpeer to search the article from this guide. I found the following post on Fight Aging. It has a alternate explanation as to why HBOT do not directly help people become younger. . It seems plausible that the same is true of cellular senescence in immune cells. Cells become senescent when they hit the Hayflick limit on cellular replication. Throughout much of life, the senescence of immune cells is likely more determined by replication pace (and thus immune challenges, the burden of infection) than by aging. And that is before we even get to the point that the authors of this paper used a less than standard measure of senescence, one for which it is possible to argue that it may or may not actually be representative of the burden of senescent cells in immune populations. Overall this data is all interesting, but I suspect that it tells us more about the poor relevance of the metrics chosen to anything other than the deeper aspects of immune function. . What Are The Functions of Immune Cells . Explanation of Immune Cells . I will be summarizing from the following ncbi textbook. For a more detailed explanation, feel free to check the following article. . InformedHealth.org [Internet]. Cologne, Germany:Institute for Quality and Efficiency in Health Care (IQWiG); 2006-. The innate and adaptive immune systems. [Updated 2020 Jul 30]. Available from: https://www.ncbi.nlm.nih.gov/books/NBK279396/ . T lympocytes (T cells and T cytotoxic) . The important properties of these cells is that . T cells detect abnormal or foreign cells | T cells use chemical messengers to start the immune system (T helper cells) | T cytotoxic cells destroy abnormal or foreign cells | B cells . The important properties of these cells is that . B cells are activated by T helper cells | B cells help find other cells that are similar to the abnormal or foreign cells detected by T helper cells | Natural Killer . The important properties of these cells is that . Natural killer cells find cells infected by a virus with surface detection to destroy the cell | Natural killer cells find tumor cells with surface detection to destroy the cell | Why Telomeres are Important . Explanation of Telomeres . I will be pulling a lot of the explanations from the following articles This article from Verywell Health talks about cellular aging. This article from Healthline talks about telomeres. . A Very Short Explanation of Telomeres . For cells to continue functioning properly, cells replicate to replace old cells. In this process DNA is copied and cut. To prevent important portions from being cut, telomeres are added to the end. As cells continue to replicate telomeres will continue to get shorter. .",
            "url": "https://progressedd.github.io/blog/2020/12/02/Explaining-Immune-Cells-and-Telomeres.html",
            "relUrl": "/2020/12/02/Explaining-Immune-Cells-and-Telomeres.html",
            "date": " • Dec 2, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Introducing fastlinkcheck",
            "content": ". Motivation . Recently, fastai has been hard at work improving and overhauling nbdev, a literate programming environment for python. A key feature of nbdev is automated generation of documentation from Jupyter notebooks. This documentation system adds many niceties, such as the following types of hyperlinks automatically: . Links to source code on GitHub. | Links to both internal and external documentation by introspecting variable names in backticks. | . Because documentation is so easy to create and maintain in nbdev, we find ourselves and others creating much more of it! In addition to automatic hyperlinks, we often include our own links to relevant websites, blogs and videos when documenting code. For example, one of the largest nbdev generated sites, docs.fast.ai, has more than 300 external and internal links at the time of this writing. . The Solution . Due to the continued popularity of fastai and the growth of new nbdev projects, grooming these links manually became quite tedious. We investigated solutions that could verify links for us automatically, but were not satisfied with any existing solutions. These are the features we desired: . A platform independent solution that is not tied to a specific static site generator like Jekyll or Hugo. | Intelligent introspection of external links that are actually internal links. For example, if we are building the site docs.fast.ai, a link to https://docs.fast.ai/tutorial should not result in a web request, but rather introspection of the local file system for the presence of tutorial.html in the right location. | Verification of any links to assets like CSS, data, javascript or other files. | Logs that are well organized that allow us to see each broken link or reference to a non-existent path, and the pages these are found in. | Parallelism to verify links as fast as possible. | Lightweight, easy to install with minimal dependencies. | . We tried tools such as linkchecker and pylinkvalidator, but these required your site to be first be hosted. Since we wanted to check links on a static site, hosting is overhead we wanted to avoid. . This is what led us to create fastlinkcheck, which we discuss below. . Note: For Ruby users, htmlproofer apperas to provide overlapping functionality. We have not tried this library. . A tour of fastlinkcheck . For this tour we will be referring to the files in the fastlinkcheck repo. You should clone this repo in the current directory in order to follow along: . git clone https://github.com/fastai/fastlinkcheck.git cd fastlinkcheck . Cloning into &#39;fastlinkcheck&#39;... remote: Enumerating objects: 135, done. remote: Counting objects: 100% (135/135), done. remote: Compressing objects: 100% (98/98), done. remote: Total 608 (delta 69), reused 76 (delta 34), pack-reused 473 Receiving objects: 100% (608/608), 1.12 MiB | 10.47 MiB/s, done. Resolving deltas: 100% (302/302), done. . Installation . You can install fastlinkcheck with pip: . pip install fastlinkcheck . Usage . After installing fastlinkcheck, the cli command link_check is available from the command line. We can see various options with the --help flag. . link_check --help . usage: link_check [-h] [--host HOST] [--config_file CONFIG_FILE] [--pdb] [--xtra XTRA] path Check for broken links recursively in `path`. positional arguments: path Root directory searched recursively for HTML files optional arguments: -h, --help show this help message and exit --host HOST Host and path (without protocol) of web server --config_file CONFIG_FILE Location of file with urls to ignore --pdb Run in pdb debugger (default: False) --xtra XTRA Parse for additional args (default: &#39;&#39;) . From the root of fastlinkcheck repo, We can search the directory _example/broken_links recursively for broken links like this: . link_check _example/broken_links . ERROR: The Following Broken Links or Paths were found: - &#39;http://fastlinkcheck.com/test.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - Path(&#39;/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js&#39;) was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . Specifying the --host parameter allows you detect links that are internal by identifying links with that host name. External links are verified by making a request to the appropriate website. On the other hand, internal links are verified by inspecting the presence and content of local files. . We must be careful when using the --host argument to only pass the host (and path, if necessary) without the protocol. For example, this is how we specify the hostname if your site&#39;s url is http://fastlinkcheck.com/test.html: . link_check _example/broken_links --host fastlinkcheck.com . ERROR: The Following Broken Links or Paths were found: - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - Path(&#39;/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js&#39;) was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . We now have one less broken link as there is indeed a file named test.html in the root of the path we are searching. However, if we add a path to the end of --host , such as fastlinkcheck.com/mysite the link would again be listed as broken because _example/broken_links/mysite/test.html does not exist: . link_check _example/broken_links --host fastlinkcheck.com/mysite . ERROR: The Following Broken Links or Paths were found: - &#39;http://fastlinkcheck.com/test.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` - Path(&#39;/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.js&#39;) was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . You can ignore links by creating a text file that contains a list of urls and paths to ignore. For example, the file _example/broken_links/linkcheck.rc contains: . cat _example/broken_links/linkcheck.rc . test.js https://www.google.com . We can use this file to ignore urls and paths with the --config_file argument. This will filter out references to the broken link /test.js from our earlier results: . link_check _example/broken_links --host fastlinkcheck.com --config_file _example/broken_links/linkcheck.rc . ERROR: The Following Broken Links or Paths were found: - &#39;http://somecdn.com/doesntexist.html&#39; was found in the following pages: - `/Users/hamelsmu/github/fastlinkcheck/_example/broken_links/test.html` . . Finally, if there are no broken links, link_check will not return anything. The directory _example/no_broken_links/ does not contain any HTML files with broken links: . link_check _example/no_broken_links . No broken links found! . Python . You can also use these utilities from python instead of the terminal. Please see these docs for more information. . Using link_check in GitHub Actions . The link_check CLI utility that is installed with fastlinkcheck can be very useful in continuous integration systems like GitHub Actions. Here is an example GitHub Actions workflow that uses link_check: . name: Check Links on: [workflow_dispatch, push] jobs: check-links: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-python@v2 - name: check for broken links run: | pip install fastlinkcheck link_check _example . We can a few more lines of code to open an issue instead when a broken link is found, using the gh cli: . ... - name: check for broken links run: | pip install fastlinkcheck link_check _example 2&gt; err || true export GITHUB_TOKEN=&quot;YOUR_TOKEN&quot; [[ -s err ]] &amp;&amp; gh issue create -t &quot;Broken links found&quot; -b &quot;$(&lt; err)&quot; -R &quot;yourusername/yourrepo&quot; . We can extend this even further to only open an issue when another issue with a specific label isn&#39;t already open: . ... - name: check for broken links run: | pip install fastlinkcheck link_check &quot;docs/_site&quot; --host &quot;docs.fast.ai&quot; 2&gt; err || true export GITHUB_TOKEN=&quot;YOUR_TOKEN&quot; if [[ -z $(gh issue list -l &quot;broken-link&quot;)) &amp;&amp; (-s err) ]]; then gh issue create -t &quot;Broken links found&quot; -b &quot;$(&lt; err)&quot; -l &quot;broken-link&quot; -R &quot;yourusername/yourrepo&quot; fi . See the GitHub Actions docs for more information. . Resources . The following resources are relevant for those interested in learning more about fastlinkcheck: . The fastlinkcheck GitHub repo | The fastlinkcheck docs | .",
            "url": "https://progressedd.github.io/blog/fastlinkcheck/",
            "relUrl": "/fastlinkcheck/",
            "date": " • Nov 17, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "How To Exit Emergency Mode Without Root Password On Linux",
            "content": "Table of Contents . 1&nbsp;&nbsp;How To Exit Emergency Mode Without Root Password On Linux | 2&nbsp;&nbsp;How To Change The Root Password, When Root Password Is Unknown2.1&nbsp;&nbsp;How To Change Kernel Parameters | 2.2&nbsp;&nbsp;How To Reset The Root Password | . | 3&nbsp;&nbsp;passwd root | 4&nbsp;&nbsp;Fixing Emergency Mode Error | 5&nbsp;&nbsp;Explanation Behind All Steps5.1&nbsp;&nbsp;Why We Change Kernel Parameters | 5.2&nbsp;&nbsp;Why We Unmount And Remount The Root Partition To Reset The Root Password | 5.3&nbsp;&nbsp;Why We Use systemctl Instead of journalctl | . | . How To Change The Root Password, When Root Password Is Unknown . How To Change Kernel Parameters . Instructions from Milosz Galazka . In case the Recovery mode menu entry is not available, you need to perform five simple steps in order to modify kernel parameters list. . Turn on computer. | Access GRUB menu. | Edit existing menu entry (use e key). | Add single keyword (alternatively you can use -s or S ) to the Linux kernel parameters list. | Press CTRL-X or F10 while still in edit mode to continue boot process. | How To Reset The Root Password . Instructions from TecMint . Now check the status of root partition by running following command on the single user mode. . # mount | grep root . &gt; &gt; You may notice that root partition is reported to be &#39;ro&#39; (Read Only). We need to have read-write permission on root partition to change the root password. . # mount -o remount,rw / . Also cross check, if the root partition is mounted with read-write permission mode. . # mount | grep root . &gt; Now you can change the root password by typing the passwd command. But that is not done. We need to relabel SELinux context. If we skip relabeling the whole SELinux context we would be able to login using using password. . # passwd root [Enter New Password] [Re-enter New Password] . # touch /.autorelabel &gt; Reboot and login again to root account and see if everything works ok or not? . # exec /sbin/init . Fixing Emergency Mode Error . Instructions from Molesbite Hacks . Type systemctl . You&#39;ll get a list of logs, scroll till you find the error highlighted in red. . Type fsck /dev/mapper/fedora-root . Hit Y (yes) . When I initially ran fsck /dev/mapper/fedora-root, I got a error that wouldn&#39;t allow me to commit the changes . I decided to run systemctl and look for the red error . In my case, the error was in /dev/mapper/fedora-root . I modified the directory to be /dev/mapper/fedora-home, matching the one listed by systemctl . Explanation Behind All Steps . Why We Change Kernel Parameters . We changed the kernel parameters so that we avoid regular boot, as it would be stuck in emergency boot. . Why We Unmount And Remount The Root Partition To Reset The Root Password . As explained in the TecMint article, we unmount and remount (with mount -o remount,rw /) the root partition so that we have read-write access to modify the root&#39;s password. . Why We Use systemctl Instead of journalctl . journalctl shows logs for everything including boots. If you have multiple boots, you may generate multiple logs. Using systemctl focuses on only the system processes, so the list is smaller to scrub through .",
            "url": "https://progressedd.github.io/blog/2020/10/28/How-To-Exit-Emergency-Mode-Without-Root-Password-On-Linux.html",
            "relUrl": "/2020/10/28/How-To-Exit-Emergency-Mode-Without-Root-Password-On-Linux.html",
            "date": " • Oct 28, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Nvidia Acquiring ARM From The Perspective of a Technology Enthusiast and Business Student",
            "content": "Table of Contents . 1&nbsp;&nbsp;Nvidia Acquiring ARM From The Perspective of a Technology Enthusiast and Business Student | 2&nbsp;&nbsp;Introduction2.1&nbsp;&nbsp;Thesis | . | 3&nbsp;&nbsp;How ARM Will Help Nvidia3.1&nbsp;&nbsp;Data Centers Generate a Majority of Sales | 3.2&nbsp;&nbsp;Vertical Integration For Super Computers and Servers | 3.3&nbsp;&nbsp;x86&#39;s Competition | 3.4&nbsp;&nbsp;Alternate Take | . | 4&nbsp;&nbsp;Why ARM Open Source Projects and ARM&#39;s Neutrality Aren’t Doomed4.1&nbsp;&nbsp;Post Acquisition | 4.2&nbsp;&nbsp;Everyone&#39;s Watching Nvidia&#39;s Moves | . | 5&nbsp;&nbsp;Who is Nvidia’s Competitors in Data Center Solutions5.1&nbsp;&nbsp;Is Intel Our Only Hope? | . | 6&nbsp;&nbsp;How Nvidia Can Be Vertically Integrated at All Levels6.1&nbsp;&nbsp;Assumptions | 6.2&nbsp;&nbsp;Hypothetical | . | . Introduction . As reported by the Nvidia blog, ARM is being acquired by Nvidia. There were rumors in july. After reading the official confirmation, I decided to make a blog post so that I could share my thoughts without reposting it about why Nvidia acquired ARM. I do enjoy reading and listening to analysis of the technology industry and businesses. . Thesis . I believe Nvidia purchased of ARM is primarily for data centers. . How ARM Will Help Nvidia . Data Centers Generate a Majority of Sales . Data centers are where technology companies such as Nvidia, AMD, and Intel make the most amount of money (Nvidia on Bloomberg, Intel on VentureBeat, AMD on Reuters). . Vertical Integration For Super Computers and Servers . With ARM CPUs, Mellanox Networking, Nvidia GPUs, Nvidia can make all-in-one servers and supercomputers. The only thing stopping Nvidia from being fully integrated is storage. . x86&#39;s Competition . From a data centers perspective, it really makes sense as to why Nvidia would acquire ARM over a x86. The ARM instruction set is much more efficient than x86 at power consumption. This is particularly important in data centers as power efficiency affects heat and energy costs. See RISC-V and Amazon&#39;s Graviton reduced instruction set cpus developments. . Alternate Take . Aside from data centers, having ARM will allow Nvidia to avoid paying licensing fees for ARM chips in the Mellanox Networking gear and Nvidia’s own mobile Tegra chips. A potential alternative explanation as to why Nvidia chose to partner with ARM is that ARM’s research and development team is very valuable. If Nvidia’s sole goal was to be vertically integrated, they could have acquired a x86 patent earlier. . Why ARM Open Source Projects and ARM&#39;s Neutrality Aren&#8217;t Doomed . Post Acquisition . If the acquisition gets approved by regulators, I don&#39;t think Nvidia will wall off ARM initially. For the next couple of years, Nvidia will focus on getting ARM data center cpus. There will be small developments in mobile phones and laptops, but Nvidia&#39;s focus will be primarily data center cpus. Once Nvidia finishes the data center cpus, it’s possible Nvidia will be anticompetitive with mobile. . Everyone&#39;s Watching Nvidia&#39;s Moves . A lot of eyes are watching Nvidia, and history has shown Nvidia’s acquisitions as well. If Nvidia initiated anticompetitive policies, Nvidia would face the scrutiny of regulators, companies, and developers. If Nvida were questioned by regulators over a monopoly with ARM, Nvidia could cite AMD as a competitor and Intel’s dominance and integration. . Furthermore, the RISC-V architecture is a potential competitor. If Nvidia were to take a long time focusing on ARM data center CPUs, RISC-V could see an influx of adoption and resources if Nvidia infuriates too many of ARM’s license holders. If more companies use RISC-V developers will also follow. . Who is Nvidia&#8217;s Competitors in Data Center Solutions . Is Intel Our Only Hope? . If we were judging by integration, Nvidia’s primary competitor in data centers would be Intel. Despite Intel’s fabrication woes, the company continues producing server CPUS, networking cards, and NVME storage. The only thing that was keeping Intel from being fully vertically integrated was graphics. Nvidia either sees Intel’s data center offerings as a serious competitor or the data center as a market segment they can gain. . How Nvidia Can Be Vertically Integrated at All Levels . Assumptions . This is highly unlikely to, as Intel realizes the value of their storage networking and cpu in datacenter. Furthermore, I would hope that Intel recognizes the threat Nvidia poses to their data center efforts. . Hypothetical . Suppose Intel doesn&#39;t get their cpu process fixed and the company is running out of cash to continue. If Intel is desperate enough, they will sell the storage division. It isn’t the most unlikely event as they sold their mobile modems to Apple a year ago. In this case where intel is desperate, Nvidia can potentially swoop in and acquire the storage. .",
            "url": "https://progressedd.github.io/blog/2020/09/15/Nvidia-ARM-Acqusition.html",
            "relUrl": "/2020/09/15/Nvidia-ARM-Acqusition.html",
            "date": " • Sep 15, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "fastcore: An Underrated Python Library",
            "content": ". Background . I recently embarked on a journey to sharpen my python skills: I wanted to learn advanced patterns, idioms, and techniques. I started with reading books on advanced Python, however, the information didn&#39;t seem to stick without having somewhere to apply it. I also wanted the ability to ask questions from an expert while I was learning -- which is an arrangement that is hard to find! That&#39;s when it occurred to me: What if I could find an open source project that has fairly advanced python code and write documentation and tests? I made a bet that if I did this it would force me to learn everything very deeply, and the maintainers would be appreciative of my work and be willing to answer my questions. . And that&#39;s exactly what I did over the past month! I&#39;m pleased to report that it has been the most efficient learning experience I&#39;ve ever experienced. I&#39;ve discovered that writing documentation forced me to deeply understand not just what the code does but also why the code works the way it does, and to explore edge cases while writing tests. Most importantly, I was able to ask questions when I was stuck, and maintainers were willing to devote extra time knowing that their mentorship was in service of making their code more accessible! It turns out the library I choose, fastcore is some of the most fascinating Python I have ever encountered as its purpose and goals are fairly unique. . For the uninitiated, fastcore is a library on top of which many fast.ai projects are built on. Most importantly, fastcore extends the python programming language and strives to eliminate boilerplate and add useful functionality for common tasks. In this blog post, I&#39;m going to highlight some of my favorite tools that fastcore provides, rather than sharing what I learned about python. My goal is to pique your interest in this library, and hopefully motivate you to check out the documentation after you are done to learn more! . Why fastcore is interesting . Get exposed to ideas from other languages without leaving python: I’ve always heard that it is beneficial to learn other languages in order to become a better programmer. From a pragmatic point of view, I’ve found it difficult to learn other languages because I could never use them at work. Fastcore extends python to include patterns found in languages as diverse as Julia, Ruby and Haskell. Now that I understand these tools I am motivated to learn other languages. | You get a new set of pragmatic tools: fastcore includes utilities that will allow you to write more concise expressive code, and perhaps solve new problems. | Learn more about the Python programming language: Because fastcore extends the python programming language, many advanced concepts are exposed during the process. For the motivated, this is a great way to see how many of the internals of python work. | A whirlwind tour through fastcore . Here are some things you can do with fastcore that immediately caught my attention. . . Making **kwargs transparent . Whenever I see a function that has the argument **kwargs, I cringe a little. This is because it means the API is obfuscated and I have to read the source code to figure out what valid parameters might be. Consider the below example: . def baz(a, b=2, c=3, d=4): return a + b + c def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, **kwargs)&gt; . Without reading the source code, it might be hard for me to know that foo also accepts and additional parameters b and d. We can fix this with delegates: . def baz(a, b=2, c=3, d=4): return a + b + c @delegates(baz) # this decorator will pass down keyword arguments from baz def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4)&gt; . You can customize the behavior of this decorator. For example, you can have your cake and eat it too by passing down your arguments and also keeping **kwargs: . @delegates(baz, keep=True) def foo(c, a, **kwargs): return c + baz(a, **kwargs) inspect.signature(foo) . &lt;Signature (c, a, b=2, d=4, **kwargs)&gt; . You can also exclude arguments. For example, we exclude argument d from delegation: . def basefoo(a, b=2, c=3, d=4): pass @delegates(basefoo, but=[&#39;d&#39;]) # exclude `d` def foo(c, a, **kwargs): pass inspect.signature(foo) . &lt;Signature (c, a, b=2)&gt; . You can also delegate between classes: . class BaseFoo: def __init__(self, e, c=2): pass @delegates()# since no argument was passsed here we delegate to the superclass class Foo(BaseFoo): def __init__(self, a, b=1, **kwargs): super().__init__(**kwargs) inspect.signature(Foo) . &lt;Signature (a, b=1, c=2)&gt; . For more information, read the docs on delegates. . . Avoid boilerplate when setting instance attributes . Have you ever wondered if it was possible to avoid the boilerplate involved with setting attributes in __init__? . class Test: def __init__(self, a, b ,c): self.a, self.b, self.c = a, b, c . Ouch! That was painful. Look at all the repeated variable names. Do I really have to repeat myself like this when defining a class? Not Anymore! Checkout store_attr: . class Test: def __init__(self, a, b, c): store_attr() t = Test(5,4,3) assert t.b == 4 . You can also exclude certain attributes: . class Test: def __init__(self, a, b, c): store_attr(but=[&#39;c&#39;]) t = Test(5,4,3) assert t.b == 4 assert not hasattr(t, &#39;c&#39;) . There are many more ways of customizing and using store_attr than I highlighted here. Check out the docs for more detail. . P.S. you might be thinking that Python dataclasses also allow you to avoid this boilerplate. While true in some cases, store_attr is more flexible.1 . 1. For example, store_attr does not rely on inheritance, which means you won&#39;t get stuck using multiple inheritance when using this with your own classes. Also, unlike dataclasses, store_attr does not require python 3.7 or higher. Furthermore, you can use store_attr anytime in the object lifecycle, and in any location in your class to customize the behavior of how and when variables are stored.↩ . . Avoiding subclassing boilerplate . One thing I hate about python is the __super__().__init__() boilerplate associated with subclassing. For example: . class ParentClass: def __init__(self): self.some_attr = &#39;hello&#39; class ChildClass(ParentClass): def __init__(self): super().__init__() cc = ChildClass() assert cc.some_attr == &#39;hello&#39; # only accessible b/c you used super . We can avoid this boilerplate by using the metaclass PrePostInitMeta. We define a new class called NewParent that is a wrapper around the ParentClass: . class NewParent(ParentClass, metaclass=PrePostInitMeta): def __pre_init__(self, *args, **kwargs): super().__init__() class ChildClass(NewParent): def __init__(self):pass sc = ChildClass() assert sc.some_attr == &#39;hello&#39; . . Type Dispatch . Type dispatch, or Multiple dispatch, allows you to change the way a function behaves based upon the input types it receives. This is a prominent feature in some programming languages like Julia. For example, this is a conceptual example of how multiple dispatch works in Julia, returning different values depending on the input types of x and y: . collide_with(x::Asteroid, y::Asteroid) = ... # deal with asteroid hitting asteroid collide_with(x::Asteroid, y::Spaceship) = ... # deal with asteroid hitting spaceship collide_with(x::Spaceship, y::Asteroid) = ... # deal with spaceship hitting asteroid collide_with(x::Spaceship, y::Spaceship) = ... # deal with spaceship hitting spaceship . Type dispatch can be especially useful in data science, where you might allow different input types (i.e. Numpy arrays and Pandas dataframes) to a function that processes data. Type dispatch allows you to have a common API for functions that do similar tasks. . Unfortunately, Python does not support this out-of-the box. Fortunately, there is the @typedispatch decorator to the rescue. This decorator relies upon type hints in order to route inputs the correct version of the function: . @typedispatch def f(x:str, y:str): return f&#39;{x}{y}&#39; @typedispatch def f(x:np.ndarray): return x.sum() @typedispatch def f(x:int, y:int): return x+y . Below is a demonstration of type dispatch at work for the function f: . f(&#39;Hello &#39;, &#39;World!&#39;) . &#39;Hello World!&#39; . f(2,3) . 5 . f(np.array([5,5,5,5])) . 20 . There are limitations of this feature, as well as other ways of using this functionality that you can read about here. In the process of learning about typed dispatch, I also found a python library called multipledispatch made by Mathhew Rocklin (the creator of Dask). . After using this feature, I am now motivated to learn languages like Julia to discover what other paradigms I might be missing. . . A better version of functools.partial . functools.partial is a great utility that creates functions from other functions that lets you set default values. Lets take this function for example that filters a list to only contain values &gt;= val: . test_input = [1,2,3,4,5,6] def f(arr, val): &quot;Filter a list to remove any values that are less than val.&quot; return [x for x in arr if x &gt;= val] f(test_input, 3) . [3, 4, 5, 6] . You can create a new function out of this function using partial that sets the default value to 5: . filter5 = partial(f, val=5) filter5(test_input) . [5, 6] . One problem with partial is that it removes the original docstring and replaces it with a generic docstring: . filter5.__doc__ . &#39;partial(func, *args, **keywords) - new function with partial application n of the given arguments and keywords. n&#39; . fastcore.utils.partialler fixes this, and makes sure the docstring is retained such that the new API is transparent: . filter5 = partialler(f, val=5) filter5.__doc__ . &#39;Filter a list to remove any values that are less than val.&#39; . . Composition of functions . A technique that is pervasive in functional programming languages is function composition, whereby you chain a bunch of functions together to achieve some kind of result. This is especially useful when applying various data transformations. Consider a toy example where I have three functions: (1) Removes elements of a list less than 5 (from the prior section) (2) adds 2 to each number (3) sums all the numbers: . def add(arr, val): return [x + val for x in arr] def arrsum(arr): return sum(arr) # See the previous section on partialler add2 = partialler(add, val=2) transform = compose(filter5, add2, arrsum) transform([1,2,3,4,5,6]) . 15 . But why is this useful? You might me thinking, I can accomplish the same thing with: . arrsum(add2(filter5([1,2,3,4,5,6]))) . You are not wrong! However, composition gives you a convenient interface in case you want to do something like the following: . def fit(x, transforms:list): &quot;fit a model after performing transformations&quot; x = compose(*transforms)(x) y = [np.mean(x)] * len(x) # its a dumb model. Don&#39;t judge me return y # filters out elements &lt; 5, adds 2, then predicts the mean fit(x=[1,2,3,4,5,6], transforms=[filter5, add2]) . [7.5, 7.5] . For more information about compose, read the docs. . . A more useful __repr__ . In python, __repr__ helps you get information about an object for logging and debugging. Below is what you get by default when you define a new class. (Note: we are using store_attr, which was discussed earlier). . class Test: def __init__(self, a, b=2, c=3): store_attr() # `store_attr` was discussed previously Test(1) . &lt;__main__.Test at 0x7ffcd766cee0&gt; . We can use basic_repr to quickly give us a more sensible default: . class Test: def __init__(self, a, b=2, c=3): store_attr() __repr__ = basic_repr(&#39;a,b,c&#39;) Test(2) . Test(a=2, b=2, c=3) . . Monkey Patching With A Decorator . It can be convenient to monkey patch with a decorator, which is especially helpful when you want to patch an external library you are importing. We can use the decorator @patch from fastcore.foundation along with type hints like so: . class MyClass(int): pass @patch def func(self:MyClass, a): return self+a mc = MyClass(3) . Now, MyClass has an additional method named func: . mc.func(10) . 13 . Still not convinced? I&#39;ll show you another example of this kind of patching in the next section. . . A better pathlib.Path . When you see these extensions to pathlib.path you won&#39;t ever use vanilla pathlib again! A number of additional methods have been added to pathlib, such as: . Path.readlines: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.readlines() | Path.read: same as with open(&#39;somefile&#39;, &#39;r&#39;) as f: f.read() | Path.save: saves file as pickle | Path.load: loads pickle file | Path.ls: shows the contents of the path as a list. | etc. | . Read more about this here. Here is a demonstration of ls: . from fastcore.utils import * from pathlib import Path p = Path(&#39;.&#39;) p.ls() # you don&#39;t get this with vanilla Pathlib.Path!! . (#7) [Path(&#39;2020-09-01-fastcore.ipynb&#39;),Path(&#39;README.md&#39;),Path(&#39;fastcore_imgs&#39;),Path(&#39;2020-02-20-test.ipynb&#39;),Path(&#39;.ipynb_checkpoints&#39;),Path(&#39;2020-02-21-introducing-fastpages.ipynb&#39;),Path(&#39;my_icons&#39;)] . Wait! What&#39;s going on here? We just imported pathlib.Path - why are we getting this new functionality? Thats because we imported the fastcore.utils module, which patches this module via the @patch decorator discussed earlier. Just to drive the point home on why the @patch decorator is useful, I&#39;ll go ahead and add another method to Path right now: . @patch def fun(self:Path): return &quot;This is fun!&quot; p.fun() . &#39;This is fun!&#39; . That is magical, right? I know! That&#39;s why I&#39;m writing about it! . . An Even More Concise Way To Create Lambdas . Self, with an uppercase S, is an even more concise way to create lambdas that are calling methods on an object. For example, let&#39;s create a lambda for taking the sum of a Numpy array: . arr=np.array([5,4,3,2,1]) f = lambda a: a.sum() assert f(arr) == 15 . You can use Self in the same way: . f = Self.sum() assert f(arr) == 15 . Let&#39;s create a lambda that does a groupby and max of a Pandas dataframe: . import pandas as pd df=pd.DataFrame({&#39;Some Column&#39;: [&#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;b&#39;, ], &#39;Another Column&#39;: [5, 7, 50, 70]}) f = Self.groupby(&#39;Some Column&#39;).mean() f(df) . Another Column . Some Column . a 6 | . b 60 | . Read more about Self in the docs). . . Notebook Functions . These are simple but handy, and allow you to know whether or not code is executing in a Jupyter Notebook, Colab, or an Ipython Shell: . from fastcore.imports import in_notebook, in_colab, in_ipython in_notebook(), in_colab(), in_ipython() . (True, False, True) . This is useful if you are displaying certain types of visualizations, progress bars or animations in your code that you may want to modify or toggle depending on the environment. . . A Drop-In Replacement For List . You might be pretty happy with Python&#39;s list. This is one of those situations that you don&#39;t know you needed a better list until someone showed one to you. Enter L, a list like object with many extra goodies. . The best way I can describe L is to pretend that list and numpy had a pretty baby: . define a list (check out the nice __repr__ that shows the length of the list!) . L(1,2,3) . (#3) [1,2,3] . Shuffle a list: . p = L.range(20).shuffle() p . (#20) [8,7,5,12,14,16,2,15,19,6...] . Index into a list: . p[2,4,6] . (#3) [5,14,2] . L has sensible defaults, for example appending an element to a list: . 1 + L(2,3,4) . (#4) [1,2,3,4] . There is much more L has to offer. Read the docs to learn more. . But Wait ... There&#39;s More! . There are more things I would like to show you about fastcore, but there is no way they would reasonably fit into a blog post. Here is a list of some of my favorite things that I didn&#39;t demo in this blog post: . Utilities . The Basics section contain many shortcuts to perform common tasks or provide an additional interface to what standard python provides. . mk_class: quickly add a bunch of attributes to a class | wrap_class: add new methods to a class with a simple decorator | groupby: similar to Scala&#39;s groupby | merge: merge dicts | fasttuple: a tuple on steroids | Infinite Lists: useful for padding and testing | chunked: for batching and organizing stuff | . Multiprocessing . The Multiprocessing section extends python&#39;s multiprocessing library by offering features like: . progress bars | ability to pause to mitigate race conditions with external services | processing things in batches on each worker, ex: if you have a vectorized operation to perform in chunks | . Functional Programming . The functional programming section is my favorite part of this library. . maps: a map that also composes functions | mapped: A more robust map | using_attr: compose a function that operates on an attribute | . Transforms . Transforms is a collection of utilities for creating data transformations and associated pipelines. These transformation utilities build upon many of the building blocks discussed in this blog post. . Further Reading . It should be noted that you should read the main page of the docs first, followed by the section on tests to fully understand the documentation. . The fastcore documentation site. | The fastcore GitHub repo. | Blog post on delegation. | . Shameless plug: fastpages . This blog post was written entirely in a Jupyter Notebook, which GitHub automatically converted into to a blog post! Sound interesting? Check out fastpages. .",
            "url": "https://progressedd.github.io/blog/fastcore/",
            "relUrl": "/fastcore/",
            "date": " • Sep 1, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "How to Setup Favicons For Jekyll Blogs Generated by Fastpages",
            "content": "Table of Contents . 1&nbsp;&nbsp;How to Setup Favicons For Jekyll Blogs Generated by Fastpages | 2&nbsp;&nbsp;Background | 3&nbsp;&nbsp;Following The Guide from RealFaviconGenerator3.1&nbsp;&nbsp;Changing Path | 3.2&nbsp;&nbsp;Version/Refresh | 3.3&nbsp;&nbsp;Adjustments to RealFaviconGenerator&#39;s Instructions | . | 4&nbsp;&nbsp;Final Steps | . Background . While setting this up blog, I had issues changing the favicons for my website. I tried a web search of jekyll blog how to change favicon for guides on how to change the favicons for pages hosted through github pages. Of the guides from the search, many recommended using RealFaviconGenerator. . Following The Guide from RealFaviconGenerator . I followed the instructions on the generator and uploaded my icon. . . After adjusting the previews for each platform, I changed the following generator options. . Path | Version/Refresh | Changing Path . Fastpages uses Jekyll as the site generator. By default, RealFaviconGenerator has the favicon.ico and other platform specific files in the root of your directory. Fastpages has it configured such favicon file in the /images folder. To make it easier to see, I linked my directory/github. For my setup, I made a separate favicon folder to make it more organized and selected the second option of . I cannot or I do not want to place favicon files at the root of my web site. Instead I will place them . . Version/Refresh . Since I had shared my an earlier version of my blog to other people, I had to change my setting to the second option . The web site is already in production and many people already visited it. I want returning visitors to see my new favicon, not the old one. . . Adjustments to RealFaviconGenerator&#39;s Instructions . After changing the settings, you can generate the favicons for installation. Download the package by clicking the blue Favicon package button. Make sure to have the directory match the configuration you set in the Changing Path section. . RealFaviconGenerator recommends copying the html section generated by the page in the head.htmlfile. . The following section is what was generated for my blog . &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;https://progressedd.github.io/blog/images/favicons/apple-touch-icon.png?v=Gv6BXY9gr5&quot;&gt; &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;32x32&quot; href=&quot;https://progressedd.github.io/blog/images/favicons/favicon-32x32.png?v=Gv6BXY9gr5&quot;&gt; &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;16x16&quot; href=&quot;https://progressedd.github.io/blog/images/favicons/favicon-16x16.png?v=Gv6BXY9gr5&quot;&gt; &lt;link rel=&quot;manifest&quot; href=&quot;https://progressedd.github.io/blog/images/favicons/site.webmanifest?v=Gv6BXY9gr5&quot;&gt; &lt;link rel=&quot;mask-icon&quot; href=&quot;https://progressedd.github.io/blog/images/favicons/safari-pinned-tab.svg?v=Gv6BXY9gr5&quot; color=&quot;#5bbad5&quot;&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;https://progressedd.github.io/blog/images/favicons/favicon.ico?v=Gv6BXY9gr5&quot;&gt; &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#603cba&quot;&gt; &lt;meta name=&quot;msapplication-config&quot; content=&quot;https://progressedd.github.io/blog/images/favicons/browserconfig.xml?v=Gv6BXY9gr5&quot;&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#ffffff&quot;&gt; . For our blog generated with FastPages and Jekyll, I found it easier to place it in the custom-head.html found in /_includes/custom-head.html. . Final Steps . Once you have extracted your favicon package and modified your head html, make sure to commit your changes to Github. To test if the changes went through, you can either visit your website or use the Favicon checker. .",
            "url": "https://progressedd.github.io/blog/2020/08/09/Favicon-Setup-Guide.html",
            "relUrl": "/2020/08/09/Favicon-Setup-Guide.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Using Matplotlib to Animate Data From a Velocity Recording",
            "content": "Table of Contents . 1&nbsp;&nbsp;Using Matplotlib to Animate Data From a Velocity Recording | 2&nbsp;&nbsp;Introduction | 3&nbsp;&nbsp;Demonstration3.1&nbsp;&nbsp;Tracking a Line Through Time | 3.2&nbsp;&nbsp;Plotting a Dot and Tracking Across Velocity Curve | 3.3&nbsp;&nbsp;Generating The Gifs | . | 4&nbsp;&nbsp;Importing Libraries + Loading Data | 5&nbsp;&nbsp;Plotting Function5.1&nbsp;&nbsp;Explanation of Inputs | 5.2&nbsp;&nbsp;Explanation of Variables5.2.1&nbsp;&nbsp;Setting Up Data Section | 5.2.2&nbsp;&nbsp;Graph Type Settings Section | 5.2.3&nbsp;&nbsp;Animation Settings | 5.2.4&nbsp;&nbsp;Setting Up The Figure | 5.2.5&nbsp;&nbsp;Setting Up Positions of X and Y Outputs For Value | 5.2.6&nbsp;&nbsp;Setting Up The Line Plot | 5.2.7&nbsp;&nbsp;Initialization Function: Plot The Background of Each Frame | 5.2.8&nbsp;&nbsp;Animation Function. This Is Called Sequentially | 5.2.9&nbsp;&nbsp;Save The Animation as an mp4. | . | . | 6&nbsp;&nbsp;Working Through Matplotlib Animation Tutorial6.1&nbsp;&nbsp;Having Line Plotted Through Time6.1.1&nbsp;&nbsp;Learning How Matplotlib plots | 6.1.2&nbsp;&nbsp;Messing with labels | 6.1.3&nbsp;&nbsp;print statements | . | 6.2&nbsp;&nbsp;Having a Dot Tracking Along the Velocity Curve | 6.3&nbsp;&nbsp;Figuring out Keyerror | . | 7&nbsp;&nbsp;Messing with a overlapping graph | . Introduction . One of my friends approached me asking if I had any experience animating graphs, since I had experience with video editing. Though I had not had any formal experience, I decided that it would be a interesting challenge to embark. . I did some research and found a tutorial as seen in the section &quot;Working Through Matplotlib Animation Tutorial&quot; . Demonstration . Tracking a Line Through Time . . Plotting a Dot and Tracking Across Velocity Curve . . Generating The Gifs . To generate these gifs, I used ffmpeg to convert the mp4s to gifs. . To convert the mp4s to gifs, I opened my directory in the terminal and ran the following ffmpeg command, after converting the video to gif, I added and pushed the files to github. Since github does not show local embeds, I embedded the url of the gif from the github repository. . ffmpeg -i line_tracking_animated.mp4 line_tracking_animated.gif . Alternatively, if you have ffmpeg installed, you can run the following cell to run it in a jupyter cell . Breakdown of the command . ffmpeg tells the terminal to use ffmpeg | -i tells ffmpeg the input | line_tracking_animated.mp4 tells ffmpeg the source file | line_tracking_animated.gif tells ffmpeg the output file title and format | . !ffmpeg -i line_tracking_animated.mp4 line_tracking_animated.gif . !ffmpeg -i dot_tracking_animated.mp4 dot_tracking_animated.gif . Importing Libraries + Loading Data . from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;&quot;)) . import pandas as pd import numpy as np from matplotlib import pyplot as plt from matplotlib import animation from matplotlib.offsetbox import AnchoredText . df = pd.read_csv(&quot;velocity.csv&quot;) df . Time (ms) Velocity (m/s) . 0 0 | 0.03 | . 1 17 | 0.03 | . 2 34 | 0.03 | . 3 50 | 0.03 | . 4 67 | 0.03 | . ... ... | ... | . 1314 22167 | 0.89 | . 1315 22183 | 0.89 | . 1316 22200 | 0.41 | . 1317 22217 | 0.41 | . 1318 22233 | 0.41 | . 1319 rows × 2 columns . print(&quot;max time&quot;) display(df[&quot;Time (ms)&quot;].max()) print(&quot;min time&quot;) display(df[&quot;Time (ms)&quot;].min()) print(&quot;Velocity&quot;) display(df[&quot;Velocity (m/s)&quot;][1]) print(&quot;Max Velocity&quot;) display(df[&quot;Velocity (m/s)&quot;].max()) print(&quot;Final time&quot;) display(df[&quot;Time (ms)&quot;].iloc[-1]*60/1000) print(&quot;Final time rounded&quot;) display(int(round(df[&quot;Time (ms)&quot;].iloc[-1]*60/1000, 1))) print(&quot;column titles&quot;) column_titles = list(df.columns.values) display(column_titles) . max time . 22233 . min time . 0 . Velocity . 0.03 . Max Velocity . 20.5 . Final time . 1333.98 . Final time rounded . 1334 . column titles . [&#39;Time (ms)&#39;, &#39;Velocity (m/s)&#39;] . Plotting Function . I wrote the animateGraph after modifying Matplotlib Animation Tutorial to work for my velocity data from the Having Line Plotted Through Time section and later Having a Dot Tracking Along the Velocity Curve. . The function takes the general structure of the respective and makes it into a single function . Explanation of Inputs . df input DataFrame | x_column column title for x axis | y_column column title for y axis | dot_track takes yes or no, if it is not yes, it will default to the line graph | framerate integer that specifies the video&#39;s framerate | . Explanation of Variables . Setting Up Data Section . x_df DataFrame of just the x values, I seperated the x and y DataFrames to make it easier to follow in the animation function | y_df DataFrame of just the x values, I seperated the x and y DataFrames to make it easier to follow in the animation function | x_max maximum of the x values, used to set the bounds of x axis | y_max maximum of the y values, used to set the bounds of y axis, added 2 to make space for the time and velocity printouts | last_index used to prevent Keyerror, see Figuring out Keyerror section for a more in depth explanation | . Graph Type Settings Section . plot_dot boolean used to decide which animation to use, if True will have animation output the dot tracker on graph | graph_type string used to keep track of the animation, used for filename can be either dot_tracking or line_tracking | . | . Animation Settings . time_seconds takes last entry of x value to get the duration of the data converts from miliseconds to seconds, used later for totalFrames animation duration calculation | totalFrames product of framerate and time_seconds to get the number of frames for matplotlib to animate | . Setting Up The Figure . fig figure variable, stores figure object the size was set to (20,12) | I followed the suggestions to change the size and output a sample file from Stack Overflow How to Change Figure Size | I followed the suggestions to change the font size from Stack Overflow How to Change Font Size | . | . Setting Up Positions of X and Y Outputs For Value . I followed the example set by the matplotlib wiki from Text properties and layout | y_value_print text object, will set the y value, for the demo, we use velocity set for right and top is updated frame by frame in the animate(i) function | x_value_print text object, will set the x value, for the demo, we use time set for left and top is updated frame by frame in the animate(i) function | . Setting Up The Line Plot . I used the plot_dot to determine which graph should be plotted if plot_dot is True, we will plot the existing graph and have the dot | if plot_dot is False, we will plot the graph sections frame by frame | . | To get the red dot, I read the instructions of the different passable arguments from the matplotlib wiki from matplotlib.pyplot.plot | . Initialization Function: Plot The Background of Each Frame . I kept the example set from the guide see Working Through Matplotlib Animation Tutorial for more details | . Animation Function. This Is Called Sequentially . This section is broken up into two parts, Checking if the function reaches the last value of the DataFrame | updating the x and y column print outs | | To check if the function has reached the last value of the DataFrame, we have a if conditional that checks if the animate function has reached the end of the DataFrame, if it does, then it will use the value at last_index, we want it to keep the last value to avoid the Keyerror as explained in the later experimental section | Next, the function will set the x_value and y_value to be the final index value x_value and y_value is used for animating the labels for the values of x and y | . | Afterwards the function follow a second if statement, which will check if plot_dot is true or false if plot_dot is False, the function will output everything up until the current i index value. This is used for the animation that plots graph sections frame by frame | . | if plot_dot is True, the function will output the current i index value. This is used for the animation that plots the point frame by frame | . | . | The next section will update the x and y column print out values for each frame I took inspiration from Matplotlib animations the easy way specifically the &quot;Changing labels and text&quot; section values_x is a string variable that stores the x column title, adds colons, and the x value | values_y is a string variable that stores the y column title, adds colons, and the y value | After setting values_x and values_y we use .set_text() to update the y_value_print and x_value_print each time | . | Once all the variables have been updated, animate(i) will return the line to the animation.FuncAnimation(), which will continue until it reaches the last frame | . Save The Animation as an mp4. . I did not make significant changes to the original, I only changed the filename to match the graph type. I wanted the filename to be the &#39; x_column vs y_column graph_type _animated.mp4&#39; | The ideal file name would be &#39;Velocity_(m/s)_vs_Time (ms)_line_tracking_animated.mp4 When I tried parsing the x_column as a string, python had serious issues with the slash (/) part of (m/s), enough so that it would prevent the file from being saved | An potential alternative solution would to change m/s to ms^-1, but it require changing the data or engineering a solution that read the units and replaced slashes with unit^-1. After evaluating the alternatives, I realized it would be easier to rename the file. If this function were used to generate hundreds of graphs from hundreds of source files, I would need to find a better solution. Since the purpose of this function is to make it easier to change between the dot and line tracking, I did not invest any further time into developing an alternative solution | . | . | . def animateGraph(df,x_column, y_column, dot_track, framerate): # Setting up data x_df = df[x_column] y_df = df[y_column] x_max = int(np.ceil(df[x_column].max())) y_max = int(np.ceil(df[y_column].max())) + 2 last_index = len(df)-1 # Check if we are plotting the graph or a graph + dot if(dot_track.lower() == &quot;yes&quot;): plot_dot = True graph_type = &quot;dot_tracking&quot; else: plot_dot = False graph_type = &quot;line_tracking&quot; # Animation settings time_seconds = x_df.iloc[-1]/1000 totalFrames = int(round(framerate * time_seconds)) # Setting up the figure fig = plt.figure() fig.set_size_inches(20, 12) fig.savefig(&#39;test2png.png&#39;, dpi=100) plt.rcParams.update({&#39;font.size&#39;: 24}) # Setting up the axes ax = plt.axes(xlim=(0, x_max), ylim=(0, y_max)) ax.set(title= x_column + &#39; vs &#39; + y_column, ylabel= y_column, xlabel= x_column, ) # Setting up the positions of velocity and time outputs left, width = .1, .75 bottom, height = .25, .73 right = left + width top = bottom + height y_value_print = ax.text(right, top, &quot;y value&quot;, horizontalalignment=&#39;right&#39;, verticalalignment=&#39;top&#39;, transform=ax.transAxes) x_value_print = ax.text(left, top, &quot;x value&quot;, horizontalalignment=&#39;left&#39;, verticalalignment=&#39;top&#39;, transform=ax.transAxes) # Setting up the line plot if(plot_dot == True): plt.plot(x_df, y_df) line, = plt.plot([], [], linestyle=&#39;none&#39;, marker = &#39;o&#39;, ms = 10, color=&#39;r&#39;) else: line, = plt.plot(x_df, y_df) # initialization function: plot the background of each frame def init(): line.set_data([], []) return line, # animation function. This is called sequentially def animate(i): if(i &gt; last_index): x_value = x_df[last_index] y_value = y_df[last_index] if(plot_dot == False): x = x_df[0:last_index] y = y_df[0:last_index] else: x = x_df[last_index] y = y_df[last_index] else: x_value = x_df[i] y_value = y_df[i] if(plot_dot == False): x = x_df[0:i] y = y_df[0:i] else: x = x_df[i] y = y_df[i] line.set_data(x, y) # Update the figure with x and y values values_x = x_column + &quot;: &quot; + str(x_value) values_y = y_column + &quot;: &quot; + str(y_value) y_value_print.set_text(values_y) x_value_print.set_text(values_x) return line, # call the animator. blit=True means only re-draw the parts that have changed. anim = animation.FuncAnimation(fig, animate, init_func=init,frames = totalFrames, interval=0, blit=False) # save the animation as an mp4. This requires ffmpeg or mencoder to be # installed. The extra_args ensure that the x264 codec is used, so that # the video can be embedded in html5. You may need to adjust this for # your system: for more information, see # http://matplotlib.sourceforge.net/api/animation_api.html anim.save(graph_type + &#39;_animated.mp4&#39;, fps=framerate, extra_args=[&#39;-vcodec&#39;, &#39;libx264&#39;]) plt.show() . animateGraph(df,&quot;Time (ms)&quot;, &quot;Velocity (m/s)&quot;, &quot;yes&quot;, 60) . animateGraph(df,&quot;Time (ms)&quot;, &quot;Velocity (m/s)&quot;, &quot;no&quot;, 60) . Working Through Matplotlib Animation Tutorial . I used Jake Vanderplas&#39;s sine wave example posted below as a base to understand how matplotlib animates. I modified it to make it work with the velocity and time data I was given from my friend. . &quot;&quot;&quot; Matplotlib Animation Example author: Jake Vanderplas email: vanderplas@astro.washington.edu website: http://jakevdp.github.com license: BSD Please feel free to use and modify this, but keep the above information. Thanks! &quot;&quot;&quot; import numpy as np from matplotlib import pyplot as plt from matplotlib import animation # First set up the figure, the axis, and the plot element we want to animate fig = plt.figure() ax = plt.axes(xlim=(0, 2), ylim=(-2, 2)) line, = ax.plot([], [], lw=2) # initialization function: plot the background of each frame def init(): line.set_data([], []) return line, # animation function. This is called sequentially def animate(i): x = np.linspace(0, 2, 1000) y = np.sin(2 * np.pi * (x - 0.01 * i)) line.set_data(x, y) return line, # call the animator. blit=True means only re-draw the parts that have changed. anim = animation.FuncAnimation(fig, animate, init_func=init, frames=200, interval=20, blit=True) # save the animation as an mp4. This requires ffmpeg or mencoder to be # installed. The extra_args ensure that the x264 codec is used, so that # the video can be embedded in html5. You may need to adjust this for # your system: for more information, see # http://matplotlib.sourceforge.net/api/animation_api.html anim.save(&#39;basic_animation.mp4&#39;, fps=30, extra_args=[&#39;-vcodec&#39;, &#39;libx264&#39;]) plt.show() . Having Line Plotted Through Time . From the base I added my own modifications titled Tracking a Line Through time, which included . setting variables for velocity (y_df) and time (x_df) dataframes | setting maximums for x and y | setting a time_seconds variable that converts the time in milliseconds to seconds | setting a framerate variable that sets the framerate of the graph | setting a totalFrames variable that sets the duration of the animation | increasing the figure size from 64x64 to a bigger 18.5x10.4 inch higher resolution figure with fig.set_size_inches() | increasing the framerate to 60 frames a second (setting framerate to 60), which makes the plot smoother only downside is that it will take extra time to encode the final mp4 | . | modifying the limits. | adding titles for the figure | having the the animation plot the figure as time passes, rather needing a known function to plot it | . x_df = df[&quot;Time (ms)&quot;] y_df = df[&quot;Velocity&quot;] x_max = int(np.ceil(df[&quot;Time (ms)&quot;].max())) y_max = int(np.ceil(df[&quot;Velocity&quot;].max())) time_seconds = x_df.iloc[-1]/1000 framerate = 60 totalFrames = int(round(framerate * time_seconds)) # First set up the figure, the axis, and the plot element we want to animate fig = plt.figure() fig.set_size_inches(18.5, 10.5) fig.savefig(&#39;test2png.png&#39;, dpi=100) # transparency settings for the figure #fig.patch.set_alpha(0.) ax = plt.axes(xlim=(0, x_max), ylim=(0, y_max)) ax.set(title=&#39;Velocity vs Time&#39;, ylabel=&quot;Velocity&quot;, xlabel=&quot;Time (ms)&quot;) line, = plt.plot(x_df, y_df) # initialization function: plot the background of each frame def init(): line.set_data([], []) return line, # animation function. This is called sequentially def animate(i): x = x_df[0:i] print(&quot;i&quot;, i) y = y_df[0:i] line.set_data(x, y) return line, # call the animator. blit=True means only re-draw the parts that have changed. anim = animation.FuncAnimation(fig, animate, init_func=init,frames = totalFrames, interval=0, blit=False) # save the animation as an mp4. This requires ffmpeg or mencoder to be # installed. The extra_args ensure that the x264 codec is used, so that # the video can be embedded in html5. You may need to adjust this for # your system: for more information, see # http://matplotlib.sourceforge.net/api/animation_api.html anim.save(&#39;basic_animation.mp4&#39;, fps=framerate, extra_args=[&#39;-vcodec&#39;, &#39;libx264&#39;]) plt.show() . i 0 i 1 i 2 i 3 i 4 i 5 i 6 i 7 i 8 i 9 i 10 i 11 i 12 i 13 i 14 i 15 i 16 i 17 i 18 i 19 i 20 i 21 i 22 i 23 i 24 i 25 i 26 i 27 i 28 i 29 i 30 i 31 i 32 i 33 i 34 i 35 i 36 i 37 i 38 i 39 i 40 i 41 i 42 i 43 i 44 i 45 i 46 i 47 i 48 i 49 i 50 i 51 i 52 i 53 i 54 i 55 i 56 i 57 i 58 i 59 i 60 i 61 i 62 i 63 i 64 i 65 i 66 i 67 i 68 i 69 i 70 i 71 i 72 i 73 i 74 i 75 i 76 i 77 i 78 i 79 i 80 i 81 i 82 i 83 i 84 i 85 i 86 i 87 i 88 i 89 i 90 i 91 i 92 i 93 i 94 i 95 i 96 i 97 i 98 i 99 i 100 i 101 i 102 i 103 i 104 i 105 i 106 i 107 i 108 i 109 i 110 i 111 i 112 i 113 i 114 i 115 i 116 i 117 i 118 i 119 i 120 i 121 i 122 i 123 i 124 i 125 i 126 i 127 i 128 i 129 i 130 i 131 i 132 i 133 i 134 i 135 i 136 i 137 i 138 i 139 i 140 i 141 i 142 i 143 i 144 i 145 i 146 i 147 i 148 i 149 i 150 i 151 i 152 i 153 i 154 i 155 i 156 i 157 i 158 i 159 i 160 i 161 i 162 i 163 i 164 i 165 i 166 i 167 i 168 i 169 i 170 i 171 i 172 i 173 i 174 i 175 i 176 i 177 i 178 i 179 i 180 i 181 i 182 i 183 i 184 i 185 i 186 i 187 i 188 i 189 i 190 i 191 i 192 i 193 i 194 i 195 i 196 i 197 i 198 i 199 i 200 i 201 i 202 i 203 i 204 i 205 i 206 i 207 i 208 i 209 i 210 i 211 i 212 i 213 i 214 i 215 i 216 i 217 i 218 i 219 i 220 i 221 i 222 i 223 i 224 i 225 i 226 i 227 i 228 i 229 i 230 i 231 i 232 i 233 i 234 i 235 i 236 i 237 i 238 i 239 i 240 i 241 i 242 i 243 i 244 i 245 i 246 i 247 i 248 i 249 i 250 i 251 i 252 i 253 i 254 i 255 i 256 i 257 i 258 i 259 i 260 i 261 i 262 i 263 i 264 i 265 i 266 i 267 i 268 i 269 i 270 i 271 i 272 i 273 i 274 i 275 i 276 i 277 i 278 i 279 i 280 i 281 i 282 i 283 i 284 i 285 i 286 i 287 i 288 i 289 i 290 i 291 i 292 i 293 i 294 i 295 i 296 i 297 i 298 i 299 i 300 i 301 i 302 i 303 i 304 i 305 i 306 i 307 i 308 i 309 i 310 i 311 i 312 i 313 i 314 i 315 i 316 i 317 i 318 i 319 i 320 i 321 i 322 i 323 i 324 i 325 i 326 i 327 i 328 i 329 i 330 i 331 i 332 i 333 i 334 i 335 i 336 i 337 i 338 i 339 i 340 i 341 i 342 i 343 i 344 i 345 i 346 i 347 i 348 i 349 i 350 i 351 i 352 i 353 i 354 i 355 i 356 i 357 i 358 i 359 i 360 i 361 i 362 i 363 i 364 i 365 i 366 i 367 i 368 i 369 i 370 i 371 i 372 i 373 i 374 i 375 i 376 i 377 i 378 i 379 i 380 i 381 i 382 i 383 i 384 i 385 i 386 i 387 i 388 i 389 i 390 i 391 i 392 i 393 i 394 i 395 i 396 i 397 i 398 i 399 i 400 i 401 i 402 i 403 i 404 i 405 i 406 i 407 i 408 i 409 i 410 i 411 i 412 i 413 i 414 i 415 i 416 i 417 i 418 i 419 i 420 i 421 i 422 i 423 i 424 i 425 i 426 i 427 i 428 i 429 i 430 i 431 i 432 i 433 i 434 i 435 i 436 i 437 i 438 i 439 i 440 i 441 i 442 i 443 i 444 i 445 i 446 i 447 i 448 i 449 i 450 i 451 i 452 i 453 i 454 i 455 i 456 i 457 i 458 i 459 i 460 i 461 i 462 i 463 i 464 i 465 i 466 i 467 i 468 i 469 i 470 i 471 i 472 i 473 i 474 i 475 i 476 i 477 i 478 i 479 i 480 i 481 i 482 i 483 i 484 i 485 i 486 i 487 i 488 i 489 i 490 i 491 i 492 i 493 i 494 i 495 i 496 i 497 i 498 i 499 i 500 i 501 i 502 i 503 i 504 i 505 i 506 i 507 i 508 i 509 i 510 i 511 i 512 i 513 i 514 i 515 i 516 i 517 i 518 i 519 i 520 i 521 i 522 i 523 i 524 i 525 i 526 i 527 i 528 i 529 i 530 i 531 i 532 i 533 i 534 i 535 i 536 i 537 i 538 i 539 i 540 i 541 i 542 i 543 i 544 i 545 i 546 i 547 i 548 i 549 i 550 i 551 i 552 i 553 i 554 i 555 i 556 i 557 i 558 i 559 i 560 i 561 i 562 i 563 i 564 i 565 i 566 i 567 i 568 i 569 i 570 i 571 i 572 i 573 i 574 i 575 i 576 i 577 i 578 i 579 i 580 i 581 i 582 i 583 i 584 i 585 i 586 i 587 i 588 i 589 i 590 i 591 i 592 i 593 i 594 i 595 i 596 i 597 i 598 i 599 i 600 i 601 i 602 i 603 i 604 i 605 i 606 i 607 i 608 i 609 i 610 i 611 i 612 i 613 i 614 i 615 i 616 i 617 i 618 i 619 i 620 i 621 i 622 i 623 i 624 i 625 i 626 i 627 i 628 i 629 i 630 i 631 i 632 i 633 i 634 i 635 i 636 i 637 i 638 i 639 i 640 i 641 i 642 i 643 i 644 i 645 i 646 i 647 i 648 i 649 i 650 i 651 i 652 i 653 i 654 i 655 i 656 i 657 i 658 i 659 i 660 i 661 i 662 i 663 i 664 i 665 i 666 i 667 i 668 i 669 i 670 i 671 i 672 i 673 i 674 i 675 i 676 i 677 i 678 i 679 i 680 i 681 i 682 i 683 i 684 i 685 i 686 i 687 i 688 i 689 i 690 i 691 i 692 i 693 i 694 i 695 i 696 i 697 i 698 i 699 i 700 i 701 i 702 i 703 i 704 i 705 i 706 i 707 i 708 i 709 i 710 i 711 i 712 i 713 i 714 i 715 i 716 i 717 i 718 i 719 i 720 i 721 i 722 i 723 i 724 i 725 i 726 i 727 i 728 i 729 i 730 i 731 i 732 i 733 i 734 i 735 i 736 i 737 i 738 i 739 i 740 i 741 i 742 i 743 i 744 i 745 i 746 i 747 i 748 i 749 i 750 i 751 i 752 i 753 i 754 i 755 i 756 i 757 i 758 i 759 i 760 i 761 i 762 i 763 i 764 i 765 i 766 i 767 i 768 i 769 i 770 i 771 i 772 i 773 i 774 i 775 i 776 i 777 i 778 i 779 i 780 i 781 i 782 i 783 i 784 i 785 i 786 i 787 i 788 i 789 i 790 i 791 i 792 i 793 i 794 i 795 i 796 i 797 i 798 i 799 i 800 i 801 i 802 i 803 i 804 i 805 i 806 i 807 i 808 i 809 i 810 i 811 i 812 i 813 i 814 i 815 i 816 i 817 i 818 i 819 i 820 i 821 i 822 i 823 i 824 i 825 i 826 i 827 i 828 i 829 i 830 i 831 i 832 i 833 i 834 i 835 i 836 i 837 i 838 i 839 i 840 i 841 i 842 i 843 i 844 i 845 i 846 i 847 i 848 i 849 i 850 i 851 i 852 i 853 i 854 i 855 i 856 i 857 i 858 i 859 i 860 i 861 i 862 i 863 i 864 i 865 i 866 i 867 i 868 i 869 i 870 i 871 i 872 i 873 i 874 i 875 i 876 i 877 i 878 i 879 i 880 i 881 i 882 i 883 i 884 i 885 i 886 i 887 i 888 i 889 i 890 i 891 i 892 i 893 i 894 i 895 i 896 i 897 i 898 i 899 i 900 i 901 i 902 i 903 i 904 i 905 i 906 i 907 i 908 i 909 i 910 i 911 i 912 i 913 i 914 i 915 i 916 i 917 i 918 i 919 i 920 i 921 i 922 i 923 i 924 i 925 i 926 i 927 i 928 i 929 i 930 i 931 i 932 i 933 i 934 i 935 i 936 i 937 i 938 i 939 i 940 i 941 i 942 i 943 i 944 i 945 i 946 i 947 i 948 i 949 i 950 i 951 i 952 i 953 i 954 i 955 i 956 i 957 i 958 i 959 i 960 i 961 i 962 i 963 i 964 i 965 i 966 i 967 i 968 i 969 i 970 i 971 i 972 i 973 i 974 i 975 i 976 i 977 i 978 i 979 i 980 i 981 i 982 i 983 i 984 i 985 i 986 i 987 i 988 i 989 i 990 i 991 i 992 i 993 i 994 i 995 i 996 i 997 i 998 i 999 i 1000 i 1001 i 1002 i 1003 i 1004 i 1005 i 1006 i 1007 i 1008 i 1009 i 1010 i 1011 i 1012 i 1013 i 1014 i 1015 i 1016 i 1017 i 1018 i 1019 i 1020 i 1021 i 1022 i 1023 i 1024 i 1025 i 1026 i 1027 i 1028 i 1029 i 1030 i 1031 i 1032 i 1033 i 1034 i 1035 i 1036 i 1037 i 1038 i 1039 i 1040 i 1041 i 1042 i 1043 i 1044 i 1045 i 1046 i 1047 i 1048 i 1049 i 1050 i 1051 i 1052 i 1053 i 1054 i 1055 i 1056 i 1057 i 1058 i 1059 i 1060 i 1061 i 1062 i 1063 i 1064 i 1065 i 1066 i 1067 i 1068 i 1069 i 1070 i 1071 i 1072 i 1073 i 1074 i 1075 i 1076 i 1077 i 1078 i 1079 i 1080 i 1081 i 1082 i 1083 i 1084 i 1085 i 1086 i 1087 i 1088 i 1089 i 1090 i 1091 i 1092 i 1093 i 1094 i 1095 i 1096 i 1097 i 1098 i 1099 i 1100 i 1101 i 1102 i 1103 i 1104 i 1105 i 1106 i 1107 i 1108 i 1109 i 1110 i 1111 i 1112 i 1113 i 1114 i 1115 i 1116 i 1117 i 1118 i 1119 i 1120 i 1121 i 1122 i 1123 i 1124 i 1125 i 1126 i 1127 i 1128 i 1129 i 1130 i 1131 i 1132 i 1133 i 1134 i 1135 i 1136 i 1137 i 1138 i 1139 i 1140 i 1141 i 1142 i 1143 i 1144 i 1145 i 1146 i 1147 i 1148 i 1149 i 1150 i 1151 i 1152 i 1153 i 1154 i 1155 i 1156 i 1157 i 1158 i 1159 i 1160 i 1161 i 1162 i 1163 i 1164 i 1165 i 1166 i 1167 i 1168 i 1169 i 1170 i 1171 i 1172 i 1173 i 1174 i 1175 i 1176 i 1177 i 1178 i 1179 i 1180 i 1181 i 1182 i 1183 i 1184 i 1185 i 1186 i 1187 i 1188 i 1189 i 1190 i 1191 i 1192 i 1193 i 1194 i 1195 i 1196 i 1197 i 1198 i 1199 i 1200 i 1201 i 1202 i 1203 i 1204 i 1205 i 1206 i 1207 i 1208 i 1209 i 1210 i 1211 i 1212 i 1213 i 1214 i 1215 i 1216 i 1217 i 1218 i 1219 i 1220 i 1221 i 1222 i 1223 i 1224 i 1225 i 1226 i 1227 i 1228 i 1229 i 1230 i 1231 i 1232 i 1233 i 1234 i 1235 i 1236 i 1237 i 1238 i 1239 i 1240 i 1241 i 1242 i 1243 i 1244 i 1245 i 1246 i 1247 i 1248 i 1249 i 1250 i 1251 i 1252 i 1253 i 1254 i 1255 i 1256 i 1257 i 1258 i 1259 i 1260 i 1261 i 1262 i 1263 i 1264 i 1265 i 1266 i 1267 i 1268 i 1269 i 1270 i 1271 i 1272 i 1273 i 1274 i 1275 i 1276 i 1277 i 1278 i 1279 i 1280 i 1281 i 1282 i 1283 i 1284 i 1285 i 1286 i 1287 i 1288 i 1289 i 1290 i 1291 i 1292 i 1293 i 1294 i 1295 i 1296 i 1297 i 1298 i 1299 i 1300 i 1301 i 1302 i 1303 i 1304 i 1305 i 1306 i 1307 i 1308 i 1309 i 1310 i 1311 i 1312 i 1313 i 1314 i 1315 i 1316 i 1317 i 1318 i 1319 i 1320 i 1321 i 1322 i 1323 i 1324 i 1325 i 1326 i 1327 i 1328 i 1329 i 1330 i 1331 i 1332 i 1333 . Learning How Matplotlib plots . In the following cells, I experimented with the ranges for which data to be plotted. Once I figured out putting start:end into a dataframe, I used this for the first function . With an understanding of this property I was able to have the graph from 0 to the value at the specific frame. . plt.plot(x_df[0:100], y_df[0:100]) plt.show() . Messing with labels . When I intially made the velocity and time printouts, I thought about using AnchoredText boxes and having each frame update the boxes. Using this method was not the best as it made the processing of the animation take longer and the text boxes would not overlap. Later I learned how to animate text. . Although not shown here, I later found &lt;a href = https://brushingupscience.com/2016/06/21/matplotlib-animations-the-easy-way/&gt; a very helpful guide that demonstrated animating text and labels &lt;/a&gt;. I did not know that I could incoorperate text changes in the animate fucntion with on matplotlib. I implemented most of the changes of set_text() and ax.text() in the animateGraph() section. It was easier to modify animateGraph() as I could run it to get a output and would not have the same code in 3 other places of the notebook. . Another goal of this section was to experiment with matplotlib to get the outputs to my liking. I learned &lt;a href =https://stackoverflow.com/questions/332289/how-do-you-change-the-size-of-figures-drawn-with-matplotlib&gt; I could change the graph size with&lt;/a&gt; fig.set_size_inches() . fig = plt.figure() fig.set_size_inches(18.5, 10.5) fig.savefig(&#39;test2png.png&#39;, dpi=100) ax = plt.axes(xlim=(0, x_max), ylim=(0, y_max+2)) ax.set(title=&#39;Velocity vs Time&#39;, ylabel=&quot;Velocity&quot;, xlabel=&quot;Time (ms)&quot;) at1 = AnchoredText(x_df[100], prop=dict(size=15), frameon=True, loc=&#39;upper left&#39;, ) at.patch.set_boxstyle(&quot;round,pad=0.3,rounding_size=0.5&quot;) ax.add_artist(at1) at2 = AnchoredText(y_df[100], prop=dict(size=15), frameon=True, loc=&#39;upper right&#39;, ) at2.patch.set_boxstyle(&quot;round,pad=0.3,rounding_size=0.2&quot;) ax.add_artist(at2) at3 = AnchoredText(1.3, prop=dict(size=15), frameon=True, loc=&#39;upper right&#39;, ) at3.patch.set_boxstyle(&quot;round,pad=0.3,rounding_size=0.2&quot;) ax.add_artist(at3) plt.plot(x_df[0:100], y_df[0:100]) plt.show() . print statements . I used these print statements to figure out why my maxes were not being rounded to the nearest whole number. . Initially, I tried using round( #number, #decimal places), from Stackoverflow but the native function concatenated for values such as 20.5 to 20 instead of 21 . Eventually I found a detailed explanation behind the native python round() function from RealPython, in addition to suggested alternative functions and libraries I could use that would solve the issue I was running into. The suggestion was to use ceil from the math libraries. I ended up using ceil from the numpy libraries since I didn&#39;t want to import another library . print(&quot;y_max:&quot;, df[&quot;Time (ms)&quot;].max()) print() print(&quot;y_max ceil rounding:&quot;, np.ceil(df[&quot;Time (ms)&quot;].max())) print() print(&quot;x_max:&quot;, df[&quot;Velocity&quot;].max()) print() print(&quot;x_max ceil rounding:&quot;, np.ceil(df[&quot;Velocity&quot;].max())) print() print(&quot;issue rounded y_max (Time):&quot;, int(round(df[&quot;Time (ms)&quot;].max(),1))) print() print(&quot;issue rounded x_max (Velocity):&quot;, int(round(df[&quot;Velocity&quot;].max(),1))) print() . Having a Dot Tracking Along the Velocity Curve . After making my modifications, I copied my modified version and further adjusted it further titled Having a Dot Tracking Along the Velocity Curve to print the plot first and have a single point track along the plotted graph . Changes from the original Having Line Plotted Through time . added red dot for tracking instead of line used following additional arguments to set the dot linestyle=&#39;none&#39;, marker = &#39;o&#39;, ms = 10, color=&#39;r&#39;, I learned of these parameters from adrian prince-whelan&#39;s demonstration of Making a Matplotlib animation with a transparent background | linestyle=&#39;none&#39; prevents lines from being drawn | marker = &#39;o&#39; sets the dot | ms = 10 sets the dot size | color=&#39;r&#39; sets the dot color | . | messing with video transparency as well from the same post main issue right now is getting the correct save settings | . | changed x linspace value to have the previous frame added conditional where at i=0, i would start at 0 instead of -1 when calling the x_df[i-1] and x_df[i] dataframe entry | . | . x_df = df[&quot;Time (ms)&quot;] y_df = df[&quot;Velocity (m/s)&quot;] x_max = int(np.ceil(df[&quot;Time (ms)&quot;].max())) y_max = int(np.ceil(df[&quot;Velocity (m/s)&quot;].max())) time_seconds = x_df.iloc[-1]/1000 framerate = 60 totalFrames = len(df) # First set up the figure, the axis, and the plot element we want to animate fig = plt.figure() fig.set_size_inches(18.5, 10.5) fig.savefig(&#39;test2png.png&#39;, dpi=100) # transparency settings for the figure #fig.patch.set_alpha(0.) ax = plt.axes(xlim=(0, x_max), ylim=(0, y_max)) ax.set(title=&#39;Velocity vs Time&#39;, ylabel=&quot;Velocity&quot;, xlabel=&quot;Time (ms)&quot;) # transparency settings for the plot area #ax.patch.set_facecolor(&#39;#ababab&#39;) #ax.patch.set_alpha(0) plt.plot(x_df, y_df) line, = plt.plot([], [], linestyle=&#39;none&#39;, marker = &#39;o&#39;, ms = 10, color=&#39;r&#39;) # initialization function: plot the background of each frame def init(): line.set_data([], []) return line, # animation function. This is called sequentially def animate(i): x = x_df[i] #print(&quot;x&quot;) #print(x) y = y_df[i] line.set_data(x, y) return line, # call the animator. blit=True means only re-draw the parts that have changed. anim = animation.FuncAnimation(fig, animate, init_func=init,frames = totalFrames, interval=0, blit=True) # save the animation as an mp4. This requires ffmpeg or mencoder to be # installed. The extra_args ensure that the x264 codec is used, so that # the video can be embedded in html5. You may need to adjust this for # your system: for more information, see # http://matplotlib.sourceforge.net/api/animation_api.html anim.save(&#39;dot_tracking_animation_test.mp4&#39;, fps=framerate, extra_args=[&#39;-vcodec&#39;, &#39;libx264&#39;]) plt.show() . Figuring out Keyerror . While running Dot Tracking Along the Velocity Curve I got a consistent keyerror when plotting i. The following code blocks helped me debug the values of i for each iteration. . I later realized that the keyerror was caused by my totalFrames calculation, which took the last value of the data (milliseconds converted to seconds), multiplied it by the framerate, and was rounded to get total number of frames. Before changing to use the length of the dataframe, the totalFrames was 1333.98, which was rounded to 1334. The keyerror occured because animate(i) uses the frames variable as a index. Once animate reached the length of the dataframe (1319) the animation stopped, but in the animation.FuncAnimation() function continued to pass values in for i. When computing for x, this caused a keyerror since animation.FuncAnimation() would continue to feed values in for i, but in the dataframe no such values existed. . To prevent this from happening, I added a conditional that when we reached the end of the dataframe, we would use the last value of the dataframe. . x_df = df[&quot;Time (ms)&quot;] y_df = df[&quot;Velocity (m/s)&quot;] for i in x_df: x = x_df[i] #print(&quot;i = &quot;,i,&quot;,&quot;, &quot;a = &quot;,a) y = y_df[i] print(&quot;i = &quot;, i, &quot;x = &quot;, x, &quot;,&quot;, &quot;y = &quot;,y) print() . i = 0 x = 0 , y = 0.03 i = 17 x = 284 , y = 0.03 i = 34 x = 567 , y = 2.67 i = 50 x = 834 , y = 1.3 i = 67 x = 1134 , y = 10.33 i = 84 x = 1467 , y = 19.06 i = 100 x = 1734 , y = 20.01 i = 117 x = 2017 , y = 20.01 i = 134 x = 2300 , y = 6.73 i = 150 x = 2567 , y = 1.14 i = 167 x = 2850 , y = 0.0 i = 184 x = 3134 , y = 0.0 i = 200 x = 3400 , y = 0.0 i = 217 x = 3684 , y = 0.0 i = 234 x = 3967 , y = 4.01 i = 250 x = 4234 , y = 10.0 i = 267 x = 4517 , y = 3.24 i = 284 x = 4800 , y = 6.94 i = 300 x = 5067 , y = 4.32 i = 317 x = 5400 , y = 6.66 i = 334 x = 5684 , y = 3.74 i = 350 x = 5950 , y = 5.6 i = 367 x = 6234 , y = 4.38 i = 384 x = 6517 , y = 10.64 i = 400 x = 6784 , y = 15.76 i = 417 x = 7067 , y = 20.07 i = 434 x = 7350 , y = 20.09 i = 450 x = 7617 , y = 0.45 i = 467 x = 7900 , y = 4.64 i = 484 x = 8184 , y = 10.0 i = 500 x = 8450 , y = 10.0 i = 517 x = 8733 , y = 10.0 i = 534 x = 9017 , y = 10.0 i = 550 x = 9283 , y = 6.32 i = 567 x = 9567 , y = 8.59 i = 584 x = 9850 , y = 2.56 i = 600 x = 10117 , y = 3.77 i = 617 x = 10400 , y = 15.77 i = 634 x = 10683 , y = 20.17 i = 650 x = 10950 , y = 20.5 i = 667 x = 11233 , y = 15.99 i = 684 x = 11517 , y = 13.51 i = 700 x = 11783 , y = 10.74 i = 717 x = 12067 , y = 8.74 i = 734 x = 12350 , y = 5.64 i = 750 x = 12617 , y = 8.87 i = 767 x = 12900 , y = 13.08 i = 784 x = 13184 , y = 2.68 i = 800 x = 13450 , y = 0.01 i = 817 x = 13734 , y = 2.56 i = 834 x = 14017 , y = 10.0 i = 850 x = 14284 , y = 10.01 i = 867 x = 14567 , y = 10.0 i = 884 x = 14850 , y = 10.0 i = 900 x = 15117 , y = 10.01 i = 917 x = 15400 , y = 10.0 i = 934 x = 15684 , y = 10.0 i = 967 x = 16234 , y = 10.0 i = 984 x = 16517 , y = 10.02 i = 1000 x = 16784 , y = 13.24 i = 1017 x = 17117 , y = 20.0 i = 1034 x = 17400 , y = 18.88 i = 1050 x = 17667 , y = 18.0 i = 1067 x = 17950 , y = 18.0 i = 1084 x = 18234 , y = 18.01 i = 1100 x = 18500 , y = 18.28 i = 1117 x = 18784 , y = 18.09 i = 1134 x = 19067 , y = 17.36 i = 1150 x = 19334 , y = 17.2 i = 1167 x = 19717 , y = 17.59 i = 1184 x = 20000 , y = 15.97 i = 1200 x = 20267 , y = 15.02 i = 1217 x = 20550 , y = 15.48 i = 1234 x = 20833 , y = 15.09 i = 1250 x = 21100 , y = 15.05 i = 1267 x = 21383 , y = 3.15 i = 1284 x = 21667 , y = 8.25 i = 1300 x = 21933 , y = 5.85 i = 1317 x = 22217 , y = 0.41 . KeyError Traceback (most recent call last) &lt;ipython-input-9-9d1447f8ceb4&gt; in &lt;module&gt; 3 4 for i in x_df: -&gt; 5 x = x_df[i] 6 #print(&#34;i = &#34;,i,&#34;,&#34;, &#34;a = &#34;,a) 7 y = y_df[i] ~/miniconda3/lib/python3.7/site-packages/pandas/core/series.py in __getitem__(self, key) 1069 key = com.apply_if_callable(key, self) 1070 try: -&gt; 1071 result = self.index.get_value(self, key) 1072 1073 if not is_scalar(result): ~/miniconda3/lib/python3.7/site-packages/pandas/core/indexes/base.py in get_value(self, series, key) 4728 k = self._convert_scalar_indexer(k, kind=&#34;getitem&#34;) 4729 try: -&gt; 4730 return self._engine.get_value(s, k, tz=getattr(series.dtype, &#34;tz&#34;, None)) 4731 except KeyError as e1: 4732 if len(self) &gt; 0 and (self.holds_integer() or self.is_boolean()): pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_value() pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_value() pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item() pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.Int64HashTable.get_item() KeyError: 1334 . df.iloc[1318] #len(df) . Time (ms) 22233.00 Velocity 0.41 Name: 1318, dtype: float64 . display(x_df) . display(framerate * time_seconds) totalFrames . 1333.98 . 1334 . Messing with a overlapping graph . while looking for solutions to animate the velocity and time outputs, I stumbled upon a method to use subplots. If I come back to this project, I would want to make a line tracing option, where a line plot is generated, and another plot will overlap . fig = plt.figure() fig.set_size_inches(18.5, 10.5) fig.savefig(&#39;test2png.png&#39;, dpi=100) fig, ax = plt.subplots() ax.plot(x_df, y_df) plt.plot(x_df[0:100], y_df[0:100]) plt.show() . !jupyter nbconvert Animating-Velocity-Graph.ipynb --to html . [NbConvertApp] Converting notebook Animating-Velocity-Graph.ipynb to html [NbConvertApp] Writing 812059 bytes to Animating-Velocity-Graph.html .",
            "url": "https://progressedd.github.io/blog/2020/07/02/Animating-Velocity-Graph.html",
            "relUrl": "/2020/07/02/Animating-Velocity-Graph.html",
            "date": " • Jul 2, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "Generating The Total Nutritional Content For a Week",
            "content": "Table of Contents . 1&nbsp;&nbsp;Generating The Total Nutritional Content For a Week | 2&nbsp;&nbsp;Introduction | 3&nbsp;&nbsp;Loading The Libraries and Dataframes | 4&nbsp;&nbsp;Investigating Dataframes | 5&nbsp;&nbsp;Generating The Code5.1&nbsp;&nbsp;Variables Intialized outside of the loop | 5.2&nbsp;&nbsp;Explanation For The First loop | 5.3&nbsp;&nbsp;Explanation For The Second Loop | 5.4&nbsp;&nbsp;Explanation For The Third Loop | . | 6&nbsp;&nbsp;Generating The Summary | 7&nbsp;&nbsp;Tests Cells | . Introduction . During a conversation with one of my friends, I showed them some of my work with analyzing the protein content of various meats and vegetables. After seeing the analysis, they asked me if I would be interested in analyzing the total caloric intake for a week&#39;s worth of meals. . I learned a great amount concatenating, droping, and manipulating indexes in Pandas. . Loading The Libraries and Dataframes . I was given the following data from a single file, the original file had the tables in seperate sheets. I exported the original file into seperate csv files so that I could load each table into separate dataframes . import pandas as pd . from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;&quot;)) . df_days = pd.read_csv(&#39;Days.csv&#39;) df_ingredients = pd.read_csv(&#39;Ingredients.csv&#39;) df_meals = pd.read_csv(&#39;Meals.csv&#39;) df_results = pd.read_csv(&#39;Results.csv&#39;) . Investigating Dataframes . Before calculating the totals, I wanted to take a look at the dataframes, I transposed the columns in libreoffice such that the Days were columns, and the meals were rows. The majority of Pandas operations manipulate columns rather than rows. . I also transposed the columns for the other dataframes (df_meals and df_ingredients, )as well . df_days . Meal Monday Tuesday Wednesday Thursday Friday Saturday Sunday . 0 Standard breakfast | 1 | 1 | 1 | 0 | 0 | 0 | 0 | . 1 Standard lunch | 1 | 1 | 1 | 1 | 1 | 0 | 0 | . 2 Standard dinner | 1 | 1 | 1 | 0 | 0 | 0 | 0 | . 3 Weekday egg muffin breakfast | 0 | 0 | 0 | 1 | 1 | 0 | 0 | . 4 Weekend egg muffin breakfast | 0 | 0 | 0 | 0 | 0 | 1 | 2 | . 5 Seafood dinner | 0 | 0 | 0 | 0 | 0 | 1 | 1 | . 6 Pasta lunch | 0 | 0 | 0 | 0 | 0 | 1 | 1 | . 7 Rice and pinto beans dinner | 0 | 0 | 0 | 1 | 1 | 0 | 0 | . 8 Mango dessert | 1 | 1 | 1 | 1 | 1 | 1 | 1 | . 9 Vanilla soymilk drink | 1 | 1 | 1 | 1 | 1 | 0 | 0 | . df_meals . Meal Standard breakfast Standard lunch Standard dinner Weekday egg muffin breakfast Weekend egg muffin breakfast Seafood dinner Pasta lunch Rice and pinto beans dinner Mango dessert Vanilla soymilk drink . 0 Brown rice | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | . 1 Whole wheat bread | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 Whole wheat cereal | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 Whole wheat muffin | 0 | 0 | 0 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | . 4 Whole wheat pasta | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 5 Boneless skinless chicken breast | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 6 Salmon | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 7 Pinto beans | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | . 8 Black beans | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 9 Peanut butter | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 10 Eggs | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | . 11 Vanilla soymilk | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 12 Unsweet soymilk | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 13 Spinach | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 14 Broccoli | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | . 15 Carrots | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 16 Tomatoes | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 17 Banana | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | . 18 Strawberries | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 19 Mangos | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 20 Strawberry jam | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 21 Marinara sauce | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 22 American cheese | 0 | 0 | 0 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | . 23 Olive oil | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 24 Salt | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . df_ingredients . Item Brand and style Quantity Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium . 0 Brown rice | 365 Everyday Value, long grain | 150g | 570 | 4.5 | 0.0 | 0.0 | 0.0 | 0 | 117 | 0 | 12 | 6 | 0 | . 1 Whole wheat bread | Brownberry, whole grains | 2 slices | 220 | 4.0 | 0.0 | 0.0 | 2.0 | 0 | 42 | 6 | 8 | 6 | 320 | . 2 Whole wheat cereal | 365 Everyday Value, wheat squares | 60g | 220 | 1.0 | 0.0 | 0.0 | 0.0 | 0 | 47 | 0 | 7 | 5 | 5 | . 3 Whole wheat muffin | Aunt Millie&#39;s, english muffins | 1 muffin | 110 | 1.5 | 0.0 | 0.0 | 0.5 | 0 | 21 | 1 | 6 | 3 | 180 | . 4 Whole wheat pasta | Barilla, whole grain penne | 4oz | 360 | 3.0 | 0.0 | 0.0 | 0.0 | 0 | 78 | 2 | 16 | 14 | 0 | . 5 Boneless skinless chicken breast | NaN | 3oz | 135 | 3.0 | 1.0 | 1.0 | 0.5 | 100 | 0 | 0 | 28 | 0 | 40 | . 6 Salmon | NaN | 6oz | 270 | 9.0 | 1.5 | 3.0 | 1.5 | 95 | 0 | 0 | 43 | 0 | 690 | . 7 Pinto beans | 365 Everyday Value | 455g | 350 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 67 | 2 | 25 | 28 | 18 | . 8 Black beans | 365 Everyday Value | 455g | 385 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 74 | 3 | 25 | 25 | 35 | . 9 Peanut butter | Jif, creamy | 33g | 190 | 16.0 | 3.5 | 0.0 | 0.0 | 0 | 8 | 3 | 7 | 2 | 140 | . 10 Eggs | Grade A large brown | 2 eggs | 180 | 14.0 | 4.0 | 6.0 | 3.0 | 370 | 1 | 0 | 12 | 0 | 190 | . 11 Vanilla soymilk | Silk, vanilla | 1 cup | 100 | 3.5 | 0.5 | 0.5 | 2.0 | 0 | 11 | 9 | 6 | 1 | 85 | . 12 Unsweet soymilk | Silk, unsweet vanilla | 1 cup | 80 | 4.0 | 0.5 | 1.0 | 2.5 | 0 | 4 | 1 | 7 | 2 | 70 | . 13 Spinach | NaN | 60g | 15 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 2 | 0 | 2 | 1 | 50 | . 14 Broccoli | Essential Everyday, frozen | 2 cups | 60 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 8 | 4 | 4 | 4 | 40 | . 15 Carrots | Green Giant, baby cut Carrots | 4.5oz | 55 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 12 | 8 | 1 | 3 | 98 | . 16 Tomatoes | Garden Ripe, grape tomatoes | 100g | 95 | 0.5 | 0.0 | 0.0 | 0.0 | 0 | 6 | 0 | 1 | 2 | 6 | . 17 Banana | NaN | 1 banana | 110 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 29 | 15 | 1 | 3 | 1 | . 18 Strawberries | Nature Blessed, frozen | 1 cup | 45 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 12 | 6 | 0 | 3 | 3 | . 19 Mangos | Nature Blessed, frozen | 1 cup | 75 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 20 | 19 | 1 | 1 | 1 | . 20 Strawberry jam | Smucker&#39;s, squeeze | 20g | 50 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 13 | 12 | 0 | 0 | 0 | . 21 Marinara sauce | Ragu Simply, chunky | 0.25 cups | 35 | 1.0 | 0.0 | 0.0 | 0.0 | 0 | 6 | 4 | 1 | 1 | 245 | . 22 American cheese | Dutch Farms, american singles | 1 slice | 70 | 5.0 | 0.0 | 0.0 | 0.0 | 0 | 2 | 0 | 3 | 0 | 300 | . 23 Olive oil | 365 Everyday Value, extra virgin | 1 tbsp | 120 | 14.0 | 2.0 | 0.0 | 0.0 | 0 | 0 | 0 | 0 | 0 | 0 | . 24 Salt | Morton, coarse kosher | 0.25 tsp | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0 | 0 | 0 | 0 | 0 | 480 | . df_results . Day Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium . 0 Monday | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 1 Tuesday | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 Wednesday | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 3 Thursday | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 4 Friday | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 5 Saturday | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 6 Sunday | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . Generating The Code . After looking at the raw data and transposing the data, I decided to use multiple for loops to solve the problem. . My general plan followed . get meals for each day make a dataframe for each day where there is 1 | . | get foods for each meal | add each food to a list | add each ingredient to a list | store sum in results | The following code iterates through all the dataframesdf_days,df_meals, and df_ingredients intialized in the previous step to generate a dataframe with all the individual ingredients for all the days . Variables Intialized outside of the loop . meal_list, food_list, and ingredient_list are initially empty, we will set values for them once the loop begins. | days is a list of the days of the week, we will use to keep track of the day. Furthermore, we will use days to specify which column we want python to focus on | df_summary is a empty dataframe we will append the ingredients to | counter is a integer variable that that is used as a index when iterating the days list, it is set to be -1 to offset the starting column of df_days | . all print() and display() statements were used to view the variables as the loop iterated . Explanation For The First loop . The first for loop iterates accross the columns of df_days dataframe in the first loop, generates a list of meals consumed in a day . column_title is the title of the column from df_days | day is the current day | df_day_non_zero is df_days, but all values greater than 0 | meal_list uses df_day_non_zero but has only the meals quantity for a single day, .reset_index() resets the index as filtering for the day changes the index, .drop(columns = &quot;index&quot;) drops the index created by .reset_index() | . Explanation For The Second Loop . The second for loop iterates accross the columns of meal_list dataframe generated for a day from the previous step, generates a list of foods consumed in meal . meal_item is the title of the column from df_meals | df_empty is a empty temporary dataframe that we generate each iteration | food_quantity stores the number of meal consumed in a day | df_meal_day is df_meals, but all values greater than 0 | food_list dataframe that uses df_meal_day to get the meal item for a particular meal | food_list[meal_item] dataframe that multiplies the specific quantity by the food_quantity | . Explanation For The Third Loop . The third for loop iterates through the food_list dataframe generated for a meal from the previous step, concatenates the ingredients to df_empty dataframe, uses a conditional that will multiply the nutritional value by the number of values consumed . df_current_ingredient is df_ingredients but when the food item matches the value from `food_list | ingredient_quantity stores the number of meal items consumed in a single meal | . After the third for loop, we will concatenate all the ingredients per meal into a single dataframe with two columns for the day and meal the item was consumed from. When creating new columns using the df[&quot;new column&quot;] = value Pandas will add the new column to the end of the columns. . meal_list = [] food_list = [] ingredient_list = [] days = [&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;] df_summary = pd.DataFrame() counter = -1 # loop through days table for column_title in df_days: # get meals for each day # make a dataframe for each day where there is 1 day = days[counter] df_day_non_zero = df_days[df_days[day] &gt; 0] meal_list = df_day_non_zero[[&quot;Meal&quot;,day]].reset_index().drop(columns = &quot;index&quot;) #print statements for debugging and tracking variable values #meal_quantity = meal_list[day][] #print(&quot;days[i]&quot;) #display(days[counter]) #print(&quot;df_day&quot;) #display(df_day) #print(&quot;column_title&quot;) #display(column_title) #print(&quot;meal_list&quot;) #display(meal_list) food_counter = 0 # get foods for each meal for meal_item in meal_list[&quot;Meal&quot;]: #print(&quot;meal_item&quot;) #display(meal_item) df_empty = pd.DataFrame() food_quantity = meal_list[day][food_counter] #print(&quot;food_quantity multiplication factor&quot;) #display(food_quantity) df_meal_day = df_meals[df_meals[meal_item] &gt;= 1] food_list = df_meal_day[[&quot;Meal&quot;, meal_item]].reset_index().drop(columns = &quot;index&quot;) #print(&quot;food_list before multiplication&quot;) #display(food_list) food_list[meal_item] = food_list[meal_item]*food_quantity # multiplies the list by the number of times from days ie if someone eats 2 meals, the meal item will be multipled by 2 #print(&quot;food_list after multiplication&quot;) #display(food_list) # add each food to a list for food_list_index in range(len(food_list)): #print(&quot;food_list&quot;) #display(food_list) #print(&quot;food_list_index&quot;) #display(food_list_index) df_current_ingredient = df_ingredients[df_ingredients[&quot;Item&quot;] == food_list[&quot;Meal&quot;][food_list_index]] ingredient_quantity = food_list[meal_item][food_list_index] #print(&quot;df_current_ingredient&quot;) #display(df_current_ingredient) #print(&quot;food_list[Meal][food_list_index]&quot;) #display(food_list[&quot;Meal&quot;][food_list_index]) #print(&quot;ingredient_quantity&quot;) #display(ingredient_quantity) if(ingredient_quantity&gt;=1): df_empty = pd.concat([df_empty, df_current_ingredient * ingredient_quantity]) else: df_empty = pd.concat([df_empty, df_current_ingredient]) #display(df_empty) # add each ingredient #need to make a running total, and then append to a seperate df for each day df_empty.loc[column_title,:] = df_empty[[&quot;Item&quot;,&quot;Calories&quot;, &quot;Total Fat&quot;, &quot;Saturated Fat&quot;, &quot;Monounsaturated Fat&quot;, &quot;Polyunsaturated Fat&quot;, &quot;Cholesterol&quot;, &quot;Carbs&quot;, &quot;Sugar&quot;,&quot;Protein&quot;, &quot;Fiber&quot;, &quot;Sodium&quot;]].sum(axis=0) df_empty[&quot;Meal&quot;] = meal_item #display(df_empty) df_summary = pd.concat([df_summary, df_empty.tail(1)]) #display(df_summary) food_counter+=1 counter+=1 # store sum in results df_summary = df_summary.reset_index().rename(columns = {&quot;index&quot; : &quot;Day&quot;}) df_summary . Day Item Brand and style Quantity Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium Meal . 0 Meal | Whole wheat muffinWhole wheat muffinWhole whea... | NaN | NaN | 1300.0 | 54.0 | 8.0 | 12.0 | 8.0 | 740.0 | 152.0 | 34.0 | 62.0 | 18.0 | 2302.0 | Weekend egg muffin breakfast | . 1 Meal | SalmonBroccoliSalt | NaN | NaN | 330.0 | 9.0 | 1.5 | 3.0 | 1.5 | 95.0 | 8.0 | 4.0 | 47.0 | 4.0 | 1210.0 | Seafood dinner | . 2 Meal | Whole wheat pastaCarrotsMarinara sauce | NaN | NaN | 450.0 | 4.0 | 0.0 | 0.0 | 0.0 | 0.0 | 96.0 | 14.0 | 18.0 | 18.0 | 343.0 | Pasta lunch | . 3 Meal | Mangos | NaN | NaN | 75.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 20.0 | 19.0 | 1.0 | 1.0 | 1.0 | Mango dessert | . 4 Monday | Whole wheat cerealUnsweet soymilkBananaStrawbe... | NaN | NaN | 455.0 | 5.0 | 0.5 | 1.0 | 2.5 | 0.0 | 92.0 | 22.0 | 15.0 | 13.0 | 79.0 | Standard breakfast | . 5 Monday | Whole wheat breadPeanut butterCarrotsStrawberr... | NaN | NaN | 515.0 | 20.0 | 3.5 | 0.0 | 2.0 | 0.0 | 75.0 | 29.0 | 16.0 | 11.0 | 558.0 | Standard lunch | . 6 Monday | Boneless skinless chicken breastSpinachTomatoe... | NaN | NaN | 365.0 | 17.5 | 3.0 | 1.0 | 0.5 | 100.0 | 8.0 | 0.0 | 31.0 | 3.0 | 576.0 | Standard dinner | . 7 Monday | Mangos | NaN | NaN | 75.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 20.0 | 19.0 | 1.0 | 1.0 | 1.0 | Mango dessert | . 8 Monday | Vanilla soymilk | NaN | NaN | 100.0 | 3.5 | 0.5 | 0.5 | 2.0 | 0.0 | 11.0 | 9.0 | 6.0 | 1.0 | 85.0 | Vanilla soymilk drink | . 9 Tuesday | Whole wheat cerealUnsweet soymilkBananaStrawbe... | NaN | NaN | 455.0 | 5.0 | 0.5 | 1.0 | 2.5 | 0.0 | 92.0 | 22.0 | 15.0 | 13.0 | 79.0 | Standard breakfast | . 10 Tuesday | Whole wheat breadPeanut butterCarrotsStrawberr... | NaN | NaN | 515.0 | 20.0 | 3.5 | 0.0 | 2.0 | 0.0 | 75.0 | 29.0 | 16.0 | 11.0 | 558.0 | Standard lunch | . 11 Tuesday | Boneless skinless chicken breastSpinachTomatoe... | NaN | NaN | 365.0 | 17.5 | 3.0 | 1.0 | 0.5 | 100.0 | 8.0 | 0.0 | 31.0 | 3.0 | 576.0 | Standard dinner | . 12 Tuesday | Mangos | NaN | NaN | 75.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 20.0 | 19.0 | 1.0 | 1.0 | 1.0 | Mango dessert | . 13 Tuesday | Vanilla soymilk | NaN | NaN | 100.0 | 3.5 | 0.5 | 0.5 | 2.0 | 0.0 | 11.0 | 9.0 | 6.0 | 1.0 | 85.0 | Vanilla soymilk drink | . 14 Wednesday | Whole wheat cerealUnsweet soymilkBananaStrawbe... | NaN | NaN | 455.0 | 5.0 | 0.5 | 1.0 | 2.5 | 0.0 | 92.0 | 22.0 | 15.0 | 13.0 | 79.0 | Standard breakfast | . 15 Wednesday | Whole wheat breadPeanut butterCarrotsStrawberr... | NaN | NaN | 515.0 | 20.0 | 3.5 | 0.0 | 2.0 | 0.0 | 75.0 | 29.0 | 16.0 | 11.0 | 558.0 | Standard lunch | . 16 Wednesday | Boneless skinless chicken breastSpinachTomatoe... | NaN | NaN | 365.0 | 17.5 | 3.0 | 1.0 | 0.5 | 100.0 | 8.0 | 0.0 | 31.0 | 3.0 | 576.0 | Standard dinner | . 17 Wednesday | Mangos | NaN | NaN | 75.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 20.0 | 19.0 | 1.0 | 1.0 | 1.0 | Mango dessert | . 18 Wednesday | Vanilla soymilk | NaN | NaN | 100.0 | 3.5 | 0.5 | 0.5 | 2.0 | 0.0 | 11.0 | 9.0 | 6.0 | 1.0 | 85.0 | Vanilla soymilk drink | . 19 Thursday | Whole wheat breadPeanut butterCarrotsStrawberr... | NaN | NaN | 515.0 | 20.0 | 3.5 | 0.0 | 2.0 | 0.0 | 75.0 | 29.0 | 16.0 | 11.0 | 558.0 | Standard lunch | . 20 Thursday | Whole wheat muffinEggsBananaAmerican cheese | NaN | NaN | 470.0 | 20.5 | 4.0 | 6.0 | 3.5 | 370.0 | 53.0 | 16.0 | 22.0 | 6.0 | 671.0 | Weekday egg muffin breakfast | . 21 Thursday | Brown ricePinto beansBroccoli | NaN | NaN | 980.0 | 4.5 | 0.0 | 0.0 | 0.0 | 0.0 | 192.0 | 6.0 | 41.0 | 38.0 | 58.0 | Rice and pinto beans dinner | . 22 Thursday | Mangos | NaN | NaN | 75.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 20.0 | 19.0 | 1.0 | 1.0 | 1.0 | Mango dessert | . 23 Thursday | Vanilla soymilk | NaN | NaN | 100.0 | 3.5 | 0.5 | 0.5 | 2.0 | 0.0 | 11.0 | 9.0 | 6.0 | 1.0 | 85.0 | Vanilla soymilk drink | . 24 Friday | Whole wheat breadPeanut butterCarrotsStrawberr... | NaN | NaN | 515.0 | 20.0 | 3.5 | 0.0 | 2.0 | 0.0 | 75.0 | 29.0 | 16.0 | 11.0 | 558.0 | Standard lunch | . 25 Friday | Whole wheat muffinEggsBananaAmerican cheese | NaN | NaN | 470.0 | 20.5 | 4.0 | 6.0 | 3.5 | 370.0 | 53.0 | 16.0 | 22.0 | 6.0 | 671.0 | Weekday egg muffin breakfast | . 26 Friday | Brown ricePinto beansBroccoli | NaN | NaN | 980.0 | 4.5 | 0.0 | 0.0 | 0.0 | 0.0 | 192.0 | 6.0 | 41.0 | 38.0 | 58.0 | Rice and pinto beans dinner | . 27 Friday | Mangos | NaN | NaN | 75.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 20.0 | 19.0 | 1.0 | 1.0 | 1.0 | Mango dessert | . 28 Friday | Vanilla soymilk | NaN | NaN | 100.0 | 3.5 | 0.5 | 0.5 | 2.0 | 0.0 | 11.0 | 9.0 | 6.0 | 1.0 | 85.0 | Vanilla soymilk drink | . 29 Saturday | Whole wheat muffinWhole wheat muffinEggsBanana... | NaN | NaN | 650.0 | 27.0 | 4.0 | 6.0 | 4.0 | 370.0 | 76.0 | 17.0 | 31.0 | 9.0 | 1151.0 | Weekend egg muffin breakfast | . 30 Saturday | SalmonBroccoliSalt | NaN | NaN | 330.0 | 9.0 | 1.5 | 3.0 | 1.5 | 95.0 | 8.0 | 4.0 | 47.0 | 4.0 | 1210.0 | Seafood dinner | . 31 Saturday | Whole wheat pastaCarrotsMarinara sauce | NaN | NaN | 450.0 | 4.0 | 0.0 | 0.0 | 0.0 | 0.0 | 96.0 | 14.0 | 18.0 | 18.0 | 343.0 | Pasta lunch | . 32 Saturday | Mangos | NaN | NaN | 75.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 20.0 | 19.0 | 1.0 | 1.0 | 1.0 | Mango dessert | . 33 Sunday | Whole wheat muffinWhole wheat muffinWhole whea... | NaN | NaN | 1300.0 | 54.0 | 8.0 | 12.0 | 8.0 | 740.0 | 152.0 | 34.0 | 62.0 | 18.0 | 2302.0 | Weekend egg muffin breakfast | . 34 Sunday | SalmonBroccoliSalt | NaN | NaN | 330.0 | 9.0 | 1.5 | 3.0 | 1.5 | 95.0 | 8.0 | 4.0 | 47.0 | 4.0 | 1210.0 | Seafood dinner | . 35 Sunday | Whole wheat pastaCarrotsMarinara sauce | NaN | NaN | 450.0 | 4.0 | 0.0 | 0.0 | 0.0 | 0.0 | 96.0 | 14.0 | 18.0 | 18.0 | 343.0 | Pasta lunch | . 36 Sunday | Mangos | NaN | NaN | 75.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 20.0 | 19.0 | 1.0 | 1.0 | 1.0 | Mango dessert | . Generating The Summary . using the grouping function in Pandas, we can genereate a summary dataframe . df_grouped = df_summary[4:].groupby([&#39;Day&#39;]).sum().reindex(days) df_grouped . Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium . Day . Monday 1510.0 | 46.0 | 7.5 | 2.5 | 7.0 | 100.0 | 206.0 | 79.0 | 69.0 | 29.0 | 1299.0 | . Tuesday 1510.0 | 46.0 | 7.5 | 2.5 | 7.0 | 100.0 | 206.0 | 79.0 | 69.0 | 29.0 | 1299.0 | . Wednesday 1510.0 | 46.0 | 7.5 | 2.5 | 7.0 | 100.0 | 206.0 | 79.0 | 69.0 | 29.0 | 1299.0 | . Thursday 2140.0 | 48.5 | 8.0 | 6.5 | 7.5 | 370.0 | 351.0 | 79.0 | 86.0 | 57.0 | 1373.0 | . Friday 2140.0 | 48.5 | 8.0 | 6.5 | 7.5 | 370.0 | 351.0 | 79.0 | 86.0 | 57.0 | 1373.0 | . Saturday 1505.0 | 40.0 | 5.5 | 9.0 | 5.5 | 465.0 | 200.0 | 54.0 | 97.0 | 32.0 | 2705.0 | . Sunday 2155.0 | 67.0 | 9.5 | 15.0 | 9.5 | 835.0 | 276.0 | 71.0 | 128.0 | 41.0 | 3856.0 | . Tests Cells . The following cells were used to test solutions I tried when generating the for loop. . It was easier to run these on individual cells rather than in the nested for loop and print statements . df_test = df_days[df_days[&quot;Thursday&quot;] == 1] #df_test[[&quot;Meal&quot;,&quot;Monday&quot;]] df_test print(df_days.columns.values[1:8]) . [&#39;Monday&#39; &#39;Tuesday&#39; &#39;Wednesday&#39; &#39;Thursday&#39; &#39;Friday&#39; &#39;Saturday&#39; &#39;Sunday&#39;] . df_test2 = df_meals[df_meals[&quot;Standard breakfast&quot;] ==1] df_test2 . Meal Standard breakfast Standard lunch Standard dinner Weekday egg muffin breakfast Weekend egg muffin breakfast Seafood dinner Pasta lunch Rice and pinto beans dinner Mango dessert Vanilla soymilk drink . 2 Whole wheat cereal | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 12 Unsweet soymilk | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 17 Banana | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | . 18 Strawberries | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . df_test2[[&quot;Meal&quot;]] . Meal . 2 Whole wheat cereal | . 12 Unsweet soymilk | . 17 Banana | . 18 Strawberries | . ingredient_list = [] ingredient_list = df_test2[[&quot;Meal&quot;]].reset_index().drop(columns = &quot;index&quot;) ingredient_list . Meal . 0 Whole wheat cereal | . 1 Unsweet soymilk | . 2 Banana | . 3 Strawberries | . len(ingredient_list) . 4 . df_test3 = df_ingredients[df_ingredients[&quot;Item&quot;] == ingredient_list[&quot;Meal&quot;][0]] df_test3 . Item Brand and style Quantity Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium . 2 Whole wheat cereal | 365 Everyday Value, wheat squares | 60g | 220 | 1.0 | 0.0 | 0.0 | 0.0 | 0 | 47 | 0 | 7 | 5 | 5 | . df_test4 = df_ingredients[df_ingredients[&quot;Item&quot;] == ingredient_list[&quot;Meal&quot;][1]] df_test4 . Item Brand and style Quantity Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium . 12 Unsweet soymilk | Silk, unsweet vanilla | 1 cup | 80 | 4.0 | 0.5 | 1.0 | 2.5 | 0 | 4 | 1 | 7 | 2 | 70 | . df_test5 = df_test3.append(df_test4) df_test5 . Item Brand and style Quantity Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium . 2 Whole wheat cereal | 365 Everyday Value, wheat squares | 60g | 220 | 1.0 | 0.0 | 0.0 | 0.0 | 0 | 47 | 0 | 7 | 5 | 5 | . 12 Unsweet soymilk | Silk, unsweet vanilla | 1 cup | 80 | 4.0 | 0.5 | 1.0 | 2.5 | 0 | 4 | 1 | 7 | 2 | 70 | . df_test5.loc[&#39;Total&#39;,:]= df_test5.sum(axis=0) . df_test5 . Item Brand and style Quantity Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium . 2 Whole wheat cereal | 365 Everyday Value, wheat squares | 60g | 220.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 47.0 | 0.0 | 7.0 | 5.0 | 5.0 | . 12 Unsweet soymilk | Silk, unsweet vanilla | 1 cup | 80.0 | 4.0 | 0.5 | 1.0 | 2.5 | 0.0 | 4.0 | 1.0 | 7.0 | 2.0 | 70.0 | . Total Whole wheat cerealUnsweet soymilkWhole wheat c... | 365 Everyday Value, wheat squaresSilk, unsweet... | 60g1 cup60g1 cup | 600.0 | 10.0 | 1.0 | 2.0 | 5.0 | 0.0 | 102.0 | 2.0 | 28.0 | 14.0 | 150.0 | . df_test5 . Item Brand and style Quantity Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium . 2 Whole wheat cereal | 365 Everyday Value, wheat squares | 60g | 220.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | 47.0 | 0.0 | 7.0 | 5.0 | 5.0 | . 12 Unsweet soymilk | Silk, unsweet vanilla | 1 cup | 80.0 | 4.0 | 0.5 | 1.0 | 2.5 | 0.0 | 4.0 | 1.0 | 7.0 | 2.0 | 70.0 | . Total Whole wheat cerealUnsweet soymilkWhole wheat c... | 365 Everyday Value, wheat squaresSilk, unsweet... | 60g1 cup60g1 cup | 600.0 | 10.0 | 1.0 | 2.0 | 5.0 | 0.0 | 102.0 | 2.0 | 28.0 | 14.0 | 150.0 | . df_meal_day = df_meals[df_meals[&quot;Weekend egg muffin breakfast&quot;] &gt;= 1] display(df_meal_day) display(df_meals) . Meal Standard breakfast Standard lunch Standard dinner Weekday egg muffin breakfast Weekend egg muffin breakfast Seafood dinner Pasta lunch Rice and pinto beans dinner Mango dessert Vanilla soymilk drink . 3 Whole wheat muffin | 0 | 0 | 0 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | . 10 Eggs | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | . 17 Banana | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | . 22 American cheese | 0 | 0 | 0 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | . Meal Standard breakfast Standard lunch Standard dinner Weekday egg muffin breakfast Weekend egg muffin breakfast Seafood dinner Pasta lunch Rice and pinto beans dinner Mango dessert Vanilla soymilk drink . 0 Brown rice | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | . 1 Whole wheat bread | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 2 Whole wheat cereal | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 3 Whole wheat muffin | 0 | 0 | 0 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | . 4 Whole wheat pasta | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 5 Boneless skinless chicken breast | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 6 Salmon | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . 7 Pinto beans | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | . 8 Black beans | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 9 Peanut butter | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 10 Eggs | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | . 11 Vanilla soymilk | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | . 12 Unsweet soymilk | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 13 Spinach | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 14 Broccoli | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | . 15 Carrots | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 16 Tomatoes | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 17 Banana | 1 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | . 18 Strawberries | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 19 Mangos | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | . 20 Strawberry jam | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 21 Marinara sauce | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | . 22 American cheese | 0 | 0 | 0 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | . 23 Olive oil | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 24 Salt | 0 | 0 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | . food_list = df_meal_day[[&quot;Meal&quot;, &quot;Standard breakfast&quot;]].reset_index().drop(columns = &quot;index&quot;) food_list . Meal Standard breakfast . 0 Mangos | 0 | . df_day[[&quot;Meal&quot;, &quot;Monday&quot;]] . Meal Monday . 4 Weekend egg muffin breakfast | 0 | . 5 Seafood dinner | 0 | . 6 Pasta lunch | 0 | . 8 Mango dessert | 1 | . meal_list . Meal Sunday . 0 Weekend egg muffin breakfast | 2 | . 1 Seafood dinner | 1 | . 2 Pasta lunch | 1 | . 3 Mango dessert | 1 | . df_test6 = meal_list[meal_list[&quot;Sunday&quot;]&gt;1][&quot;Sunday&quot;] df_test6 . 0 2 Name: Sunday, dtype: int64 . df_test7 = meal_list[&quot;Meal&quot;][meal_list[&quot;Sunday&quot;]==2] df_test7 . 0 Weekend egg muffin breakfast Name: Meal, dtype: object . cats = [ &#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;, &#39;Saturday&#39;, &#39;Sunday&#39;] df_weekday = df_summary[4:].groupby([&#39;Day&#39;]).sum().reindex(cats) df_weekday . Calories Total Fat Saturated Fat Monounsaturated Fat Polyunsaturated Fat Cholesterol Carbs Sugar Protein Fiber Sodium . Day . Monday 1510.0 | 46.0 | 7.5 | 2.5 | 7.0 | 100.0 | 206.0 | 79.0 | 69.0 | 29.0 | 1299.0 | . Tuesday 1510.0 | 46.0 | 7.5 | 2.5 | 7.0 | 100.0 | 206.0 | 79.0 | 69.0 | 29.0 | 1299.0 | . Wednesday 1510.0 | 46.0 | 7.5 | 2.5 | 7.0 | 100.0 | 206.0 | 79.0 | 69.0 | 29.0 | 1299.0 | . Thursday 2140.0 | 48.5 | 8.0 | 6.5 | 7.5 | 370.0 | 351.0 | 79.0 | 86.0 | 57.0 | 1373.0 | . Friday 2140.0 | 48.5 | 8.0 | 6.5 | 7.5 | 370.0 | 351.0 | 79.0 | 86.0 | 57.0 | 1373.0 | . Saturday 1505.0 | 40.0 | 5.5 | 9.0 | 5.5 | 465.0 | 200.0 | 54.0 | 97.0 | 32.0 | 2705.0 | . Sunday 2155.0 | 67.0 | 9.5 | 15.0 | 9.5 | 835.0 | 276.0 | 71.0 | 128.0 | 41.0 | 3856.0 | .",
            "url": "https://progressedd.github.io/blog/2020/05/18/Nutrition-For-Week-Analysis.html",
            "relUrl": "/2020/05/18/Nutrition-For-Week-Analysis.html",
            "date": " • May 18, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Verifying a 3 Meter Walk",
            "content": "Table of Contents . 1&nbsp;&nbsp;Verifying a 3 Meter Walk | 2&nbsp;&nbsp;Introduction | 3&nbsp;&nbsp;Import libraries for processing | 4&nbsp;&nbsp;General Function That Calculates and Outputs Differences | 5&nbsp;&nbsp;Functions For Calculating Differences | 6&nbsp;&nbsp;The Actual Function in use6.0.1&nbsp;&nbsp;IF YOU GET A KeyError, THAT MEANS THE MARKER YOU INPUTTED DOES NOT EXIST ON IN THE TSV COLUMNS | . | . | 7&nbsp;&nbsp;Sample Data Tests | 8&nbsp;&nbsp;Test cases for the function | 9&nbsp;&nbsp;Testing ways to import the data9.1&nbsp;&nbsp;Checking The Outputs of filenames and dataframes | . | . Introduction . In my research with the Neuroscience of Dance in Health and Disability Laboratory, I was tasked with verifying that the recorded section of motion capture data of the participant had truely traveled 3 meters. We chose 3 meters as it is the best sampled portion of the walk for analysis and was consistent with past studies. I wrote this in hopes that this would be used in future studies so that a researcher would not need to calculate by hand when verifying and picking a section of the recording. . from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;&quot;)) . Import libraries for processing . pandas for the dataframes | random for simulation | glob for importing files | . import pandas as pd import random import glob . General Function That Calculates and Outputs Differences . In this function, all files in with the tsv extension in the same directory as this notebook file are loaded into a list called filenames, after being loaded into the list, the first for loop iterates through the filenames list and makes a dataframes list with all the tsv files converted into Pandas DataFrames. . The Function takes an input called marker, which is used to indicate which column we are interested in. . The we use the second loop to iterate through the dataframes list. In each iteration, the difference between the first and last indicies of right heel is calculated and stored in the diff variable. Next we initialize a dictionary d that has the current filename (filenames[i]) and the calculated difference (diff). At the end of the iteration, the dictionary entry will be appended to a list called data. . At the end of the function , the DataFrame df_all is returned giving a DataFrame with the file name and calculated displacement for each row . def walkDisplacement(marker): filenames = glob.glob(&quot;*.tsv&quot;) dataframes = [] data = [] allowedMarkers = [] # going to have a if statement to check if marker variable exists, otherwise python will just yell for f in filenames: dataframes.append(pd.read_csv(f,delimiter=&#39; t&#39;,encoding=&#39;utf-8&#39;)) for i in range(len(dataframes)): diff = metercalc(dataframes[i],marker) d = {&quot;Filename&quot;: str(filenames[i]),&quot;Difference (meters)&quot; : diff} data.append(d) df_all = pd.DataFrame(data) return df_all . Functions For Calculating Differences . This is the function calculates the difference of the first and last rows of a dataframe. . The inputs are a dataframe and a string for the column we are interested in. I called it marker because in our case we are dealing with marker values . def difference(df,marker): first = df[marker].iloc[0] last = df[marker].iloc[-1] diff = last - first return diff . This function calculates the difference of the first and last rows of a the walk. . The function is an adaptation of the logic Andrea wrote for calculating the amount of distance walked based on the position data . I added a second conditional for cases where the difference is negative . Example for TDP MS W MRI 001 10MWT2014223mmatlab.qtm . Get the starting position xi (=2717.08) of the right heel | Calculate the difference d by subtracting 3000mm from xi (because 3m=3000mm) d=2717.08-3000=-282.92mm | Get the finish position at the end of the crop section of the right heel xf (=-321.77) | If xf doesn’t equal d then check the exact difference. For example d=-282.92mm and xf=-321.77 get the difference between them –38.85. | The exact difference will now be 3000+38.85=3038.85mm which equals 3.038m | def metercalc(df,marker): xi = df[marker].iloc[0] d = xi - 3000 xf = df[marker].iloc[-1] if (xf != d): # checks if xi is equal to xf diff = xf - d # if not then it will take the difference between the two values if(diff &lt; 0): # checks if the difference is negative exact = 3000 - (diff) return exact/1000 # will return flipped difference if negative return diff/1000 # will return the positive difference . The Actual Function in use . To use walkDisplacement, place all raw tsv files into the same directory as this notebook, next, input the column name of the marker you are interested in. The following example will use the right heel . walkDisplacement(&quot;right heel&quot;) . Filename Difference (meters) . 0 test1.tsv | 3.859 | . 1 test2.tsv | 2.314 | . 2 test3.tsv | 3.073 | . 3 test4.tsv | 0.760 | . IF YOU GET A KeyError, THAT MEANS THE MARKER YOU INPUTTED DOES NOT EXIST ON IN THE TSV COLUMNS . Sample Data Tests . I made a sample data set to test the initial difference function . numbers =[1,2,3,4,5,6,7,8,9] df_n = pd.DataFrame({&quot;right heel&quot;: numbers}) df_n . right heel . 0 1 | . 1 2 | . 2 3 | . 3 4 | . 4 5 | . 5 6 | . 6 7 | . 7 8 | . 8 9 | . This was a simulated data set I generated to test the metercalc function for values over 0 . data = [] for i in range(10): lower = random.randint(1000,6000) d = {&quot;right heel&quot;: lower} data.append(d) sim = pd.DataFrame(data) sim . right heel . 0 5778 | . 1 5214 | . 2 3172 | . 3 5992 | . 4 5218 | . 5 4846 | . 6 5449 | . 7 1962 | . 8 1267 | . 9 1334 | . Andrea&#39;s example . ae = [2717.08,-321.77] df_ae = pd.DataFrame({&quot;right heel&quot; : ae}) df_ae . right heel . 0 2717.08 | . 1 -321.77 | . These lines of code were to test out the .iloc function, I tried it here first before implementing it to the difference function . first = df_n[&quot;right heel&quot;].iloc[0] last = df_n[&quot;right heel&quot;].iloc[-1] diff = last - first diff . 8 . Test cases for the function . Below are tests I ran to check the accuracy of the functions . I wrote this test case initially to see if my difference function outputted the correct value . the intial value was 1 and final value was 9, the difference that should be outputted is 8 = (9-1) . right_diff = difference(df_n, &quot;right heel&quot;) print(right_diff) . 8 . I wrote this test case to check the metercalc function was outputting the correct value given random data that is in the ranges of 1000-6000 . actual_test = metercalc(sim, &quot;right heel&quot;) actual_test . 2.698 . Testing ways to import the data . I wanted to make a dataframe that outputted the values, this is still under construction. . Right now it is a for loop that takes a list of dataframes, runs the metercalc function on each entry and outputs a dataframe of the calculations. this section is my tests I did to make the general function . If I am given more time, I will turn this into a function that can take all the tsv files in a directory, convert them into dataframes, and make a list of all the dataframes that will be processed . data = [] for i in range(len(dataframes)): diff = metercalc(dataframes[i], &quot;right heel&quot;) d = {&quot;filename&quot;: str(filenames[i]), &quot;Difference (meters)&quot;: diff} data.append(d) df_all = pd.DataFrame(data) df_all . filename Difference (meters) . 0 test1.tsv | 3.859 | . 1 test2.tsv | 2.314 | . 2 test3.tsv | 3.073 | . 3 test4.tsv | 0.760 | . I did some research and found a page that showed how to import files and load it into a data frames . I asked for some help from sigpwny and rats_irl helped me write some code based on the link I showed to him . filenames is a variable that stores a list of the tsv files of a directory . dataframes is a list . the for loop iterates through filenames and for each entry, and converts the tsv files into dataframes . with this I can make a general function . filenames = glob.glob(&quot;*.tsv&quot;) dataframes = [] for f in filenames: dataframes.append(pd.read_csv(f,delimiter=&#39; t&#39;,encoding=&#39;utf-8&#39;)) . Checking The Outputs of filenames and dataframes . print(&quot;name of the file = &quot; + str(filenames[0])) display(dataframes[0]) . name of the file = test1.tsv . Unnamed: 0 right heel . 0 0 | 3516 | . 1 1 | 2689 | . 2 2 | 5181 | . 3 3 | 1408 | . 4 4 | 2545 | . 5 5 | 2229 | . 6 6 | 5266 | . 7 7 | 1686 | . 8 8 | 1558 | . 9 9 | 4375 | . for i in range(len(dataframes)): display(dataframes[i]) . Unnamed: 0 right heel . 0 0 | 3516 | . 1 1 | 2689 | . 2 2 | 5181 | . 3 3 | 1408 | . 4 4 | 2545 | . 5 5 | 2229 | . 6 6 | 5266 | . 7 7 | 1686 | . 8 8 | 1558 | . 9 9 | 4375 | . Unnamed: 0 right heel . 0 0 | 3030 | . 1 1 | 5689 | . 2 2 | 1525 | . 3 3 | 4448 | . 4 4 | 5904 | . 5 5 | 3180 | . 6 6 | 1661 | . 7 7 | 2981 | . 8 8 | 5494 | . 9 9 | 2344 | . Unnamed: 0 right heel . 0 0 | 5448 | . 1 1 | 4231 | . 2 2 | 5242 | . 3 3 | 1325 | . 4 4 | 3561 | . 5 5 | 2519 | . 6 6 | 2443 | . 7 7 | 4251 | . 8 8 | 3286 | . 9 9 | 2375 | . Unnamed: 0 right heel . 0 0 | 5273 | . 1 1 | 2096 | . 2 2 | 4345 | . 3 3 | 2171 | . 4 4 | 2170 | . 5 5 | 1516 | . 6 6 | 4599 | . 7 7 | 1919 | . 8 8 | 5891 | . 9 9 | 3033 | .",
            "url": "https://progressedd.github.io/blog/2020/04/24/calculating-3m-walk.html",
            "relUrl": "/2020/04/24/calculating-3m-walk.html",
            "date": " • Apr 24, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "Nutrient Density and Value Data Visualization",
            "content": "Table of Contents . 1&nbsp;&nbsp;Nutrient Density and Value Data Visualization | 2&nbsp;&nbsp;About | 3&nbsp;&nbsp;Importing libraries | 4&nbsp;&nbsp;Raw Data | 5&nbsp;&nbsp;Largest values | 6&nbsp;&nbsp;Plotting Function6.1&nbsp;&nbsp;Arguments | 6.2&nbsp;&nbsp;What Occurs During a Function Call | . | 7&nbsp;&nbsp;Charts7.1&nbsp;&nbsp;All Energy Values Comparison | 7.2&nbsp;&nbsp;All Protein Values Comparison | 7.3&nbsp;&nbsp;All Fat Values Comparison | 7.4&nbsp;&nbsp;All Saturated Fat Values Comparison | 7.5&nbsp;&nbsp;All Cholesterol Values Comparison | 7.6&nbsp;&nbsp;All Vitamn Values Comparison | 7.7&nbsp;&nbsp;All Sodium Values Comparison | 7.8&nbsp;&nbsp;All Phosphorus Values Comparison | 7.9&nbsp;&nbsp;All Iron Values Comparison | 7.10&nbsp;&nbsp;All Zinc Values Comparison | 7.11&nbsp;&nbsp;All Retail Cost Comparison | . | 8&nbsp;&nbsp;Testing8.1&nbsp;&nbsp;Initializing Test Variables | 8.2&nbsp;&nbsp;Testing if Saturated Fat Exists in ref4 Dictonary | 8.3&nbsp;&nbsp;Testing Dictionary Outputs In Relation to Variables | 8.4&nbsp;&nbsp;Testing Solution To Backslashes Causing Issues in Python | . | 9&nbsp;&nbsp;Previous versions of functions9.1&nbsp;&nbsp;Energy Values Plotting Function | 9.2&nbsp;&nbsp;Protein Values Plotting Function | . | . About . This is a project I made to analyze the amount of protein the various animal and vegetable products people can consume. . In this post, I learned the basics of using matplotlib. A future post might be refining this post . The data was imported from Bohrer, B. M. (2017). Review: Nutrient density and nutritional value of meat products and non-meat foods high in protein. Trends in Food Science &amp; Technology, 65, 103-112. doi:10.1016/j.tifs.2017.04.016 . . Importing libraries . The categories variables map to the text from the table. I made these variables to test the function . import pandas as pd import matplotlib as plt import matplotlib.pyplot as plt; plt.rcdefaults() import matplotlib.pyplot as plt import numpy as np df1 = pd.read_csv(&quot;Nutrition.csv&quot;, encoding= &#39;unicode_escape&#39;) df2 = pd.read_csv(&quot;nutrition-cost.csv&quot;, encoding= &#39;unicode_escape&#39;) # categories meat = &quot;Meat, raw/unprepared unless noted otherwise&quot; fish = &quot;Fish, raw/unprepared&quot; non_meat = &quot;Non-meat, raw/unprepared&quot; from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;&quot;)) . Raw Data . Once we have loaded the csv files, I will take a look to see that the values are correct and check if there are any noticeable trends . df1 . Category Product Energy value (kcal) Protein (g) Fat (g) Saturated fat (g) Cholesterol (mg) Vitamin B12 (mcg) Na (mg) P (mg) Fe (mg) Zn (mg) . 0 Meat, raw/unprepared unless noted otherwise | Beef ribeye (longissimus thoracis) | 166 | 17.51 | 22.07 | 9.000 | 68 | 3.11 | 56.00 | 168 | 1.87 | 3.85 | . 1 Meat, raw/unprepared unless noted otherwise | Beef strip loin (longissimus lumborum) | 228 | 20.61 | 15.49 | 6.251 | 81 | 1.06 | 52.00 | 186 | 1.47 | 3.53 | . 2 Meat, raw/unprepared unless noted otherwise | Beef tenderloin (psoas major) | 247 | 19.61 | 18.16 | 8.410 | 85 | 1.01 | 50.00 | 180 | 1.42 | 2.9 | . 3 Meat, raw/unprepared unless noted otherwise | Beef top sirloin (gluteus mediuset al.) | 201 | 20.30 | 12.71 | 5.127 | 75 | 1.05 | 52.00 | 187 | 1.48 | 3.55 | . 4 Meat, raw/unprepared unless noted otherwise | Beef tri-tip (m. tensor fasciae latae) | 142 | 21.26 | 5.63 | 1.729 | 61 | 1.04 | 54.00 | 198 | 1.54 | 3.85 | . 5 Meat, raw/unprepared unless noted otherwise | Beef eye of round (semitendinosus) | 124 | 23.27 | 3.44 | 1.276 | 60 | 1.83 | 53.00 | 221 | 1.45 | 3.4 | . 6 Meat, raw/unprepared unless noted otherwise | Beef brisket (deep pectoral et al.) | 132 | 21.47 | 5.11 | 1.844 | 67 | 1.81 | 83.00 | 222 | 2.06 | 5.21 | . 7 Meat, raw/unprepared unless noted otherwise | Beef flank (rectus abdominis) | 155 | 21.22 | 7.17 | 2.978 | 65 | 1.09 | 54.00 | 195 | 1.55 | 3.7 | . 8 Meat, raw/unprepared unless noted otherwise | Beef, ground 80% lean, 20% fat | 254 | 17.17 | 20.00 | 7.581 | 71 | 2.14 | 66.00 | 158 | 1.94 | 4.18 | . 9 Meat, raw/unprepared unless noted otherwise | Beef, ground 90% lean, 10% fat | 176 | 20.00 | 10.00 | 3.927 | 65 | 2.21 | 66.00 | 184 | 2.24 | 4.79 | . 10 Meat, raw/unprepared unless noted otherwise | Beef, ground 93% lean, 7% fat | 152 | 20.85 | 7.00 | 2.878 | 63 | 2.23 | 66.00 | 192 | 2.33 | 4.97 | . 11 Meat, raw/unprepared unless noted otherwise | Beef, ground 97% lean, 3% fat | 121 | 21.98 | 3.00 | 1.480 | 60 | 2.26 | 66.00 | 203 | 2.44 | 5.21 | . 12 Meat, raw/unprepared unless noted otherwise | Pork loin (longissimus lumborum) | 198 | 19.74 | 12.58 | 4.360 | 63 | 0.53 | 50.00 | 197 | 0.79 | 1.74 | . 13 Meat, raw/unprepared unless noted otherwise | Pork ham (biceps femoris et al.) | 245 | 17.43 | 18.87 | 6.540 | 73 | 0.63 | 47.00 | 199 | 0.85 | 1.93 | . 14 Meat, raw/unprepared unless noted otherwise | Pork, ground 84% lean, 16% fat | 218 | 17.99 | 16.00 | 4.930 | 68 | 0.73 | 68.00 | 161 | 0.88 | 1.91 | . 15 Meat, raw/unprepared unless noted otherwise | Pork, ground 96% lean, 4% fat | 121 | 21.10 | 4.00 | 1.420 | 59 | 0.64 | 67.00 | 190 | 0.86 | 1.93 | . 16 Meat, raw/unprepared unless noted otherwise | Lamb loin (longissimus lumborum) | 310 | 16.32 | 26.63 | 11.760 | 74 | 2.04 | 56.00 | 152 | 1.61 | 2.53 | . 17 Meat, raw/unprepared unless noted otherwise | Lamb leg (biceps femoris et al) | 230 | 17.91 | 17.07 | 7.430 | 69 | 2.5 | 56.00 | 170 | 1.66 | 3.32 | . 18 Meat, raw/unprepared unless noted otherwise | Lamb, ground 85% lean, 15% fat | 255 | 17.14 | 20.71 | 9.926 | 73 |  | 77.00 |  | 1.41 |  | . 19 Meat, raw/unprepared unless noted otherwise | Chicken breast (pectoralis major) | 120 | 22.50 | 2.62 | 0.563 | 73 | 0.21 | 45.00 | 213 | 0.37 | 0.68 | . 20 Meat, raw/unprepared unless noted otherwise | Chicken thigh (iliotibialis et al.) | 221 | 16.52 | 16.61 | 4.524 | 98 | 0.62 | 81.00 | 157 | 0.68 | 1.29 | . 21 Meat, raw/unprepared unless noted otherwise | Turkey breast (pectoralis major) | 157 | 21.89 | 7.02 | 1.910 | 65 | 0.42 | 59.00 | 186 | 1.20 | 1.57 | . 22 Meat, raw/unprepared unless noted otherwise | Turkey thigh (iliotibialis et al.) | 116 | 20.60 | 3.69 | 0.782 | 78 | 2.17 | 75.00 | 177 | 1.42 | 2.95 | . 23 Meat, raw/unprepared unless noted otherwise | Turkey, ground, 93% lean, 15% fat | 150 | 18.73 | 8.34 | 2.170 | 74 | 1.2 | 69.00 | 193 | 1.17 | 2.53 | . 24 Meat, raw/unprepared unless noted otherwise | Pork bacon, cured, unprepared | 417 | 12.62 | 39.69 | 13.296 | 66 | 0.5 | 662.00 | 144 | 0.41 | 1.18 | . 25 Fish, raw/unprepared | Tuna, yellowfin | 109 | 24.40 | 0.49 | 0.172 | 39 | 2.08 | 45.00 | 278 | 0.77 | 0.37 | . 26 Fish, raw/unprepared | Salmon, Atlantic | 142 | 19.84 | 6.34 | 0.981 | 55 | 3.18 | 44.00 | 200 | 0.80 | 0.64 | . 27 Fish, raw/unprepared | Pollock, Atlantic | 92 | 19.44 | 0.98 | 0.135 | 71 | 3.19 | 86.00 | 221 | 0.46 | 0.47 | . 28 Fish, raw/unprepared | Halibut, Atlantic | 91 | 18.56 | 1.33 | 0.292 | 49 | 1.1 | 68.00 | 236 | 0.16 | 0.36 | . 29 Fish, raw/unprepared | Tilapia | 96 | 20.08 | 1.70 | 0.585 | 50 | 1.58 | 52.00 | 170 | 0.56 | 0.33 | . 30 Fish, raw/unprepared | Catfish, wild channel | 95 | 16.38 | 2.82 | 0.722 | 58 | 2.23 | 43.00 | 209 | 0.30 | 0.51 | . 31 Non-meat, raw/unprepared | Chicken eggs, whole | 143 | 12.56 | 9.51 | 3.126 | 372 | 0.89 | 142.00 | 198 | 1.75 | 1.29 | . 32 Non-meat, raw/unprepared | Yogurt, Greek non-fat | 59 | 10.19 | 0.39 | 0.117 | 5 | 0.75 | 36.00 | 135 | 0.07 | 0.52 | . 33 Non-meat, raw/unprepared | Kale | 49 | 4.28 | 0.93 | 0.091 | 0 | 0 | 38.00 | 92 | 1.47 | 0.56 | . 34 Non-meat, raw/unprepared | Lentils, sprouted | 106 | 8.96 | 0.55 | 0.057 | 0 | 0 | 11.00 | 173 | 3.21 | 1.51 | . 35 Non-meat, raw/unprepared | Broccoli, heads | 34 | 2.82 | 0.37 | 0.039 | 0 | 0 | 33.00 | 66 | 0.73 | 0.41 | . 36 Non-meat, raw/unprepared | Green peas | 81 | 5.42 | 0.40 | 0.071 | 0 | 0 | 5.00 | 108 | 1.47 | 1.24 | . 37 Non-meat, raw/unprepared | Spinach | 23 | 2.86 | 0.39 | 0.063 | 0 | 0 | 79.00 | 49 | 2.71 | 0.53 | . 38 Non-meat, raw/unprepared | Black beans, mature | 341 | 21.60 | 1.42 | 0.366 | 0 | 0 | 5.00 | 352 | 5.02 | 3.65 | . 39 Non-meat, raw/unprepared | Pinto beans, mature | 62 | 5.25 | 0.90 | 0.109 | 0 | 0 | 153.00 | 94 | 1.97 | 0.5 | . 40 Non-meat, raw/unprepared | Lima beans, immature | 113 | 6.84 | 0.86 | 0.198 | 0 | 0 | 0.78 | 136 | 3.14 | 0.78 | . 41 Non-meat, raw/unprepared | Kidney beans, mature | 29 | 4.20 | 0.50 | 0.720 | 0 | 0 | 6.00 | 37 | 0.81 | 0.4 | . 42 Non-meat, raw/unprepared | Great northern beans, mature | 339 | 21.86 | 1.14 | 0.356 | 0 | 0 | 14.00 | 447 | 5.47 | 2.31 | . 43 Non-meat, raw/unprepared | Tofu, firm, prepared with CaSO4 and MgCl2 | 78 | 9.04 | 4.17 | 0.793 | 0 | 0 | 12.00 | 121 | 1.61 | 0.83 | . 44 Non-meat, raw/unprepared | Tofu, soft, prepared with CaSO4 and MgCl2 | 61 | 7.17 | 3.69 | 0.533 | 0 | 0 | 8.00 | 92 | 1.11 | 0.64 | . 45 Non-meat, raw/unprepared | Hummus | 166 | 7.90 | 9.60 | 1.437 | 0 | 0 | 379.00 | 176 | 2.44 | 1.83 | . 46 Non-meat, raw/unprepared | Peanuts | 567 | 25.80 | 49.24 | 6.279 | 0 | 0 | 18.00 | 376 | 4.58 | 3.27 | . 47 Non-meat, raw/unprepared | Almonds | 579 | 21.15 | 49.93 | 3.802 | 0 | 0 | 1.00 | 481 | 3.71 | 3.12 | . 48 Non-meat, raw/unprepared | Cashews | 553 | 18.22 | 43.85 | 7.783 | 0 | 0 | 12.00 | 593 | 6.68 | 5.78 | . df2 . Category Product Retail Cost/100 g (US$) Source of estimationb Energy value (kcal/US$) Protein (g/US$) Vitamin B12 (mcg/US$) P (mg/US$) Fe (mg/US$) Zn (mg/US$) . 0 Meat, raw/unprepared unless noted otherwise | Beef ribeye (longissimus thoracis) | 1.81000 | USDA, AMS, 2016 | 91.71 | 9.67 | 1.72 | 92.82 | 1.03 | 2.13 | . 1 Meat, raw/unprepared unless noted otherwise | Beef strip loin (longissimus lumborum) | 1.72620 | USDA, AMS, 2016 | 132.08 | 11.94 | 0.61 | 107.75 | 0.85 | 2.04 | . 2 Meat, raw/unprepared unless noted otherwise | Beef tenderloin (psoas major) | 2.44490 | USDA, AMS, 2016 | 101.03 | 8.02 | 0.41 | 73.62 | 0.58 | 1.19 | . 3 Meat, raw/unprepared unless noted otherwise | Beef top sirloin (gluteus medius et al.) | 1.12440 | USDA, AMS, 2016 | 178.77 | 18.05 | 0.93 | 166.32 | 1.32 | 3.16 | . 4 Meat, raw/unprepared unless noted otherwise | Beef tri-tip (m. tensor fasciae latae) | 1.18610 | USDA, AMS, 2016 | 119.72 | 17.92 | 0.88 | 166.94 | 1.30 | 3.25 | . 5 Meat, raw/unprepared unless noted otherwise | Beef eye of round (semitendinosus) | 1.01410 | USDA, AMS, 2016 | 122.27 | 22.95 | 1.8 | 217.92 | 1.43 | 3.35 | . 6 Meat, raw/unprepared unless noted otherwise | Beef brisket (deep pectoralet al.) | 0.89950 | USDA, AMS, 2016 | 146.75 | 23.87 | 2.01 | 246.81 | 2.29 | 5.79 | . 7 Meat, raw/unprepared unless noted otherwise | Beef flank (rectus abdominis) | 1.69980 | USDA, AMS, 2016 | 91.19 | 12.48 | 0.64 | 114.72 | 0.91 | 2.18 | . 8 Meat, raw/unprepared unless noted otherwise | Beef, ground 80% lean, 20% fat | 0.73190 | USDA, AMS, 2016 | 347.03 | 23.46 | 2.92 | 215.87 | 2.65 | 5.71 | . 9 Meat, raw/unprepared unless noted otherwise | Beef, ground 90% lean, 10% fat | 1.03620 | USDA, AMS, 2016 | 169.86 | 19.30 | 2.13 | 177.58 | 2.16 | 4.62 | . 10 Meat, raw/unprepared unless noted otherwise | Beef, ground 93% lean, 7% fat | 1.03620 | USDA, AMS, 2016 | 146.69 | 20.12 | 2.15 | 185.3 | 2.25 | 4.8 | . 11 Meat, raw/unprepared unless noted otherwise | Beef, ground 97% lean, 3% fat | 1.03620 | USDA, AMS, 2016 | 116.78 | 21.21 | 2.18 | 195.91 | 2.35 | 5.03 | . 12 Meat, raw/unprepared unless noted otherwise | Pork loin (longissimus lumborum) | 0.41230 | USDA, AMS, 2016 | 480.27 | 47.88 | 1.29 | 477.85 | 1.92 | 4.22 | . 13 Meat, raw/unprepared unless noted otherwise | Pork ham (biceps femoriset al.) | 0.70550 | USDA, AMS, 2016 | 347.28 | 24.71 | 0.89 | 282.08 | 1.20 | 2.74 | . 14 Meat, raw/unprepared unless noted otherwise | Pork bacon, cured, unprepared | 4.72890 | USDA, AMS, 2016 | 88.18 | 2.67 | 0.11 | 30.45 | 0.09 | 0.25 | . 15 Meat, raw/unprepared unless noted otherwise | Pork, ground 84% lean, 16% fat | 0.59300 | USDA, AMS, 2016 | 367.60 | 30.34 | 1.23 | 271.48 | 1.48 | 3.22 | . 16 Meat, raw/unprepared unless noted otherwise | Pork, ground 96% lean, 4% fat | 0.59300 | USDA, AMS, 2016 | 204.03 | 35.58 | 1.08 | 320.38 | 1.45 | 3.25 | . 17 Meat, raw/unprepared unless noted otherwise | Lamb loin (longissimus lumborum) | 1.78570 | USDA, AMS, 2016 | 173.60 | 9.14 | 1.14 | 85.12 | 0.90 | 1.42 | . 18 Meat, raw/unprepared unless noted otherwise | Lamb leg (biceps femoris et al) | 1.76150 | USDA, AMS, 2016 | 130.57 | 10.17 | 1.42 | 96.51 | 0.94 | 1.88 | . 19 Meat, raw/unprepared unless noted otherwise | Lamb, ground 85% lean, 15% fat | 1.24120 | USDA, AMS, 2016 | 205.45 | 13.81 |  |  | 1.14 |  | . 20 Meat, raw/unprepared unless noted otherwise | Chicken breast (pectoralis major) | 0.70110 | USDA, AMS, 2016 | 171.17 | 32.09 | 0.3 | 303.82 | 0.53 | 0.97 | . 21 Meat, raw/unprepared unless noted otherwise | Chicken thigh (iliotibialiset al.) | 0.28440 | USDA, AMS, 2016 | 777.09 | 58.09 | 2.18 | 552.05 | 2.39 | 4.54 | . 22 Meat, raw/unprepared unless noted otherwise | Turkey breast (pectoralis major) | 0.59300 | USDA, AMS, 2016 | 264.74 | 36.91 | 0.71 | 313.64 | 2.02 | 2.65 | . 23 Meat, raw/unprepared unless noted otherwise | Turkey thigh (iliotibialiset al.) | 0.66140 | USDA, AMS, 2016 | 175.39 | 31.15 | 3.28 | 267.62 | 2.15 | 4.46 | . 24 Meat, raw/unprepared unless noted otherwise | Turkey, ground, 93% lean, 15% fat | 0.78480 | USDA, AMS, 2016 | 191.12 | 23.86 | 1.53 | 245.91 | 1.49 | 3.22 | . 25 Fish, raw/unprepared | Tuna, yellowfin | 5.01820 | Marketplace assessment | 21.72 | 4.86 | 0.41 | 55.4 | 0.15 | 0.07 | . 26 Fish, raw/unprepared | Salmon, Atlantic | 4.54060 | Marketplace assessment | 31.27 | 4.37 | 0.7 | 44.05 | 0.18 | 0.14 | . 27 Fish, raw/unprepared | Pollock, Atlantic | 0.81430 | Marketplace assessment | 112.98 | 23.87 | 3.92 | 271.4 | 0.56 | 0.58 | . 28 Fish, raw/unprepared | Halibut, Atlantic | 7.30520 | Marketplace assessment | 12.46 | 2.54 | 0.15 | 32.31 | 0.02 | 0.05 | . 29 Fish, raw/unprepared | Tilapia | 2.00220 | Marketplace assessment | 47.95 | 10.03 | 0.79 | 84.91 | 0.28 | 0.16 | . 30 Fish, raw/unprepared | Catfish, wild channel | 2.36250 | Marketplace assessment | 40.21 | 6.93 | 0.94 | 88.47 | 0.13 | 0.22 | . 31 Non-meat, raw/unprepared | Chicken eggs, whole | 0.18330 | USDA, AMS, 2016 | 780.00 | 68.51 | 4.85 | 1080 | 9.55 | 7.04 | . 32 Non-meat, raw/unprepared | Yogurt, Greek non-fat | 0.86420 | USDA, AMS, 2016 | 68.27 | 11.79 | 0.87 | 156.21 | 0.08 | 0.6 | . 33 Non-meat, raw/unprepared | Kale | 0.61950 | USDA, ERS, 2013 | 79.10 | 6.91 | 0 | 148.51 | 2.37 | 0.9 | . 34 Non-meat, raw/unprepared | Lentils, sprouted | 0.30640 | USDA, ERS, 2013 | 345.91 | 29.24 | 0 | 564.54 | 10.48 | 4.93 | . 35 Non-meat, raw/unprepared | Broccoli, heads | 0.36160 | USDA, ERS, 2013 | 94.04 | 7.80 | 0 | 182.54 | 2.02 | 1.13 | . 36 Non-meat, raw/unprepared | Green peas | 0.36380 | USDA, ERS, 2013 | 222.67 | 14.90 | 0 | 296.9 | 4.04 | 3.41 | . 37 Non-meat, raw/unprepared | Spinach | 0.84440 | USDA, ERS, 2013 | 27.24 | 3.39 | 0 | 58.03 | 3.21 | 0.63 | . 38 Non-meat, raw/unprepared | Black beans, mature | 0.32849 | USDA, ERS, 2013 | 1038.09 | 65.76 | 0 | 1071.58 | 15.28 | 11.11 | . 39 Non-meat, raw/unprepared | Pinto beans, mature | 0.26455 | USDA, ERS, 2013 | 234.36 | 19.84 | 0 | 355.31 | 7.45 | 1.89 | . 40 Non-meat, raw/unprepared | Lima beans, immature | 0.38140 | USDA, ERS, 2013 | 296.28 | 17.93 | 0 | 356.58 | 8.23 | 2.05 | . 41 Non-meat, raw/unprepared | Kidney beans, mature | 0.36820 | USDA, ERS, 2013 | 78.77 | 11.41 | 0 | 100.5 | 2.20 | 1.09 | . 42 Non-meat, raw/unprepared | Great northern beans, mature | 0.33730 | USDA, ERS, 2013 | 1005.02 | 64.81 | 0 | 1325.2 | 16.22 | 6.85 | . 43 Non-meat, raw/unprepared | Tofu, firm, prepared with CaSO4 and MgCl2 | 0.97710 | Marketplace assessment | 79.83 | 9.25 | 0 | 123.84 | 1.65 | 0.85 | . 44 Non-meat, raw/unprepared | Tofu, soft, prepared with CaSO4 and MgCl2 | 0.44500 | Marketplace assessment | 137.08 | 16.11 | 0 | 206.74 | 2.49 | 1.44 | . 45 Non-meat, raw/unprepared | Hummus | 0.92500 | Marketplace assessment | 179.46 | 8.54 | 0 | 190.27 | 2.64 | 1.98 | . 46 Non-meat, raw/unprepared | Peanuts | 0.87960 | Marketplace assessment | 644.58 | 29.33 | 0 | 427.45 | 5.21 | 3.72 | . 47 Non-meat, raw/unprepared | Almonds | 1.98200 | Marketplace assessment | 292.14 | 10.67 | 0 | 242.69 | 1.87 | 1.57 | . 48 Non-meat, raw/unprepared | Cashews | 2.20240 | Marketplace assessment | 251.09 | 8.27 | 0 | 269.25 | 3.03 | 2.62 | . Largest values . This Dataframe displays the 10 products that have the most energy value (kcal/US$). I wanted to see which protein product gave you the most Energy for how much you pay. . df2.nlargest(n = 10, columns = &quot;Energy value (kcal/US$)&quot;) . Category Product Retail Cost/100 g (US$) Source of estimationb Energy value (kcal/US$) Protein (g/US$) Vitamin B12 (mcg/US$) P (mg/US$) Fe (mg/US$) Zn (mg/US$) . 38 Non-meat, raw/unprepared | Black beans, mature | 0.32849 | USDA, ERS, 2013 | 1038.09 | 65.76 | 0 | 1071.58 | 15.28 | 11.11 | . 42 Non-meat, raw/unprepared | Great northern beans, mature | 0.33730 | USDA, ERS, 2013 | 1005.02 | 64.81 | 0 | 1325.2 | 16.22 | 6.85 | . 31 Non-meat, raw/unprepared | Chicken eggs, whole | 0.18330 | USDA, AMS, 2016 | 780.00 | 68.51 | 4.85 | 1080 | 9.55 | 7.04 | . 21 Meat, raw/unprepared unless noted otherwise | Chicken thigh (iliotibialiset al.) | 0.28440 | USDA, AMS, 2016 | 777.09 | 58.09 | 2.18 | 552.05 | 2.39 | 4.54 | . 46 Non-meat, raw/unprepared | Peanuts | 0.87960 | Marketplace assessment | 644.58 | 29.33 | 0 | 427.45 | 5.21 | 3.72 | . 12 Meat, raw/unprepared unless noted otherwise | Pork loin (longissimus lumborum) | 0.41230 | USDA, AMS, 2016 | 480.27 | 47.88 | 1.29 | 477.85 | 1.92 | 4.22 | . 15 Meat, raw/unprepared unless noted otherwise | Pork, ground 84% lean, 16% fat | 0.59300 | USDA, AMS, 2016 | 367.60 | 30.34 | 1.23 | 271.48 | 1.48 | 3.22 | . 13 Meat, raw/unprepared unless noted otherwise | Pork ham (biceps femoriset al.) | 0.70550 | USDA, AMS, 2016 | 347.28 | 24.71 | 0.89 | 282.08 | 1.20 | 2.74 | . 8 Meat, raw/unprepared unless noted otherwise | Beef, ground 80% lean, 20% fat | 0.73190 | USDA, AMS, 2016 | 347.03 | 23.46 | 2.92 | 215.87 | 2.65 | 5.71 | . 34 Non-meat, raw/unprepared | Lentils, sprouted | 0.30640 | USDA, ERS, 2013 | 345.91 | 29.24 | 0 | 564.54 | 10.48 | 4.93 | . Plotting Function . These are functions I wrote to plot energy value and protein content. . Arguments . The arguments include a dataframe, and a string variable called category, the variable category helps determine whether we will plot a specific protein product or if it will plot all graphs. . What Occurs During a Function Call . When the function is called, the variables skipCheck, categoryCase, and columnTitleCase are initialized the variables that end in case, convert the lowercase to a title to match the dictionary entry. Next, a dictionary is initialized for all the categories of the protein products. In the next line, we will use a if statement to check which dataframe we are processing, since df2 has the retail cost, we will look for retail cost, if the column exists, we will set columnDictionary to the second columnCostDictionary we initialized, otherwise the default dictionary will be columnRegularDictionary. After initializing the dictionary, we will check to see if the argument for category exists in the dictionaries we initialized previously. If category is not in columnDictionary we will have the function exit and spit a message telling the user they made a misspelling. . Once we finish the verification, we will set the plot specific setttings. The first if statement will check if categoryCase (the first letters of all words capitalized), is in the dictionary categoryDictionary. If categoryCase matches Meat, Fish, or Non_Meat, we will have it plot only for the specifc protein product. Otherwise, we will use the settings for a graph containing all protein products. . With the plot specifc settings complete, we can set the general plot settings and return the plot object. Outside of the function, we will use the .show() command to display the plot we generated. I left the .show() outside of the function so that I could prevent myself from running out of cpu. . def plotNutrition(df, category, columnTitle): &quot;&quot;&quot; This script will plot a graph from a the following variables df, dataframe to be plotted category, the following arguments are allowed: Meat Fish Non_Meat ColumnTitle , columns allowed to be plotted &quot;&quot;&quot; # Variable initialization skipCheck = False categoryCase = category.title() columnTitleCase = columnTitle.title() # Dictionaries to reference categoryDictionary = {&quot;Meat&quot;: &quot;Meat, raw/unprepared unless noted otherwise&quot;, &quot;Fish&quot;: &quot;Fish, raw/unprepared&quot;, &quot;Non_Meat&quot; : &quot;Non-meat, raw/unprepared&quot;} columnRegularDictionary = {&quot;Energy Value&quot; : &quot;Energy value (kcal)&quot;, &quot;Protein&quot;: &quot;Protein (g)&quot;, &quot;Fat&quot; : &quot;Fat (g)&quot;, &quot;Saturated Fat&quot; : &quot;Saturated fat (g)&quot;, &quot;Cholesterol&quot; : &quot;Cholesterol (mg)&quot;, &quot;Vitamin&quot; : &quot;Vitamin B12 (mcg)&quot;, &quot;Sodium&quot; :&quot;Na (mg)&quot;, &quot;Phosphorus&quot; : &quot;P (mg)&quot;, &quot;Iron&quot; : &quot;Fe (mg)&quot;, &quot;Zinc&quot; : &quot;Zn (mg)&quot;} columnCostDictionary = {&quot;Retail Cost&quot; : &quot;Retail Cost/100 xa0g (US$)&quot;, &quot;Energy Value&quot; : &quot;Energy value (kcal/US$)&quot;, &quot;Protein&quot; : &quot;Protein (g/US$)&quot;, &quot;Vitamin&quot; : &quot;Vitamin B12 (mcg/US$)&quot;, &quot;Phosphorus&quot; : &quot;P (mg/US$)&quot;, &quot;Iron&quot; : &quot;Fe (mg/US$)&quot;, &quot;Zinc&quot; : &quot;Zn (mg/US$)&quot; } # Check if which dataframe we are using, if there is &quot;Retail Cost/100 g (US$)&quot;, we will use the cost dictionary allList = df.columns.tolist() if(&quot;Retail Cost/100 xa0g (US$)&quot; in allList): columnDictionary = columnCostDictionary else: columnDictionary = columnRegularDictionary # Check if the arguement for category is exists in the dictionary, if it is not in the dictionary, it will exit the function if(categoryCase == &quot;All&quot;): skipCheck = True if((categoryCase not in categoryDictionary) &amp; (skipCheck != True)): return print(&quot;spelling error in category argument, your category argument was &quot; + categoryCase) # Initialize all dataframes needed for plotting, if the category name is inside of the category dictionary, we change the plot settings to focus only on the category name if(categoryCase in categoryDictionary): df_specific = df[df[&quot;Category&quot;] == categoryDictionary[categoryCase]].sort_values(by = [columnDictionary[columnTitleCase]]) objects = df_specific[&quot;Product&quot;] performance = df_specific[columnDictionary[columnTitleCase]] else: df = df.sort_values(by = [columnDictionary[columnTitleCase]]) objects = df[&quot;Product&quot;] performance = df[columnDictionary[columnTitleCase]] plt.tick_params(axis=&#39;y&#39;, which=&#39;major&#39;, labelsize=6) #plt.tick_params(axis=&#39;x&#39;, which=&#39;major&#39;, labelsize=6) #Plotting settings y_pos = np.arange(len(objects)) plt.barh(y_pos, performance, align=&#39;center&#39;, alpha=0.5) plt.yticks(y_pos, objects) plt.xticks(rotation=45) plt.xlabel(columnDictionary[columnTitleCase]) plt.title(categoryCase + &#39; &#39; + columnTitleCase + &#39; Comparison&#39;) plt.figure(dpi=900) return plt . Charts . After all the work, Behold! We have the final product . All Energy Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;energy value&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;energy value&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;energy value&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;energy value&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Protein Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;protein&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;protein&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;protein&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;protein&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Fat Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;fat&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;fat&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;fat&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;fat&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Saturated Fat Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;saturated fat&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;saturated fat&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;saturated fat&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;saturated fat&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Cholesterol Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;Cholesterol&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;Cholesterol&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;Cholesterol&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;Cholesterol&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Vitamn Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;Vitamin&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;Vitamin&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;Vitamin&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;Vitamin&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Sodium Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;Sodium&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;Sodium&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;Sodium&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;Sodium&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Phosphorus Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;Phosphorus&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;Phosphorus&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;Phosphorus&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;Phosphorus&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Iron Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;Iron&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;Iron&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;Iron&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;Iron&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Zinc Values Comparison . plotNutrition(df1, &quot;all&quot;, &quot;Zinc&quot;).show() plotNutrition(df1, &quot;meat&quot;, &quot;Zinc&quot;).show() plotNutrition(df1, &quot;fish&quot;, &quot;Zinc&quot;).show() plotNutrition(df1, &quot;non_meat&quot;, &quot;Zinc&quot;).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . All Retail Cost Comparison . allRetailCost = [&quot;retail cost&quot;, &quot;energy value&quot;, &quot;protein&quot;, &quot;vitamin&quot;, &quot;phosphorus&quot;, &quot;iron&quot;, &quot;zinc&quot;] for i in range(len(allRetailCost)): plotNutrition(df2, &quot;all&quot;, allRetailCost[i]).show() plotNutrition(df2, &quot;meat&quot;, allRetailCost[i]).show() plotNutrition(df2, &quot;fish&quot;, allRetailCost[i]).show() plotNutrition(df2, &quot;non_meat&quot;, allRetailCost[i]).show() . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . /home/bedhedd/miniconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:211: RuntimeWarning: Glyph 150 missing from current font. font.set_text(s, 0.0, flags=flags) /home/bedhedd/miniconda3/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py:176: RuntimeWarning: Glyph 150 missing from current font. font.load_char(ord(s), flags=flags) . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . &lt;Figure size 5760x4320 with 0 Axes&gt; . Testing . This section are tests I made to check dictionaries and lists outside of the function . Initializing Test Variables . test1 = False test2 = False name = &quot;meat&quot; name2 = &quot;Saturated Fat&quot; ref2 = {&quot;Meat&quot;: &quot;Meat, raw/unprepared unless noted otherwise&quot;, &quot;Fish&quot;: &quot;Fish, raw/unprepared&quot;, &quot;Non_meat&quot; : &quot;Non-meat, raw/unprepared&quot;} if(name.title() in ref3): test1 = True print(test1) . False . Testing if Saturated Fat Exists in ref4 Dictonary . ref = {&quot;meat&quot;: &quot;Meat, raw/unprepared unless noted otherwise&quot;, &quot;fish&quot;: &quot;Fish, raw/unprepared&quot;, &quot;non_meat&quot; : &quot;Non-meat, raw/unprepared&quot;} ref1 = {meat: &quot;Meat&quot;, fish: &quot;Fish&quot;, non_meat: &quot;Non_meat&quot;} ref2 = {&quot;Meat, raw/unprepared unless noted otherwise&quot; : &quot;meat&quot;, &quot;Fish&quot;: &quot;Fish, raw/unprepared&quot;, &quot;Non_meat&quot; : &quot;Non-meat, raw/unprepared&quot;} ref3 = {&quot;retail cost&quot; : &quot;Retail Cost/100 g (US$)&quot;, &quot;energy value&quot; : &quot;Energy value (kcal/US$)&quot;, &quot;protein&quot; : &quot;Protein (g/US$)&quot;, &quot;vitamin&quot; : &quot;Vitamin B12 (mcg/US$)&quot;, &quot;phosphorus&quot; : &quot;P (mg/US$)&quot;, &quot;iron&quot; : &quot;Fe (mg/US$)&quot;, &quot;zinc&quot; : &quot;Zn (mg/US$)&quot; } ref4 = {&quot;Energy Value&quot; : &quot;Energy value (kcal)&quot;, &quot;Protein&quot;: &quot;Protein (g)&quot;, &quot;Fat&quot; : &quot;Fat (g)&quot;, &quot;Saturated Fat&quot;: &quot;Saturated fat (g)&quot;, &quot;Cholesterol&quot; : &quot;Cholesterol (mg)&quot;, &quot;Vitamin B12&quot; &quot;Vitamin B12 (mcg)&quot; &quot;Sodium&quot; :&quot;Na (mg)&quot;, &quot;Phosphorus&quot; : &quot;P (mg)&quot;, &quot;Iron&quot; : &quot;Fe (mg)&quot;, &quot;Zinc&quot; : &quot;Zn (mg)&quot;} #ref1[&quot;Meat, raw/unprepared unless noted otherwise&quot;] ref[&quot;meat&quot;] ref3[&quot;energy Value&quot;.casefold()] ref4[&quot;Saturated Fat&quot;] if(name2.title() in ref4): test1 = True print(test1) . True . Testing Dictionary Outputs In Relation to Variables . category = &quot;meat&quot; columnTitle = &quot;retail cost&quot; categoryCase = category.casefold() columnTitleCase = columnTitle.casefold() categoryDictionary = {&quot;meat&quot;: &quot;Meat, raw/unprepared unless noted otherwise&quot;, &quot;fish&quot;: &quot;Fish, raw/unprepared&quot;, &quot;non_meat&quot; : &quot;Non-meat, raw/unprepared&quot;} columnDictionary = {&quot;retail cost&quot; : &quot;Retail Cost/100 g (US$)&quot;, &quot;energy value&quot; : &quot;Energy value (kcal/US$)&quot;, &quot;protein&quot; : &quot;Protein (g/US$)&quot;, &quot;vitamin&quot; : &quot;Vitamin B12 (mcg/US$)&quot;, &quot;phosphorus&quot; : &quot;P (mg/US$)&quot;, &quot;iron&quot; : &quot;Fe (mg/US$)&quot;, &quot;zinc&quot; : &quot;Zn (mg/US$)&quot; } #df_specific = df2[df2[&quot;Category&quot;] == categoryDictionary[categoryCase]].sort_values(by = [columnDictionary[columnTitleCase]]) #df_specific columnDictionary[columnTitleCase] . &#39;Retail Cost/100 g (US$)&#39; . Testing Solution To Backslashes Causing Issues in Python . allList = df2.columns.tolist() if(&quot;Retail Cost/100 xa0g (US$)&quot; in allList): print(&quot;worked&quot;) else: print(&quot;didn&#39;t work&quot;) allList . worked . [&#39;Category&#39;, &#39;Product&#39;, &#39;Retail Cost/100 xa0g (US$)&#39;, &#39;Source of estimationb&#39;, &#39;Energy value (kcal/US$)&#39;, &#39;Protein (g/US$)&#39;, &#39;Vitamin B12 (mcg/US$)&#39;, &#39;P (mg/US$)&#39;, &#39;Fe (mg/US$)&#39;, &#39;Zn (mg/US$)&#39;] . p= [] p.append(ref) df3 = pd.DataFrame(p) df3 if(name in p): test1 = . File &#34;&lt;ipython-input-526-f7fecc95bb11&gt;&#34;, line 8 test1 = ^ SyntaxError: invalid syntax . Previous versions of functions . These are previous iterations of the plotNutrition() function, I decided to keep them at the end in case you were curious about the evolution of nutrition function. When I started this project, I was had a early deadline. I started with a longer function so that could plot graphs for specific columns. . At the time, I did not realize that lines 11-15 were relatively the same. I also was not very comfortable with substituting dictionary entries for strings. When I had more time, I started to work on making the plot function more modular. In the final product you will notice that I have formal dictionaries calls. . Dictionary calls make the code more modular, but they also abstract the code more. If you are not careful with keeping track of your dictionary calls, diagnosing errors in the code become much harder . Energy Values Plotting Function . def plotEV(df, name): ref = {&quot;meat&quot;: &quot;Meat, raw/unprepared unless noted otherwise&quot;, &quot;fish&quot;: &quot;Fish, raw/unprepared&quot;, &quot;non_meat&quot; : &quot;Non-meat, raw/unprepared&quot;} caseInsensitiveName = name.casefold() if(caseInsensitiveName in ref): df_specific = df[df1[&quot;Category&quot;] == ref[caseInsensitiveName]].nsmallest(n = len(df), columns = &quot;Energy value (kcal)&quot;) objects = df_specific[&quot;Product&quot;] y_pos = np.arange(len(objects)) performance = df_specific[&quot;Energy value (kcal)&quot;] plt.barh(y_pos, performance, align=&#39;center&#39;, alpha=0.5) plt.yticks(y_pos, objects) plt.xlabel(&#39;Energy Value (kcal)&#39;) plt.title(name.title() + &#39; Energy Values Comparison&#39;) plt.figure(dpi=300) else: df = df.nsmallest(n = len(df), columns = &quot;Energy value (kcal)&quot;) objects = df[&quot;Product&quot;] y_pos = np.arange(len(objects)) performance = df[&quot;Energy value (kcal)&quot;] plt.barh(y_pos, performance, align=&#39;center&#39;, alpha=0.5) plt.yticks(y_pos, objects) plt.xlabel(&#39;Energy Value (kcal)&#39;) plt.title(&#39;All Energy Values Comparison&#39;) plt.tick_params(axis=&#39;y&#39;, which=&#39;major&#39;, labelsize=6) plt.figure(dpi=300) return plt . Protein Values Plotting Function . def plotProtein(df, name): ref = {&quot;meat&quot;: &quot;Meat, raw/unprepared unless noted otherwise&quot;, &quot;fish&quot;: &quot;Fish, raw/unprepared&quot;, &quot;non_meat&quot; : &quot;Non-meat, raw/unprepared&quot;} if(name in ref): df_specific = df[df1[&quot;Category&quot;] == ref[name]].nsmallest(n = len(df), columns = &quot;Protein (g)&quot;) objects = df_specific[&quot;Product&quot;] y_pos = np.arange(len(objects)) performance = df_specific[&quot;Protein (g)&quot;] plt.barh(y_pos, performance, align=&#39;center&#39;, alpha=0.5) plt.yticks(y_pos, objects) plt.xlabel(&#39;Protein (g)&#39;) plt.title(name.title( + &#39; Protein Values Comparison&#39;) plt.figure(dpi=300) else: df = df.nsmallest(n = len(df), columns = &quot;Protein (g)&quot;) objects = df[&quot;Product&quot;] y_pos = np.arange(len(objects)) performance = df[&quot;Protein (g)&quot;] plt.barh(y_pos, performance, align=&#39;center&#39;, alpha=0.5) plt.yticks(y_pos, objects) plt.xlabel(&#39;Protein (g)&#39;) plt.title(&#39;All Protein Values Comparison&#39;) plt.tick_params(axis=&#39;y&#39;, which=&#39;major&#39;, labelsize=5) plt.figure(dpi=300) return plt . File &#34;&lt;ipython-input-10-ba8e2741f3b2&gt;&#34;, line 13 plt.figure(dpi=300) ^ SyntaxError: invalid syntax .",
            "url": "https://progressedd.github.io/blog/2020/04/19/Nutrition-analysis.html",
            "relUrl": "/2020/04/19/Nutrition-analysis.html",
            "date": " • Apr 19, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "GitHub Actions: Providing Data Scientists With New Superpowers",
            "content": "What Superpowers? . Hi, I’m Hamel Husain. I’m a machine learning engineer at GitHub. Recently, GitHub released a new product called GitHub Actions, which has mostly flown under the radar in the machine learning and data science community as just another continuous integration tool. . Recently, I’ve been able to use GitHub Actions to build some very unique tools for Data Scientists, which I want to share with you today. Most importantly, I hope to get you excited about GitHub Actions, and the promise it has for giving you new superpowers as a Data Scientist. Here are two projects I recently built with Actions that show off its potential: . fastpages . fastpages is an automated, open-source blogging platform with enhanced support for Jupyter notebooks. You save your notebooks, markdown, or Word docs into a directory on GitHub, and they automatically become blog posts. Read the announcement below: . We&#39;re launching `fastpages`, a platform which allows you to host a blog for free, with no ads. You can blog with @ProjectJupyter notebooks, @office Word, directly from @github&#39;s markdown editor, etc.Nothing to install, &amp; setup is automated!https://t.co/dNSA0oQUrN . &mdash; Jeremy Howard (@jeremyphoward) February 24, 2020 Machine Learning Ops . Wouldn’t it be cool if you could invoke a chatbot natively on GitHub to test your machine learning models on the infrastructure of your choice (GPUs), log all the results, and give you a rich report back in a pull request so that everyone could see the results? You can with GitHub Actions! . Consider the below annotated screenshot of this Pull Request: . . A more in-depth explanation about the above project can be viewed in this video: . Using GitHub Actions for machine learning workflows is starting to catch on. Julien Chaumond, CTO of Hugging Face, says: . GitHub Actions are great because they let us do CI on GPUs (as most of our users use the library on GPUs not on CPUs), on our own infra! 1 . Additionally, you can host a GitHub Action for other people so others can use parts of your workflow without having to re-create your steps. I provide examples of this below. . A Gentle Introduction To GitHub Actions . What Are GitHub Actions? . GitHub Actions allow you to run arbitrary code in response to events. Events are activities that happen on GitHub such as: . Opening a pull request | Making an issue comment | Labeling an issue | Creating a new branch | … and many more | . When an event is created, the GitHub Actions context is hydrated with a payload containing metadata for that event. Below is an example of a payload that is received when an issue is created: . { &quot;action&quot;: &quot;created&quot;, &quot;issue&quot;: { &quot;id&quot;: 444500041, &quot;number&quot;: 1, &quot;title&quot;: &quot;Spelling error in the README file&quot;, &quot;user&quot;: { &quot;login&quot;: &quot;Codertocat&quot;, &quot;type&quot;: &quot;User&quot;, }, &quot;labels&quot;: [ { &quot;id&quot;: 1362934389, &quot;node_id&quot;: &quot;MDU6TGFiZWwxMzYyOTM0Mzg5&quot;, &quot;name&quot;: &quot;bug&quot;, } ], &quot;body&quot;: &quot;It looks like you accidently spelled &#39;commit&#39; with two &#39;t&#39;s.&quot; } . This functionality allows you to respond to various events on GitHub in an automated way. In addition to this payload, GitHub Actions also provide a plethora of variables and environment variables that afford easy to access metadata such as the username and the owner of the repo. Additionally, other people can package useful functionality into an Action that other people can inherit. For example, consider the below Action that helps you publish python packages to PyPi: . The Usage section describes how this Action can be used: . - name: Publish a Python distribution to PyPI uses: pypa/gh-action-pypi-publish@master with: user: __token__ password: ${{ secrets.pypi_password }} . This Action expects two inputs: user and a password. You will notice that the password is referencing a variable called secrets, which is a variable that contains an encrypted secret that you can upload to your GitHub repository. There are thousands of Actions (that are free) for a wide variety of tasks that can be discovered on the GitHub Marketplace. The ability to inherit ready-made Actions in your workflow allows you to accomplish complex tasks without implementing all of the logic yourself. Some useful Actions for those getting started are: . actions/checkout: Allows you to quickly clone the contents of your repository into your environment, which you often want to do. This does a number of other things such as automatically mount your repository’s files into downstream Docker containers. | mxschmitt/action-tmate: Proivdes a way to debug Actions interactively. This uses port forwarding to give you a terminal in the browser that is connected to your Actions runner. Be careful not to expose sensitive information if you use this. | actions/github-script: Gives you a pre-authenticated ocotokit.js client that allows you to interact with the GitHub API to accomplish almost any task on GitHub automatically. Only these endpoints are supported (for example, the secrets endpoint is not in that list). | . In addition to the aforementioned Actions, it is helpful to go peruse the official GitHub Actions docs before diving in. . Example: A fastpages Action Workflow . The best to way familiarize yourself with Actions is by studying examples. Let’s take a look at the Action workflow that automates the build of fastpages (the platform used to write this blog post). . Part 1: Define Workflow Triggers . First, we define triggers in ci.yaml. Like all Actions workflows, this is a YAML file located in the .github/workflows directory of the GitHub repo. . The top of this YAML file looks like this: . name: CI on: push: branches: - master pull_request: . This means that this workflow is triggered on either a push or pull request event. Furthermore, push events are filtered such that only pushes to the master branch will trigger the workflow, whereas all pull requests will trigger this workflow. It is important to note that pull requests opened from forks will have read-only access to the base repository and cannot access any secrets for security reasons. The reason for defining the workflow in this way is we wanted to trigger the same workflow to test pull requests as well as build and deploy the website when a PR is merged into master. This will be clarified as we step through the rest of the YAML file. . Part 2: Define Jobs . Next, we define jobs (there is only one in this workflow). Per the docs: . A workflow run is made up of one or more jobs. Jobs run in parallel by default. . jobs: build-site: if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 runs-on: ubuntu-latest steps: . The keyword build-site is the name of your job and you can name it whatever you want. In this case, we have a conditional if statement that dictates if this job should be run or not. We are trying to ensure that this workflow does not run when the first commit to a repo is made with the message ‘Initial commit’. The first variable in the if statement, github.event, contains a json payload of the event that triggered this workflow. When developing workflows, it is helpful to print this variable in order to inspect its structure, which you can accomplish with the following YAML: . - name: see payload run: | echo &quot;PAYLOAD: n${PAYLOAD} n&quot; env: PAYLOAD: ${{ toJSON(github.event) }} . Note: the above step is only for debugging and is not currently in the workflow. . toJson is a handy function that returns a pretty-printed JSON representation of the variable. The output is printed directly in the logs contained in the Actions tab of your repo. In this example, printing the payload for a push event will look like this (truncated for brevity): . { &quot;ref&quot;: &quot;refs/tags/simple-tag&quot;, &quot;before&quot;: &quot;6113728f27ae8c7b1a77c8d03f9ed6e0adf246&quot;, &quot;created&quot;: false, &quot;deleted&quot;: true, &quot;forced&quot;: false, &quot;base_ref&quot;: null, &quot;commits&quot;: [ { &quot;message&quot;: &quot;updated README.md&quot;, &quot;author&quot;: &quot;hamelsmu&quot; }, ], &quot;head_commit&quot;: null, } . Therefore, the variable github.event.commits[0].message will retrieve the first commit message in the array of commits. Since we are looking for situations where there is only one commit, this logic suffices. The second variable in the if statement, github.run_number is a special variable in Actions which: . [is a] unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow’s first run, and increments with each new run. This number does not change if you re-run the workflow run. . Therefore, the if statement introduced above: . if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &gt; 1 . Allows the workflow to run when the commit message is “Initial commit” as long as it is not the first commit. ( || is a logical or operator). . Finally, the line runs-on: ubuntu-latest specifies the host operating system that your workflows will run in. . Part 3: Define Steps . Per the docs: . A job contains a sequence of tasks called steps. Steps can run commands, run setup tasks, or run an Action in your repository, a public repository, or an Action published in a Docker registry. Not all steps run Actions, but all Actions run as a step. Each step runs in its own process in the runner environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job. . Below are the first two steps in our workflow: . - name: Copy Repository Contents uses: actions/checkout@master with: persist-credentials: false - name: convert notebooks and word docs to posts uses: ./_action_files . The first step creates a copy of your repository in the Actions file system, with the help of the utility action/checkout. This utility only fetches the last commit by default and saves files into a directory (whose path is stored in the environment variable GITHUB_WORKSPACE that is accessible by subsequent steps in your job. The second step runs the fastai/fastpages Action, which converts notebooks and word documents to blog posts automatically. In this case, the syntax: . uses: ./_action_files . is a special case where the pre-made GitHub Action we want to run happens to be defined in the same repo that runs this workflow. This syntax allows us to test changes to this pre-made Action when evaluating PRs by referencing the directory in the current repository that defines that pre-made Action. Note: Building pre-made Actions is beyond the scope of this tutorial. . The next three steps in our workflow are defined below: . - name: setup directories for Jekyll build run: | rm -rf _site sudo chmod -R 777 . - name: Jekyll build uses: docker://fastai/fastpages-jekyll with: args: bash -c &quot;gem install bundler &amp;&amp; jekyll build -V&quot; env: JEKYLL_ENV: &#39;production&#39; - name: copy CNAME file into _site if CNAME exists run: | sudo chmod -R 777 _site/ cp CNAME _site/ 2&gt;/dev/null || : . The step named setup directories for Jekyll build executes shell commands that remove the _site folder in order to get rid of stale files related to the page we want to build, as well as grant permissions to all the files in our repo to subsequent steps. . The step named Jekyll build executes a docker container hosted by the Jekyll community on Dockerhub called jekyll/jekyll. For those not familiar with Docker, see this tutorial. The name of this container is called fastai/fastpages-jekyll because I’m adding some additional dependencies to jekyll/jekyll and hosting those on my DockerHub account for faster build times2. The args parameter allows you to execute arbitrary commands with the Docker container by overriding the CMD instruction in the Dockerfile. We use this Docker container hosted on Dockerhub so we don’t have to deal with installing and configuring all of the complicated dependencies for Jekyll. The files from our repo are already available in the Actions runtime due to the first step in this workflow, and are mounted into this Docker container automatically for us. In this case, we are running the command jekyll build, which builds our website and places relevant assets them into the _site folder. For more information about Jekyll, read the official docs. Finally, the env parameter allows me to pass an environment variable into the Docker container. . The final command above copies a CNAME file into the _site folder, which we need for the custom domain https://fastpages.fast.ai. Setting up custom domains are outside the scope of this article. . The final step in our workflow is defined below: . - name: Deploy if: github.event_name == &#39;push&#39; uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.SSH_DEPLOY_KEY }} publish_dir: ./_site . The statement . if: github.event_name == &#39;push&#39; . uses the variable github.event_name to ensure this step only runs when a push event ( in this case only pushes to the master branch trigger this workflow) occur. . This step deploys the fastpages website by copying the contents of the _site folder to the root of the gh-pages branch, which GitHub Pages uses for hosting. This step uses the peaceiris/actions-gh-pages Action, pinned at version 3. Their README describes various options and inputs for this Action. . Conclusion . We hope that this has shed some light on how we use GitHub Actions to automate fastpages. While we only covered one workflow above, we hope this provides enough intuition to understand the other workflows in fastpages. We have only scratched the surface of GitHub Actions in this blog post, but we provide other materials below for those who want to dive in deeper. We have not covered how to host an Action for other people, but you can start with these docs to learn more. . Still confused about how GitHub Actions could be used for Data Science? Here are some ideas of things you can build: . Jupyter Widgets that trigger GitHub Actions to perform various tasks on GitHub via the repository dispatch event | Integration with Pachyderm for data versioning. | Integration with your favorite cloud machine learning services, such Sagemaker, Azure ML or GCP’s AI Platform. | . Related Materials . GitHub Actions official documentation | Hello world Docker Action: A template to demonstrate how to build a Docker Action for other people to use. | Awesome Actions: A curated list of interesting GitHub Actions by topic. | A tutorial on Docker for Data Scientists. | . Getting In Touch . Please feel free to get in touch with us on Twitter: . Hamel Husain @HamelHusain | Jeremy Howard @jeremyphoward | . . Footnotes . You can see some of Hugging Face’s Actions workflows for machine learning on GitHub &#8617; . | These additional dependencies are defined here, which uses the “jekyll build” command to add ruby dedpendencies from the Gemfile located at the root of the repo. Additionally, this docker image is built by another Action workflow defined here. &#8617; . |",
            "url": "https://progressedd.github.io/blog/actions/markdown/2020/03/06/fastpages-actions.html",
            "relUrl": "/actions/markdown/2020/03/06/fastpages-actions.html",
            "date": " • Mar 6, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://progressedd.github.io/blog/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://progressedd.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "Analysis on the Pros of Overwatch",
            "content": "Table of Contents . 1&nbsp;&nbsp;Analysis on the Pros of Overwatch | 2&nbsp;&nbsp;Loading the Data Frame | 3&nbsp;&nbsp;Relations Between Stats | 4&nbsp;&nbsp;Figuring Out Which Pro has The Best Stats4.1&nbsp;&nbsp;Most Eliminations | 4.2&nbsp;&nbsp;Most Damage Dealt | 4.3&nbsp;&nbsp;Most Final Blows Dealt | 4.4&nbsp;&nbsp;Most Ultimates Earned | 4.5&nbsp;&nbsp;Most Healing Dealt | 4.6&nbsp;&nbsp;Least Deaths Recieved | 4.7&nbsp;&nbsp;Most Playtime Recived | 4.8&nbsp;&nbsp;Least Playtime Recived | . | 5&nbsp;&nbsp;Explanation For What I have chosen | 6&nbsp;&nbsp;Grouping by role6.1&nbsp;&nbsp;Counts For Each Role | 6.2&nbsp;&nbsp;How Many Eliminations Do Each Role Get? | 6.3&nbsp;&nbsp;How Much Damage is Dealt by Each Role? | 6.4&nbsp;&nbsp;How Many Deaths Do Each Role Get? | . | 7&nbsp;&nbsp;How do teams affect statistics7.1&nbsp;&nbsp;How Many Eliminations Do Each Team Get? | 7.2&nbsp;&nbsp;How Much Damage is Dealt by Each Team? | 7.3&nbsp;&nbsp;How Many Deaths is Recieved By Each Team? | . | 8&nbsp;&nbsp;Linear Regression? | . import pandas as pd from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:100% !important; }&lt;/style&gt;&quot;)) . Loading the Data Frame . I used the pandas library to import my csv file to a Dataframe . df = pd.read_csv(&quot;owl.csv&quot;) df . playerId teamId role name team eliminations_avg_per_10m deaths_avg_per_10m hero_damage_avg_per_10m healing_avg_per_10m ultimates_earned_avg_per_10m final_blows_avg_per_10m time_played_total count . 0 8675 | 7693 | offense | Adora | HZS | 16.002129 | 3.876235 | 5390.964430 | 5678.864360 | 4.410253 | 4.134037 | 65166.328327 | 1 | . 1 3985 | 4523 | offense | aKm | DAL | 17.296143 | 5.178533 | 9600.623636 | 158.646056 | 4.575825 | 6.050875 | 75658.485169 | 1 | . 2 8812 | 7692 | tank | ameng | CDH | 16.470544 | 6.202665 | 7051.640852 | 0.724798 | 4.511644 | 5.046006 | 88703.810417 | 1 | . 3 4841 | 4403 | support | Anamo | NYE | 14.165021 | 2.745207 | 3948.127250 | 6563.244540 | 3.567532 | 1.898150 | 97041.863429 | 1 | . 4 5715 | 4404 | offense | Architect | SFS | 18.181756 | 4.555888 | 7825.862117 | 3806.894747 | 4.639483 | 8.087747 | 28710.098079 | 1 | . 5 4652 | 7697 | support | ArK | WAS | 7.870130 | 2.641469 | 2482.555936 | 6825.268613 | 3.518943 | 1.320735 | 66326.727702 | 1 | . 6 5878 | 4402 | tank | Axxiom | BOS | 13.589015 | 6.323052 | 7227.732159 | 0.000000 | 3.771645 | 3.383387 | 10817.561445 | 1 | . 7 4491 | 7698 | offense | babybay | ATL | 18.285137 | 4.898535 | 9724.894013 | 153.512705 | 4.520151 | 6.320031 | 58670.601443 | 1 | . 8 8896 | 7692 | offense | Baconjack | CDH | 15.605830 | 6.119487 | 7305.171594 | 123.938222 | 4.231318 | 6.506221 | 26374.758866 | 1 | . 9 4624 | 4525 | support | Bani | HOU | 11.303448 | 5.257418 | 4791.691330 | 6825.377770 | 3.680192 | 2.102967 | 2282.489336 | 1 | . 10 8676 | 7693 | offense | Bazzi | HZS | 15.814585 | 5.846427 | 5369.937012 | 7506.352638 | 4.589445 | 3.800178 | 20525.356901 | 1 | . 11 4655 | 4410 | support | Bdosin | LDN | 15.048464 | 4.107217 | 6983.868463 | 8836.736647 | 4.746420 | 3.882816 | 88234.919687 | 1 | . 12 8731 | 7693 | support | BEBE | HZS | 14.154976 | 3.952661 | 7197.340358 | 9429.701829 | 4.803399 | 3.533836 | 91685.070527 | 1 | . 13 8708 | 7694 | tank | BenBest | PAR | 13.411352 | 6.584489 | 6648.912608 | 0.000000 | 4.201147 | 4.026099 | 44559.264875 | 1 | . 14 4643 | 4406 | support | BigG00se | GLA | 12.350082 | 4.683845 | 3870.859580 | 6429.321595 | 3.655210 | 2.206065 | 92744.320062 | 1 | . 15 4639 | 7699 | tank | Bischu | GZC | 16.794393 | 5.927433 | 7229.213813 | 1836.443127 | 2.963716 | 8.891149 | 1214.691094 | 1 | . 16 8184 | 4525 | offense | blase | HOU | 14.115152 | 5.688758 | 5288.563477 | 5127.842249 | 3.993433 | 4.545983 | 95556.889781 | 1 | . 17 4625 | 4525 | support | Boink | HOU | 8.675604 | 5.084554 | 2736.000684 | 5754.139120 | 3.133041 | 1.772292 | 90391.403033 | 1 | . 18 4079 | 4524 | support | Boombox | PHI | 14.716397 | 4.686374 | 6282.962865 | 9251.731158 | 4.765247 | 3.542715 | 91285.929199 | 1 | . 19 8704 | 4407 | offense | bqb | FLA | 16.439333 | 4.809016 | 8641.233568 | 319.525665 | 4.536164 | 4.972728 | 87959.775570 | 1 | . 20 8771 | 7696 | tank | BUMPER | VAN | 16.630474 | 5.906248 | 7969.093625 | 6.324790 | 4.654208 | 5.399093 | 113574.634219 | 1 | . 21 10031 | 4407 | support | byrem | FLA | 11.418219 | 5.360666 | 5266.262933 | 7719.478526 | 3.752466 | 4.127713 | 11192.639166 | 1 | . 22 4620 | 4524 | offense | carpe | PHI | 17.983018 | 4.844880 | 8782.867900 | 137.704463 | 4.146629 | 7.031507 | 97959.083057 | 1 | . 23 8721 | 7699 | support | Chara | GZC | 10.361039 | 3.866669 | 3932.990917 | 5914.067038 | 3.253993 | 1.912912 | 88137.878443 | 1 | . 24 5831 | 4404 | tank | Choihyobin | SFS | 19.391551 | 3.472553 | 6035.142896 | 302.338209 | 2.882165 | 5.957548 | 111790.956037 | 1 | . 25 4663 | 4523 | support | Closer | DAL | 10.935586 | 3.527819 | 3511.197807 | 6354.660012 | 3.377837 | 1.936714 | 92011.533219 | 1 | . 26 5306 | 4402 | offense | ColourHex | BOS | 14.899417 | 5.548090 | 8649.812908 | 168.870374 | 3.966816 | 5.752565 | 88030.291299 | 1 | . 27 8892 | 4408 | support | CoMa | SHD | 7.909984 | 3.700223 | 2070.655671 | 6161.834635 | 3.184618 | 1.389100 | 98912.968913 | 1 | . 28 4138 | 4525 | tank | coolmatt | HOU | 15.208515 | 4.527089 | 6774.211482 | 183.137562 | 4.214156 | 4.777435 | 28760.204940 | 1 | . 29 8784 | 7697 | offense | Corey | WAS | 15.025158 | 5.201795 | 9003.292089 | 127.436107 | 4.608075 | 7.036929 | 88930.845029 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 123 9155 | 7693 | offense | SASIN | HZS | 15.217982 | 4.972212 | 6304.243753 | 450.467436 | 2.862789 | 6.026923 | 3982.131229 | 1 | . 124 5442 | 4407 | offense | sayaplayer | FLA | 13.396877 | 5.487655 | 6048.630900 | 4204.440753 | 4.051289 | 6.067726 | 65164.442533 | 1 | . 125 8728 | 7696 | offense | SeoMinSoo | VAN | 21.092578 | 3.588644 | 10933.062491 | 198.216055 | 5.075465 | 7.048881 | 88780.044028 | 1 | . 126 10041 | 4405 | offense | Shax | VAL | 16.920446 | 5.694832 | 6499.728449 | 332.208914 | 4.148087 | 6.515075 | 25602.161674 | 1 | . 127 4644 | 4406 | support | Shaz | GLA | 14.269397 | 4.063945 | 6467.514174 | 10113.314711 | 4.988753 | 3.243341 | 92127.225783 | 1 | . 128 8725 | 7699 | support | shu | GZC | 14.059122 | 3.826302 | 6458.460594 | 8793.613298 | 4.767641 | 3.609592 | 88597.283044 | 1 | . 129 4139 | 4404 | offense | sinatraa | SFS | 20.914314 | 3.497822 | 11849.397959 | 111.562321 | 5.252785 | 7.019851 | 99147.405428 | 1 | . 130 8749 | 7696 | support | SLIME | VAN | 14.527621 | 3.703972 | 4165.190298 | 5882.757861 | 3.192704 | 2.724949 | 110314.003005 | 1 | . 131 7831 | 4404 | tank | Smurf | SFS | 17.720797 | 4.922444 | 6587.333835 | 0.000000 | 3.999486 | 4.983974 | 19502.508479 | 1 | . 132 4493 | 4524 | offense | snillo | PHI | 13.115663 | 7.286479 | 4268.438247 | 6369.452283 | 2.914592 | 2.914592 | 411.721471 | 1 | . 133 3987 | 7694 | offense | SoOn | PAR | 17.156117 | 6.122379 | 8755.638934 | 181.999070 | 4.459629 | 6.852836 | 62426.713501 | 1 | . 134 4637 | 4406 | tank | SPACE | GLA | 16.937870 | 3.754919 | 6297.654849 | 349.497358 | 4.028947 | 5.421303 | 81013.727587 | 1 | . 135 4094 | 4525 | tank | SPREE | HOU | 16.057987 | 4.951975 | 7074.346063 | 442.661626 | 3.723781 | 5.265556 | 45921.072883 | 1 | . 136 8747 | 7696 | offense | Stitch | VAN | 17.654422 | 5.264495 | 7419.042221 | 628.318125 | 4.211596 | 6.807114 | 24503.776509 | 1 | . 137 8783 | 7697 | offense | Stratus | WAS | 15.851749 | 5.322345 | 6520.332819 | 1105.055288 | 3.785206 | 5.648987 | 31226.837463 | 1 | . 138 4610 | 4404 | offense | STRIKER | SFS | 16.207208 | 6.053294 | 7380.909425 | 140.294067 | 4.491154 | 8.201238 | 6145.413898 | 1 | . 139 4490 | 4404 | tank | super | SFS | 17.351664 | 5.256228 | 8277.983328 | 5.826254 | 4.657262 | 6.197460 | 98169.257876 | 1 | . 140 4144 | 4406 | offense | Surefour | GLA | 16.264683 | 4.850343 | 7702.970198 | 2334.307256 | 4.409403 | 6.784467 | 59872.055648 | 1 | . 141 3380 | 4523 | offense | Taimou | DAL | 13.643140 | 5.311080 | 6980.864470 | 353.580132 | 4.141668 | 6.724119 | 12313.880814 | 1 | . 142 4104 | 4409 | support | tobi | SEO | 12.527639 | 3.561285 | 3821.983777 | 6536.903535 | 3.460255 | 2.083730 | 47510.945922 | 1 | . 143 10021 | 4523 | tank | Trill | DAL | 11.016714 | 6.549455 | 5723.625044 | 0.000000 | 3.482947 | 3.369373 | 15848.646641 | 1 | . 144 8729 | 7696 | support | Twilight | VAN | 16.044986 | 4.139107 | 7122.262343 | 9320.446421 | 5.048997 | 4.156948 | 100891.334471 | 1 | . 145 3983 | 4523 | support | uNKOE | DAL | 12.889446 | 4.796602 | 5795.335146 | 9419.885852 | 4.592007 | 3.175002 | 79181.059063 | 1 | . 146 8688 | 4404 | support | Viol2t | SFS | 17.185764 | 4.195764 | 7637.591409 | 10409.200261 | 5.300486 | 4.440653 | 110254.045210 | 1 | . 147 5809 | 4406 | tank | Void | GLA | 19.343389 | 3.178936 | 6457.220391 | 250.965632 | 2.048810 | 5.555847 | 82291.682828 | 1 | . 148 8710 | 7692 | offense | YangXiaoLong | CDH | 15.342481 | 5.957453 | 7572.263394 | 299.683611 | 4.115422 | 6.295547 | 51464.949743 | 1 | . 149 8894 | 4408 | offense | YOUNGJIN | SHD | 17.674387 | 5.835630 | 6183.788216 | 5143.003544 | 4.046751 | 6.204125 | 89553.317851 | 1 | . 150 8813 | 7692 | support | Yveltal | CDH | 7.512112 | 4.692623 | 2209.111332 | 7691.353637 | 3.602681 | 1.520697 | 91931.532277 | 1 | . 151 8642 | 4523 | offense | ZachaREEE | DAL | 15.167823 | 5.666740 | 5698.414532 | 6211.639093 | 4.642945 | 3.866947 | 92010.565901 | 1 | . 152 4098 | 4409 | tank | ZUNBA | SEO | 18.577579 | 2.959663 | 6789.544551 | 0.000000 | 2.549864 | 5.737194 | 13177.174514 | 1 | . 153 rows × 13 columns . Relations Between Stats . We are going to make a correlation table with the .corr() Function . df_correleations = df[[&quot;eliminations_avg_per_10m&quot;,&quot;deaths_avg_per_10m&quot;,&quot;hero_damage_avg_per_10m&quot;,&quot;healing_avg_per_10m&quot;,&quot;ultimates_earned_avg_per_10m&quot;,&quot;final_blows_avg_per_10m&quot;,&quot;time_played_total&quot;]] df_corr_table = df_correleations.corr() df_corr_table . eliminations_avg_per_10m deaths_avg_per_10m hero_damage_avg_per_10m healing_avg_per_10m ultimates_earned_avg_per_10m final_blows_avg_per_10m time_played_total . eliminations_avg_per_10m 1.000000 | -0.053546 | 0.702982 | -0.520182 | 0.108123 | 0.768385 | 0.184809 | . deaths_avg_per_10m -0.053546 | 1.000000 | 0.157248 | -0.242843 | 0.131407 | 0.183793 | -0.312624 | . hero_damage_avg_per_10m 0.702982 | 0.157248 | 1.000000 | -0.468124 | 0.467872 | 0.756272 | 0.130058 | . healing_avg_per_10m -0.520182 | -0.242843 | -0.468124 | 1.000000 | 0.345956 | -0.662879 | 0.021491 | . ultimates_earned_avg_per_10m 0.108123 | 0.131407 | 0.467872 | 0.345956 | 1.000000 | 0.100654 | 0.123582 | . final_blows_avg_per_10m 0.768385 | 0.183793 | 0.756272 | -0.662879 | 0.100654 | 1.000000 | 0.007640 | . time_played_total 0.184809 | -0.312624 | 0.130058 | 0.021491 | 0.123582 | 0.007640 | 1.000000 | . This is great, but let&#39;s filter out correlations below .5 because they aren&#39;t strong . df_corr_table[(df_corr_table&gt; .5) | (df_corr_table &lt;-.5) &amp; (df_corr_table &lt; 1.0)] . eliminations_avg_per_10m deaths_avg_per_10m hero_damage_avg_per_10m healing_avg_per_10m ultimates_earned_avg_per_10m final_blows_avg_per_10m time_played_total . eliminations_avg_per_10m 1.000000 | NaN | 0.702982 | -0.520182 | NaN | 0.768385 | NaN | . deaths_avg_per_10m NaN | 1.0 | NaN | NaN | NaN | NaN | NaN | . hero_damage_avg_per_10m 0.702982 | NaN | 1.000000 | NaN | NaN | 0.756272 | NaN | . healing_avg_per_10m -0.520182 | NaN | NaN | 1.000000 | NaN | -0.662879 | NaN | . ultimates_earned_avg_per_10m NaN | NaN | NaN | NaN | 1.0 | NaN | NaN | . final_blows_avg_per_10m 0.768385 | NaN | 0.756272 | -0.662879 | NaN | 1.000000 | NaN | . time_played_total NaN | NaN | NaN | NaN | NaN | NaN | 1.0 | . this looks great, but we are going to make this cleaner with the .drop() function so that the table doesn&#39;t have so many NaNs . df_column_drop = df_corr_table.drop([&quot;deaths_avg_per_10m&quot;, &quot;ultimates_earned_avg_per_10m&quot;, &quot;time_played_total&quot;]) df_relevant_correlations = df_column_drop.drop([&quot;deaths_avg_per_10m&quot;, &quot;ultimates_earned_avg_per_10m&quot;, &quot;time_played_total&quot;],axis=1) df_relevant_correlations . eliminations_avg_per_10m hero_damage_avg_per_10m healing_avg_per_10m final_blows_avg_per_10m . eliminations_avg_per_10m 1.000000 | 0.702982 | -0.520182 | 0.768385 | . hero_damage_avg_per_10m 0.702982 | 1.000000 | -0.468124 | 0.756272 | . healing_avg_per_10m -0.520182 | -0.468124 | 1.000000 | -0.662879 | . final_blows_avg_per_10m 0.768385 | 0.756272 | -0.662879 | 1.000000 | . it appears that . Eliminations and Hero Damage have a strong positive correlation with each other . Eliminations and Final blows have a strong positive correlation with each other . Eliminations and Healing have a moderate negative correlation with each other . Final blows and Hero damage have a strong positive correlation with each other . Final blows and Healing have a moderate negative correlation with each other . Figuring Out Which Pro has The Best Stats . Let&#39;s take a look at which Pros have the most eliminations, damage dealt, final blows, ultimates earned, healing dealt, and least number of deaths . Most Eliminations . df_elims = df[[&quot;role&quot;, &quot;name&quot;, &quot;team&quot;, &quot;eliminations_avg_per_10m&quot;]] df_elims.nlargest(10, &quot;eliminations_avg_per_10m&quot;) . role name team eliminations_avg_per_10m . 125 offense | SeoMinSoo | VAN | 21.092578 | . 129 offense | sinatraa | SFS | 20.914314 | . 75 tank | JJANU | VAN | 20.056908 | . 24 tank | Choihyobin | SFS | 19.391551 | . 98 offense | Nenne | NYE | 19.365667 | . 147 tank | Void | GLA | 19.343389 | . 59 offense | Haksal | VAN | 19.341104 | . 35 offense | diem | SHD | 19.069305 | . 93 tank | Michelle | SEO | 18.928176 | . 43 offense | FITS | SEO | 18.882519 | . Most Damage Dealt . df_damage = df[[&quot;role&quot;, &quot;name&quot;, &quot;team&quot;, &quot;hero_damage_avg_per_10m&quot;]] df_damage.nlargest(10, &quot;hero_damage_avg_per_10m&quot;) . role name team hero_damage_avg_per_10m . 129 offense | sinatraa | SFS | 11849.397959 | . 125 offense | SeoMinSoo | VAN | 10933.062491 | . 36 offense | Diya | SHD | 10081.816984 | . 69 offense | ivy | TOR | 9899.923990 | . 7 offense | babybay | ATL | 9724.894013 | . 56 offense | GodsB | HZS | 9683.685510 | . 1 offense | aKm | DAL | 9600.623636 | . 43 offense | FITS | SEO | 9527.150428 | . 98 offense | Nenne | NYE | 9397.008782 | . 116 support | Ripa | GLA | 9261.831927 | . Most Final Blows Dealt . df_final_blows = df[[&quot;role&quot;, &quot;name&quot;, &quot;team&quot;, &quot;final_blows_avg_per_10m&quot;]] df_final_blows.nlargest(10, &quot;final_blows_avg_per_10m&quot;) . role name team final_blows_avg_per_10m . 15 tank | Bischu | GZC | 8.891149 | . 87 offense | Logix | TOR | 8.368265 | . 138 offense | STRIKER | SFS | 8.201238 | . 4 offense | Architect | SFS | 8.087747 | . 35 offense | diem | SHD | 7.917622 | . 86 offense | LiNkzr | HOU | 7.424964 | . 45 tank | fragi | GZC | 7.409291 | . 36 offense | Diya | SHD | 7.223194 | . 99 offense | nero | GZC | 7.065229 | . 125 offense | SeoMinSoo | VAN | 7.048881 | . Most Ultimates Earned . df_ultimates = df[[&quot;role&quot;, &quot;name&quot;, &quot;team&quot;, &quot;ultimates_earned_avg_per_10m&quot;]] df_ultimates.nlargest(10, &quot;ultimates_earned_avg_per_10m&quot;) . role name team ultimates_earned_avg_per_10m . 116 support | Ripa | GLA | 6.299542 | . 110 support | RAPEL | VAN | 5.533913 | . 146 support | Viol2t | SFS | 5.300486 | . 129 offense | sinatraa | SFS | 5.252785 | . 78 support | Krillin | LDN | 5.159678 | . 111 offense | Rascal | SFS | 5.150937 | . 70 support | IZaYaKI | SHD | 5.089731 | . 125 offense | SeoMinSoo | VAN | 5.075465 | . 144 support | Twilight | VAN | 5.048997 | . 81 offense | Krystal | HZS | 5.003493 | . Most Healing Dealt . df_heals = df[[&quot;role&quot;, &quot;name&quot;, &quot;team&quot;, &quot;healing_avg_per_10m&quot;]] df_heals.nlargest(10, &quot;healing_avg_per_10m&quot;) . role name team healing_avg_per_10m . 116 support | Ripa | GLA | 12489.082153 | . 61 support | HarryHook | DAL | 10731.194372 | . 70 support | IZaYaKI | SHD | 10720.448760 | . 110 support | RAPEL | VAN | 10575.563042 | . 66 support | HyP | PAR | 10568.360507 | . 78 support | Krillin | LDN | 10410.303999 | . 146 support | Viol2t | SFS | 10409.200261 | . 127 support | Shaz | GLA | 10113.314711 | . 12 support | BEBE | HZS | 9429.701829 | . 145 support | uNKOE | DAL | 9419.885852 | . Least Deaths Recieved . df_deaths = df[[&quot;role&quot;, &quot;name&quot;, &quot;team&quot;, &quot;deaths_avg_per_10m&quot;]] df_deaths.nsmallest(10, &quot;deaths_avg_per_10m&quot;) . role name team deaths_avg_per_10m . 5 support | ArK | WAS | 2.641469 | . 3 support | Anamo | NYE | 2.745207 | . 152 tank | ZUNBA | SEO | 2.959663 | . 147 tank | Void | GLA | 3.178936 | . 93 tank | Michelle | SEO | 3.239774 | . 75 tank | JJANU | VAN | 3.381134 | . 24 tank | Choihyobin | SFS | 3.472553 | . 105 support | Onlywish | GZC | 3.493403 | . 129 offense | sinatraa | SFS | 3.497822 | . 25 support | Closer | DAL | 3.527819 | . It wouldn&#39;t be fair to judge the stats for pro&#39;s who don&#39;t get a lot of play time. . let&#39;s see which pros got the most play time . Most Playtime Recived . df_time_largest = df[[&quot;role&quot;, &quot;name&quot;, &quot;team&quot;, &quot;time_played_total&quot;]] df_time_largest.nlargest(10, &quot;time_played_total&quot;) . role name team time_played_total . 95 support | moth | SFS | 116859.144868 | . 20 tank | BUMPER | VAN | 113574.634219 | . 24 tank | Choihyobin | SFS | 111790.956037 | . 130 support | SLIME | VAN | 110314.003005 | . 146 support | Viol2t | SFS | 110254.045210 | . 59 offense | Haksal | VAN | 109848.948995 | . 75 tank | JJANU | VAN | 107005.528668 | . 111 offense | Rascal | SFS | 102156.164167 | . 144 support | Twilight | VAN | 100891.334471 | . 129 offense | sinatraa | SFS | 99147.405428 | . Least Playtime Recived . df_time_smallest = df[[&quot;role&quot;, &quot;name&quot;, &quot;team&quot;, &quot;time_played_total&quot;]] df_time_smallest.nsmallest(10, &quot;time_played_total&quot;) . role name team time_played_total . 132 offense | snillo | PHI | 411.721471 | . 77 tank | Karayan | FLA | 496.426940 | . 36 offense | Diya | SHD | 498.394445 | . 116 support | Ripa | GLA | 666.715092 | . 47 support | FunnyAstro | ATL | 1020.976662 | . 15 tank | Bischu | GZC | 1214.691094 | . 45 tank | fragi | GZC | 1214.691094 | . 53 tank | Gator | ATL | 1735.402076 | . 94 tank | Mickie | DAL | 2149.076643 | . 105 support | Onlywish | GZC | 2232.780163 | . Explanation For What I have chosen . I have choosen Eliminations, Damage, and Deaths for this project because I wanted to apply the findings to my own games. . Although these statistics do not reflect the skill level of a player, I personally would like to use these to figure out how I personally compare in my own competitive games to the pros. . Grouping by role . Which roles has the best in the various categories . df_group_role = df.groupby(&quot;role&quot;) df_group_role = df_group_role.agg(&quot;sum&quot;).reset_index() df_group_role . role playerId teamId eliminations_avg_per_10m deaths_avg_per_10m hero_damage_avg_per_10m healing_avg_per_10m ultimates_earned_avg_per_10m final_blows_avg_per_10m time_played_total count . 0 offense | 386317 | 334557 | 946.176006 | 291.759163 | 425826.207321 | 130963.348462 | 246.230313 | 341.229728 | 3.354968e+06 | 57 | . 1 support | 352231 | 289111 | 599.786627 | 214.251135 | 238364.322933 | 386289.038203 | 202.228107 | 135.218342 | 3.153147e+06 | 49 | . 2 tank | 316162 | 270656 | 768.694654 | 242.023534 | 307152.496101 | 9071.285277 | 167.693455 | 242.304149 | 2.905581e+06 | 47 | . df_group_role.plot.bar(x = &quot;role&quot;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5a30cce470&gt; . Counts For Each Role . df_group_role[[&quot;role&quot;,&quot;count&quot;]] . role count . 0 offense | 57 | . 1 support | 49 | . 2 tank | 47 | . df_group_role.plot.bar(x = &quot;role&quot;, y = &quot;count&quot; ) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5a30398550&gt; . across all the roles, the count seems to be pretty spread evenly . How Many Eliminations Do Each Role Get? . They say that DPS should be the ones who get the most eliminations. That is true, however, tanks are pretty close to DPS. . df_group_role[&quot;Overall Average Eliminations Per 10m&quot;] = df_group_role[&quot;eliminations_avg_per_10m&quot;]/df_group_role[&quot;count&quot;] df_group_role_elimminations = df_group_role[[&quot;role&quot;,&quot;Overall Average Eliminations Per 10m&quot;]] df_group_role_elimminations.nlargest(3, &quot;Overall Average Eliminations Per 10m&quot;) . role Overall Average Eliminations Per 10m . 0 offense | 16.599579 | . 2 tank | 16.355205 | . 1 support | 12.240543 | . df_group_role.plot.bar(x = &quot;role&quot;, y = &quot;Overall Average Eliminations Per 10m&quot; ) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5a30360f60&gt; . it appears that The tanks and DPS get almost about the same amount of damage. The Tanks might have more than the supports because they get more opportunities to do damage and finish off targets. . It is also possible that during the GOATs meta (3 tanks 3 supports) tanks were the primary damage dealers. . How Much Damage is Dealt by Each Role? . df_group_role[&quot;Overall Average Damage Dealt per 10m&quot;] = df_group_role[&quot;hero_damage_avg_per_10m&quot;]/df_group_role[&quot;count&quot;] df_group_role_Damage = df_group_role[[&quot;role&quot;,&quot;Overall Average Damage Dealt per 10m&quot;]] df_group_role_Damage.nlargest(3, &quot;Overall Average Damage Dealt per 10m&quot;) . role Overall Average Damage Dealt per 10m . 0 offense | 7470.635216 | . 2 tank | 6535.159492 | . 1 support | 4864.578019 | . df_group_role.plot.bar(x = &quot;role&quot;, y = &quot;Overall Average Damage Dealt per 10m&quot; ) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5a302e6898&gt; . In this category, the DPS did 1000 more damage per 10 min compared to the tanks. . It is possible that the dps can focus more on dealing damage thus they would have more than the tanks. If we compare this back to the eliminations, it would appear that the DPS do the majority of the damage, and the tanks would finish off low health oppponents . How Many Deaths Do Each Role Get? . df_group_role[&quot;Overall Average Deaths Per 10m&quot;] = df_group_role[&quot;deaths_avg_per_10m&quot;]/df_group_role[&quot;count&quot;] df_group_role_Deaths = df_group_role[[&quot;role&quot;,&quot;Overall Average Deaths Per 10m&quot;]] df_group_role_Deaths.nlargest(3,&quot;Overall Average Deaths Per 10m&quot;) . role Overall Average Deaths Per 10m . 2 tank | 5.149437 | . 0 offense | 5.118582 | . 1 support | 4.372472 | . df_group_role.plot.bar(x = &quot;role&quot;, y = &quot;Overall Average Deaths Per 10m&quot; ) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5a302ae6d8&gt; . In terms of deaths, it appears that the dps and tanks die more than the supports. . The values are reasonable as supports in this game have better abilities that help them self sustain(Lucio amp and wall riding, Brigitte having a shield and inspire, Ana having sleep and nade, Moria healing orb and fade out etc. . DPS and tanks constantly need to put themselves in risky positions to get value and their abilities for the most part don&#39;t heal or sustain themselves (with obvious exceptions like soldier health pad, doomfist shields, and tracer recall). . How do teams affect statistics . df_group_team = df.groupby(&quot;team&quot;) df_group_team = df_group_team.agg(&quot;sum&quot;).reset_index() df_group_team . team playerId teamId eliminations_avg_per_10m deaths_avg_per_10m hero_damage_avg_per_10m healing_avg_per_10m ultimates_earned_avg_per_10m final_blows_avg_per_10m time_played_total count . 0 ATL | 85503 | 76980 | 157.793977 | 50.490675 | 62229.534763 | 29717.316325 | 39.633521 | 46.196669 | 542129.691046 | 10 | . 1 BOS | 19387 | 13206 | 41.831810 | 18.307436 | 22339.040042 | 168.870374 | 11.459645 | 13.611692 | 191882.761582 | 3 | . 2 CDH | 88084 | 76920 | 140.685496 | 54.735281 | 65018.505578 | 26011.366858 | 40.810739 | 46.357993 | 559672.649090 | 10 | . 3 DAL | 52627 | 45230 | 134.600049 | 53.890802 | 57832.731141 | 35178.978760 | 38.816079 | 41.888466 | 552438.204392 | 10 | . 4 FLA | 57758 | 30849 | 101.959246 | 36.758415 | 39591.619961 | 19430.429026 | 24.740010 | 28.107798 | 354423.819966 | 7 | . 5 GLA | 40743 | 30842 | 108.744030 | 30.418445 | 49108.905545 | 32116.483102 | 29.843228 | 32.485101 | 489485.111905 | 7 | . 6 GZC | 79962 | 84689 | 159.908158 | 48.163967 | 60829.784838 | 35702.505750 | 40.969978 | 55.463993 | 521269.576366 | 11 | . 7 HOU | 52327 | 49775 | 156.571056 | 57.913864 | 65358.076043 | 40454.474520 | 44.219426 | 48.886158 | 691999.044075 | 11 | . 8 HZS | 96271 | 84623 | 165.066886 | 51.045510 | 69069.351907 | 45746.309547 | 44.340600 | 48.711405 | 593674.115148 | 11 | . 9 LDN | 37085 | 26460 | 90.434697 | 26.671602 | 36982.082658 | 26613.463389 | 25.221463 | 24.639127 | 387766.475242 | 6 | . 10 NYE | 30576 | 26418 | 99.575626 | 24.138331 | 38255.470540 | 22063.733172 | 25.311343 | 29.345523 | 503951.861376 | 6 | . 11 PAR | 47618 | 46164 | 83.029907 | 33.794198 | 36440.938464 | 32370.046951 | 26.240437 | 24.154430 | 350082.354087 | 6 | . 12 PHI | 22529 | 22620 | 78.232372 | 27.090128 | 31924.133892 | 15973.523240 | 19.257253 | 23.235296 | 385046.356130 | 5 | . 13 SEO | 69111 | 44090 | 159.211885 | 42.290420 | 63252.547481 | 36999.399026 | 38.336938 | 44.785125 | 520537.701585 | 10 | . 14 SFS | 51678 | 39636 | 156.843551 | 40.146791 | 65342.859290 | 29724.106798 | 39.777856 | 52.126540 | 692734.994042 | 9 | . 15 SHD | 69402 | 44080 | 155.626680 | 49.550898 | 68986.768585 | 30876.841884 | 39.830569 | 53.093820 | 687468.766518 | 10 | . 16 TOR | 29461 | 38475 | 72.679144 | 27.565865 | 34029.883995 | 17312.415607 | 20.488759 | 25.676763 | 245498.218567 | 5 | . 17 VAL | 19483 | 13215 | 42.786018 | 15.343999 | 18309.481229 | 7423.094689 | 11.850342 | 14.706421 | 184116.543925 | 3 | . 18 VAN | 74664 | 69264 | 154.987665 | 40.865496 | 61391.476594 | 34382.552916 | 38.925150 | 46.432199 | 681441.973097 | 9 | . 19 WAS | 30441 | 30788 | 54.089034 | 18.851711 | 25049.833807 | 8057.760008 | 16.078539 | 18.847698 | 278076.144761 | 4 | . df_group_team[[&quot;team&quot;,&quot;count&quot;]] . team count . 0 ATL | 10 | . 1 BOS | 3 | . 2 CDH | 10 | . 3 DAL | 10 | . 4 FLA | 7 | . 5 GLA | 7 | . 6 GZC | 11 | . 7 HOU | 11 | . 8 HZS | 11 | . 9 LDN | 6 | . 10 NYE | 6 | . 11 PAR | 6 | . 12 PHI | 5 | . 13 SEO | 10 | . 14 SFS | 9 | . 15 SHD | 10 | . 16 TOR | 5 | . 17 VAL | 3 | . 18 VAN | 9 | . 19 WAS | 4 | . df_group_team.plot.bar(x = &quot;team&quot;, y = &quot;count&quot; ) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5a3022b390&gt; . q1 = df_group_team[&quot;count&quot;].quantile(.25) q3 = df_group_team[&quot;count&quot;].quantile(.75) iqr = q3 - q1 lower_bound = q1 -(1.5 * iqr) upper_bound = q3 +(1.5 * iqr) print({&quot;Quartile 1&quot;: q1}) print({&quot;Quartile 3&quot;:q3}) print({&quot;IQR&quot;: iqr }) print({&quot;Lower Bound&quot; : lower_bound}) print({&quot;Upper Bound&quot; : upper_bound}) . {&#39;Quartile 1&#39;: 5.75} {&#39;Quartile 3&#39;: 10.0} {&#39;IQR&#39;: 4.25} {&#39;Lower Bound&#39;: -0.625} {&#39;Upper Bound&#39;: 16.375} . Although our teams don&#39;t have any outliers by the IQR, we probably should exclude the the Boston Uprising, LA Valliant, and Washington Justice as they don&#39;t have enough for a team . How Many Eliminations Do Each Team Get? . Let&#39;s find out which teams had the most eliminations per 10 minutes . df_group_team[&quot;Overall Average Eliminations Per 10m&quot;] = df_group_team[&quot;eliminations_avg_per_10m&quot;]/df_group_team[&quot;count&quot;] df_team_largest_elim = df_group_team[[&quot;team&quot;,&quot;Overall Average Eliminations Per 10m&quot;]] df_team_largest_elim.nlargest(20,&quot;Overall Average Eliminations Per 10m&quot;) . team Overall Average Eliminations Per 10m . 14 SFS | 17.427061 | . 18 VAN | 17.220852 | . 10 NYE | 16.595938 | . 13 SEO | 15.921189 | . 0 ATL | 15.779398 | . 12 PHI | 15.646474 | . 15 SHD | 15.562668 | . 5 GLA | 15.534861 | . 9 LDN | 15.072450 | . 8 HZS | 15.006081 | . 4 FLA | 14.565607 | . 6 GZC | 14.537105 | . 16 TOR | 14.535829 | . 17 VAL | 14.262006 | . 7 HOU | 14.233732 | . 2 CDH | 14.068550 | . 1 BOS | 13.943937 | . 11 PAR | 13.838318 | . 19 WAS | 13.522258 | . 3 DAL | 13.460005 | . df_group_team.plot.bar(x = &quot;team&quot;, y = &quot;Overall Average Eliminations Per 10m&quot; ) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5a30163940&gt; . This looks pretty messy, let&#39;s calculate for any outliers . q1 = df_group_team[&quot;Overall Average Eliminations Per 10m&quot;].quantile(.25) q3 = df_group_team[&quot;Overall Average Eliminations Per 10m&quot;].quantile(.75) iqr = q3 - q1 lower_bound = q1 -(1.5 * iqr) upper_bound = q3 +(1.5 * iqr) print({&quot;Quartile 1&quot;: q1}) print({&quot;Quartile 3&quot;:q3}) print({&quot;IQR&quot;: iqr }) print({&quot;Lower Bound&quot; : lower_bound}) print({&quot;Upper Bound&quot; : upper_bound}) . {&#39;Quartile 1&#39;: 14.192436660434511} {&#39;Quartile 3&#39;: 15.679705219204635} {&#39;IQR&#39;: 1.4872685587701238} {&#39;Lower Bound&#39;: 11.961533822279325} {&#39;Upper Bound&#39;: 17.91060805735982} . How Much Damage is Dealt by Each Team? . df_group_team[&quot;Overall Average Damage Dealt per 10m&quot;] = df_group_team[&quot;hero_damage_avg_per_10m&quot;]/df_group_team[&quot;count&quot;] df_team_largest_damage = df_group_team[[&quot;team&quot;,&quot;Overall Average Damage Dealt per 10m&quot;]] df_team_largest_damage.nlargest(20,&quot;Overall Average Damage Dealt per 10m&quot;) . team Overall Average Damage Dealt per 10m . 1 BOS | 7446.346681 | . 14 SFS | 7260.317699 | . 5 GLA | 7015.557935 | . 15 SHD | 6898.676859 | . 18 VAN | 6821.275177 | . 16 TOR | 6805.976799 | . 2 CDH | 6501.850558 | . 12 PHI | 6384.826778 | . 10 NYE | 6375.911757 | . 13 SEO | 6325.254748 | . 8 HZS | 6279.031992 | . 19 WAS | 6262.458452 | . 0 ATL | 6222.953476 | . 9 LDN | 6163.680443 | . 17 VAL | 6103.160410 | . 11 PAR | 6073.489744 | . 7 HOU | 5941.643277 | . 3 DAL | 5783.273114 | . 4 FLA | 5655.945709 | . 6 GZC | 5529.980440 | . df_team_largest_damage.plot.bar(x = &quot;team&quot;, y = &quot;Overall Average Damage Dealt per 10m&quot; ) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5a3010a198&gt; . Surpisingly enough, Boston seems to have a higher damage dealt dispite having less players. This is odd because it wasn&#39;t an issue for eliminations. . How Many Deaths is Recieved By Each Team? . df_group_team[&quot;Overall Average Deaths Per 10m&quot;] = df_group_team[&quot;deaths_avg_per_10m&quot;]/df_group_team[&quot;count&quot;] df_team_smallest_death = df_group_team[[&quot;team&quot;,&quot;Overall Average Deaths Per 10m&quot;]] df_team_smallest_death.nsmallest(20,&quot;Overall Average Deaths Per 10m&quot;) . team Overall Average Deaths Per 10m . 10 NYE | 4.023055 | . 13 SEO | 4.229042 | . 5 GLA | 4.345492 | . 6 GZC | 4.378542 | . 9 LDN | 4.445267 | . 14 SFS | 4.460755 | . 18 VAN | 4.540611 | . 8 HZS | 4.640501 | . 19 WAS | 4.712928 | . 15 SHD | 4.955090 | . 0 ATL | 5.049067 | . 17 VAL | 5.114666 | . 4 FLA | 5.251202 | . 7 HOU | 5.264897 | . 3 DAL | 5.389080 | . 12 PHI | 5.418026 | . 2 CDH | 5.473528 | . 16 TOR | 5.513173 | . 11 PAR | 5.632366 | . 1 BOS | 6.102479 | . df_team_smallest_death.plot.bar(x = &quot;team&quot;, y = &quot;Overall Average Deaths Per 10m&quot; ) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5a2fcee6d8&gt; . Linear Regression? . from sklearn.linear_model import LinearRegression . model = LinearRegression() model = model.fit(df[[&quot;eliminations_avg_per_10m&quot;,&quot;deaths_avg_per_10m&quot;,&quot;hero_damage_avg_per_10m&quot;, &quot;healing_avg_per_10m&quot;]], df[&quot;ultimates_earned_avg_per_10m&quot;]) .",
            "url": "https://progressedd.github.io/blog/2020/02/09/overwatch-pro-analysis.html",
            "relUrl": "/2020/02/09/overwatch-pro-analysis.html",
            "date": " • Feb 9, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "About Me . Hello there, I am Edward Tang, I have passion for technology and Data Science. My passion for the field wasn’t fully realized until colleagues identified Data Science practices in my work as an undergraduate research assistant. As a research assistant, I processed motion capture recordings, motion capture model development, and data analysis. . In my spare time, I help first time PC builders by tailoring parts for their workloads and troubleshoot computer issues on community chat servers and tech forums. As a Server Moderator for Illini Esports, I assist the admin team primarily by researching and implementing bots that enhance the experience and security for over 2,000 users. My other duties include working with the team to draft the constitution for our organization, as well as, coordinating server changes with community events led by community leaders. . About This Blog . The primary purpose of this blog is to document my experiences working on Data Science and Technology projects. I had previously shared links to notebooks on Github, but I encountered limitations that hindered some of my visualizations and explanations. . Contacting Me . I can be reached by any of the social media links below. .",
          "url": "https://progressedd.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://progressedd.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
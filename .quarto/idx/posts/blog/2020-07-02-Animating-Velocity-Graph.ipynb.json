{"title":"Using Matplotlib to Animate Data From a Velocity Recording","markdown":{"yaml":{"aliases":["/2020/07/02/Animating-Velocity-Graph"],"date":"2020-07-02","description":"One of my friends approached me asking if I had any experience animating graphs, since I had experience with video editing. Though I had not had any formal experience, I decided that it would be a interesting challenge to embark.","image":"images/posts/matplotlib-animate/dot-tracking-animated.gif","output-file":"2020-07-02-animating-velocity-graph.html","title":"Using Matplotlib to Animate Data From a Velocity Recording","author":"progressEdd","categories":["Analysis","Visualization"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\n\n<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Using-Matplotlib-to-Animate-Data-From-a-Velocity-Recording\" data-toc-modified-id=\"Using-Matplotlib-to-Animate-Data-From-a-Velocity-Recording-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Using Matplotlib to Animate Data From a Velocity Recording</a></span></li><li><span><a href=\"#Introduction\" data-toc-modified-id=\"Introduction-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Introduction</a></span></li><li><span><a href=\"#Demonstration\" data-toc-modified-id=\"Demonstration-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Demonstration</a></span><ul class=\"toc-item\"><li><span><a href=\"#Tracking-a-Line-Through-Time\" data-toc-modified-id=\"Tracking-a-Line-Through-Time-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;</span>Tracking a Line Through Time</a></span></li><li><span><a href=\"#Plotting-a-Dot-and-Tracking-Across-Velocity-Curve\" data-toc-modified-id=\"Plotting-a-Dot-and-Tracking-Across-Velocity-Curve-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;</span>Plotting a Dot and Tracking Across Velocity Curve</a></span></li><li><span><a href=\"#Generating-The-Gifs\" data-toc-modified-id=\"Generating-The-Gifs-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;</span>Generating The Gifs</a></span></li></ul></li><li><span><a href=\"#Importing-Libraries-+-Loading-Data\" data-toc-modified-id=\"Importing-Libraries-+-Loading-Data-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>Importing Libraries + Loading Data</a></span></li><li><span><a href=\"#Plotting-Function\" data-toc-modified-id=\"Plotting-Function-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>Plotting Function</a></span><ul class=\"toc-item\"><li><span><a href=\"#Explanation-of-Inputs\" data-toc-modified-id=\"Explanation-of-Inputs-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;</span>Explanation of Inputs</a></span></li><li><span><a href=\"#Explanation-of-Variables\" data-toc-modified-id=\"Explanation-of-Variables-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;</span>Explanation of Variables</a></span><ul class=\"toc-item\"><li><span><a href=\"#Setting-Up-Data-Section\" data-toc-modified-id=\"Setting-Up-Data-Section-5.2.1\"><span class=\"toc-item-num\">5.2.1&nbsp;&nbsp;</span>Setting Up Data Section</a></span></li><li><span><a href=\"#Graph-Type-Settings-Section\" data-toc-modified-id=\"Graph-Type-Settings-Section-5.2.2\"><span class=\"toc-item-num\">5.2.2&nbsp;&nbsp;</span>Graph Type Settings Section</a></span></li><li><span><a href=\"#Animation-Settings\" data-toc-modified-id=\"Animation-Settings-5.2.3\"><span class=\"toc-item-num\">5.2.3&nbsp;&nbsp;</span>Animation Settings</a></span></li><li><span><a href=\"#Setting-Up-The-Figure\" data-toc-modified-id=\"Setting-Up-The-Figure-5.2.4\"><span class=\"toc-item-num\">5.2.4&nbsp;&nbsp;</span>Setting Up The Figure</a></span></li><li><span><a href=\"#Setting-Up-Positions-of-X-and-Y-Outputs-For-Value\" data-toc-modified-id=\"Setting-Up-Positions-of-X-and-Y-Outputs-For-Value-5.2.5\"><span class=\"toc-item-num\">5.2.5&nbsp;&nbsp;</span>Setting Up Positions of X and Y Outputs For Value</a></span></li><li><span><a href=\"#Setting-Up-The-Line-Plot\" data-toc-modified-id=\"Setting-Up-The-Line-Plot-5.2.6\"><span class=\"toc-item-num\">5.2.6&nbsp;&nbsp;</span>Setting Up The Line Plot</a></span></li><li><span><a href=\"#Initialization-Function:-Plot-The-Background-of-Each-Frame\" data-toc-modified-id=\"Initialization-Function:-Plot-The-Background-of-Each-Frame-5.2.7\"><span class=\"toc-item-num\">5.2.7&nbsp;&nbsp;</span>Initialization Function: Plot The Background of Each Frame</a></span></li><li><span><a href=\"#Animation-Function.-This-Is-Called-Sequentially\" data-toc-modified-id=\"Animation-Function.-This-Is-Called-Sequentially-5.2.8\"><span class=\"toc-item-num\">5.2.8&nbsp;&nbsp;</span>Animation Function. This Is Called Sequentially</a></span></li><li><span><a href=\"#Save-The-Animation-as-an-mp4.\" data-toc-modified-id=\"Save-The-Animation-as-an-mp4.-5.2.9\"><span class=\"toc-item-num\">5.2.9&nbsp;&nbsp;</span>Save The Animation as an mp4.</a></span></li></ul></li></ul></li><li><span><a href=\"#Working-Through-Matplotlib-Animation-Tutorial\" data-toc-modified-id=\"Working-Through-Matplotlib-Animation-Tutorial-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;</span>Working Through <a href=\"https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/\" target=\"_blank\">Matplotlib Animation Tutorial</a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Having-Line-Plotted-Through-Time\" data-toc-modified-id=\"Having-Line-Plotted-Through-Time-6.1\"><span class=\"toc-item-num\">6.1&nbsp;&nbsp;</span>Having Line Plotted Through Time</a></span><ul class=\"toc-item\"><li><span><a href=\"#Learning-How-Matplotlib-plots\" data-toc-modified-id=\"Learning-How-Matplotlib-plots-6.1.1\"><span class=\"toc-item-num\">6.1.1&nbsp;&nbsp;</span>Learning How Matplotlib plots</a></span></li><li><span><a href=\"#Messing-with-labels\" data-toc-modified-id=\"Messing-with-labels-6.1.2\"><span class=\"toc-item-num\">6.1.2&nbsp;&nbsp;</span>Messing with labels</a></span></li><li><span><a href=\"#print-statements\" data-toc-modified-id=\"print-statements-6.1.3\"><span class=\"toc-item-num\">6.1.3&nbsp;&nbsp;</span>print statements</a></span></li></ul></li><li><span><a href=\"#Having-a-Dot-Tracking-Along-the-Velocity-Curve\" data-toc-modified-id=\"Having-a-Dot-Tracking-Along-the-Velocity-Curve-6.2\"><span class=\"toc-item-num\">6.2&nbsp;&nbsp;</span>Having a Dot Tracking Along the Velocity Curve</a></span></li><li><span><a href=\"#Figuring-out-Keyerror\" data-toc-modified-id=\"Figuring-out-Keyerror-6.3\"><span class=\"toc-item-num\">6.3&nbsp;&nbsp;</span>Figuring out <code>Keyerror</code></a></span></li></ul></li><li><span><a href=\"#Messing-with-a-overlapping-graph\" data-toc-modified-id=\"Messing-with-a-overlapping-graph-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;</span>Messing with a overlapping graph</a></span></li></ul></div>\n\nOne of my friends approached me asking if I had any experience animating graphs, since I had experience with video editing. Though I had not had any formal experience, I decided that it would be a interesting challenge to embark.\n\nI did some research and found a tutorial as seen in the section \"Working Through Matplotlib Animation Tutorial\"\n\n# Demonstration\n\n## Tracking a Line Through Time\n<a class=\"anchor\" id=\"Tracking-a-Line-Through-Time\"></a>\n\n![basic-animation.gif](https://raw.githubusercontent.com/progressEdd/projects/master/Animating-Velocity-Graph/line_tracking_animated.gif)\n\n## Plotting a Dot and Tracking Across Velocity Curve \n\n![dot-tracking-animation.gif](https://raw.githubusercontent.com/progressEdd/projects/master/Animating-Velocity-Graph/dot_tracking_animated.gif)\n\n## Generating The Gifs\n\nTo generate these gifs, I used <a href=\"https://ffmpeg.org/\">ffmpeg</a> to convert the mp4s to gifs.\n\nTo convert the mp4s to gifs, I opened my directory in the terminal and ran the following ffmpeg command, after converting the video to gif, I added and pushed the files to github. Since github does not show local embeds, I embedded the url of the gif from the github repository. \n```\nffmpeg -i line_tracking_animated.mp4 line_tracking_animated.gif\n```\n\nAlternatively, if you have <a href=\"https://ffmpeg.org/\">ffmpeg</a> installed, you can run the following cell to run it in a jupyter cell\n\nBreakdown of the command\n* `ffmpeg` tells the terminal to use ffmpeg\n* `-i` tells ffmpeg the input\n* `line_tracking_animated.mp4` tells ffmpeg the source file\n* `line_tracking_animated.gif` tells ffmpeg the output file title and format\n\n# Importing Libraries + Loading Data\n\n# Plotting Function\n<a class=\"anchor\" id=\"Plotting-Function\"></a>\nI wrote the `animateGraph` after modifying <a href=\"https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/\">Matplotlib Animation Tutorial</a> to work for my velocity data from the `Having Line Plotted Through Time` section and later `Having a Dot Tracking Along the Velocity Curve`. \n\nThe function takes the general structure of the respective and makes it into a single function\n\n## Explanation of Inputs\n* `df` input `DataFrame`\n* `x_column` column title for x axis\n* `y_column` column title for y axis\n* `dot_track` takes `yes` or `no`, if it is not `yes`, it will default to the line graph\n* `framerate` integer that specifies the video's framerate\n\n## Explanation of Variables\n\n### Setting Up Data Section\n* `x_df` `DataFrame` of just the x values, I seperated the x and y `DataFrames` to make it easier to follow in the animation function\n* `y_df` `DataFrame` of just the x values, I seperated the x and y `DataFrames` to make it easier to follow in the animation function\n* `x_max` maximum of the x values, used to set the bounds of x axis\n* `y_max` maximum of the y values, used to set the bounds of y axis, added `2` to make space for the time and velocity printouts\n* `last_index` used to prevent `Keyerror`, see `Figuring out Keyerror` section for a more in depth explanation\n\n### Graph Type Settings Section\n* `plot_dot` boolean used to decide which animation to use, if `True` will have animation output the dot tracker on graph\n* `graph_type` string used to keep track of the animation, used for filename\n    * can be either `dot_tracking` or `line_tracking`\n\n### Animation Settings\n* `time_seconds` takes last entry of x value to get the duration of the data converts from miliseconds to seconds, used later for `totalFrames` animation duration calculation\n* `totalFrames` product of `framerate` and `time_seconds` to get the number of frames for matplotlib to animate\n\n### Setting Up The Figure\n* `fig` figure variable, stores figure object\n    * the size was set to `(20,12)`\n    * I followed the suggestions to change the size and output a sample file from <a href=\"https://stackoverflow.com/questions/332289/how-do-you-change-the-size-of-figures-drawn-with-matplotlib\"> Stack Overflow How to Change Figure Size </a>\n    * I followed the suggestions to change the font size from <a href=\"https://stackoverflow.com/questions/3899980/how-to-change-the-font-size-on-a-matplotlib-plot\"> Stack Overflow How to Change Font Size </a> \n    \n### Setting Up Positions of X and Y Outputs For Value\n* I followed the example set by the matplotlib wiki from <a href=\"https://matplotlib.org/3.1.3/tutorials/text/text_props.html#sphx-glr-tutorials-text-text-props-py\"> Text properties and layout </a>\n* `y_value_print` text object, will set the y value, for the demo, we use velocity set for `right` and `top` is updated frame by frame in the `animate(i)` function\n* `x_value_print` text object, will set the x value, for the demo, we use time set for `left` and `top` is updated frame by frame in the `animate(i)` function\n\n### Setting Up The Line Plot \n* I used the `plot_dot` to determine which graph should be plotted\n    * if `plot_dot` is `True`, we will plot the existing graph and have the dot \n    * if `plot_dot` is `False`, we will plot the graph sections frame by frame\n* To get the red dot, I read the instructions of the different passable arguments from the matplotlib wiki from <a href=\"https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.plot.html#examples-using-matplotlib-pyplot-plot\"> matplotlib.pyplot.plot </a> \n\n### Initialization Function: Plot The Background of Each Frame\n* I kept the example set from the guide see `Working Through Matplotlib Animation Tutorial` for more details\n\n### Animation Function. This Is Called Sequentially\n* This section is broken up into two parts, \n    1. Checking if the function reaches the last value of the `DataFrame` \n    2. updating the x and y column print outs\n* To check if the function has reached the last value of the `DataFrame`, we have a `if` conditional that checks if the `animate` function has reached the end of the `DataFrame`, if it does, then it will use the value at `last_index`, we want it to keep the last value to avoid the `Keyerror` as explained in the later experimental section\n* Next, the function will set the `x_value` and `y_value` to be the final index value\n    * `x_value` and `y_value` is used for animating the labels for the values of x and y \n* Afterwards the function follow a second `if` statement, which will check if `plot_dot` is true or false\n    * if `plot_dot` is `False`, the function will output everything up until the current `i` index value. \n        * This is used for the animation that plots graph sections frame by frame\n    * if `plot_dot` is `True`, the function will output the current `i` index value. \n        * This is used for the animation that plots the point frame by frame\n* The next section will update the x and y column print out values for each frame I took inspiration from <a href=\"https://brushingupscience.com/2016/06/21/matplotlib-animations-the-easy-way/\"> \nMatplotlib animations the easy way </a> specifically the `\"Changing labels and text\"` section\n    * `values_x` is a string variable that stores the x column title, adds colons, and the x value\n    * `values_y` is a string variable that stores the y column title, adds colons, and the y value\n    * After setting `values_x` and `values_y` we use `.set_text()` to update the `y_value_print` and `x_value_print` each time\n* Once all the variables have been updated, `animate(i)` will return the `line` to the `animation.FuncAnimation()`, which will continue until it reaches the last frame\n\n### Save The Animation as an mp4.\n* I did not make significant changes to the original, I only changed the filename to match the graph type. \n    * I wanted the filename to be the ' `x_column` vs `y_column` `graph_type` _animated.mp4'\n    * The ideal file name would be 'Velocity_(m/s)_vs_Time (ms)_line_tracking_animated.mp4\n        * When I tried parsing the `x_column` as a string, python had serious issues with the slash (/) part of (m/s), enough so that it would prevent the file from being saved\n        * An potential alternative solution would to change m/s to m*s^-1, but it require changing the data or engineering a solution that read the units and replaced slashes with * unit^-1. After evaluating the alternatives, I realized it would be easier to rename the file. If this function were used to generate hundreds of graphs from hundreds of source files, I would need to find a better solution. Since the purpose of this function is to make it easier to change between the dot and line tracking, I did not invest any further time into developing an alternative solution\n\n# Working Through <a href=\"https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/\">Matplotlib Animation Tutorial</a>\n\nI used Jake Vanderplas's sine wave example posted below as a base to understand how matplotlib animates. I modified it to make it work with the velocity and time data I was given from my friend. \n\n## Having Line Plotted Through Time\n\nFrom the base I added my own modifications titled `Tracking a Line Through time`, which included\n* setting variables for velocity (`y_df`) and time (`x_df`) dataframes\n* setting maximums for x and y\n* setting a `time_seconds` variable that converts the time in milliseconds to seconds\n* setting a `framerate` variable that sets the framerate of the graph\n* setting a `totalFrames` variable that sets the duration of the animation\n* increasing the figure size from 64x64 to a bigger 18.5x10.4 inch higher resolution figure with `fig.set_size_inches()`\n* increasing the framerate to 60 frames a second (setting `framerate` to `60`), which makes the plot smoother\n   * only downside is that it will take extra time to encode the final mp4\n* modifying the limits.\n* adding titles for the figure\n* having the the animation plot the figure as time passes, rather needing a known function to plot it\n\n### Learning How Matplotlib plots\nIn the following cells, I experimented with the ranges for which data to be plotted. Once I figured out putting `start:end` into a dataframe, I used this for the first function\n\nWith an understanding of this property I was able to have the graph from `0` to the value at the specific frame.\n\n### Messing with labels\nWhen I intially made the velocity and time printouts, I thought about using `AnchoredText` boxes and having each frame update the boxes. Using this method was not the best as it made the processing of the animation take longer and the text boxes would not overlap. Later I learned how to animate text.\n\nAlthough not shown here, I later found <a href = https://brushingupscience.com/2016/06/21/matplotlib-animations-the-easy-way/> a very helpful guide that demonstrated animating text and labels </a>. I did not know that I could incoorperate text changes in the `animate` fucntion with on matplotlib. I implemented most of the changes of `set_text()` and `ax.text()` in the `animateGraph()` section. It was easier to modify `animateGraph()` as I could run it to get a output and would not have the same code in 3 other places of the notebook.\n\nAnother goal of this section was to experiment with matplotlib to get the outputs to my liking. I learned <a href =https://stackoverflow.com/questions/332289/how-do-you-change-the-size-of-figures-drawn-with-matplotlib> I could change the graph size with</a> `fig.set_size_inches()`\n\n### print statements\n\nI used these print statements to figure out why my maxes were not being rounded to the nearest whole number. \n\nInitially, I tried using `round( #number, #decimal places)`, <a href=\"https://stackoverflow.com/questions/31818050/round-number-to-nearest-integer\">from Stackoverflow</a> but the native function concatenated for values such as `20.5` to `20` instead of `21` \n\nEventually I found a detailed explanation behind the native python `round()` function <a href=\"https://realpython.com/python-rounding/\">from RealPython</a>, in addition to suggested alternative functions and libraries I could use that would solve the issue I was running into. The suggestion was to use `ceil` from the `math` libraries. I ended up using `ceil` from the `numpy` libraries since I didn't want to import another library\n\n\n## Having a Dot Tracking Along the Velocity Curve \n\nAfter making my modifications, I copied my modified version and further adjusted it further titled `Having a Dot Tracking Along the Velocity Curve` to print the plot first and have a single point track along the plotted graph\n\nChanges from the original `Having Line Plotted Through time`\n* added red dot for tracking instead of line\n    * used following additional arguments to set the dot `linestyle='none', marker = 'o', ms = 10, color='r'`, I learned of these parameters from adrian prince-whelan's demonstration of \n   <a href=\"https://adrian.pw/blog/matplotlib-transparent-animation/\">Making a Matplotlib animation with a transparent background</a> \n    * `linestyle='none'` prevents lines from being drawn\n    * `marker = 'o'` sets the dot \n    * `ms = 10` sets the dot size\n    * `color='r'` sets the dot color\n* messing with video transparency as well from the same post\n    * main issue right now is getting the correct save settings\n* changed x `linspace` value to have the previous frame\n    * added conditional where at `i=0`, `i` would start at `0` instead of `-1` when calling the `x_df[i-1]` and `x_df[i]` dataframe entry\n  \n\n## Figuring out `Keyerror`\n\nWhile running `Dot Tracking Along the Velocity Curve` I got a consistent `keyerror` when plotting i. The following code blocks helped me debug the values of i for each iteration.\n\nI later realized that the `keyerror` was caused by my totalFrames calculation, which took the last value of the data (milliseconds converted to seconds), multiplied it by the framerate, and was rounded to get total number of frames. Before changing to use the length of the dataframe, the `totalFrames` was `1333.98`, which was rounded to 1334. The `keyerror` occured because `animate(i)` uses the `frames` variable as a index. Once animate reached the length of the dataframe (`1319`) the animation stopped, but in the `animation.FuncAnimation()` function continued to pass values in for `i`. When computing for `x`, this caused a `keyerror` since `animation.FuncAnimation()` would continue to feed values in for `i`, but in the dataframe no such values existed.\n\nTo prevent this from happening, I added a conditional that when we reached the end of the dataframe, we would use the last value of the dataframe. \n\n# Messing with a overlapping graph\n\nwhile looking for solutions to animate the velocity and time outputs, I stumbled upon a method to use subplots. If I come back to this project, I would want to make a line tracing option, where a line plot is generated, and another plot will overlap\n","srcMarkdownNoYaml":"\n\n\n\n<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Using-Matplotlib-to-Animate-Data-From-a-Velocity-Recording\" data-toc-modified-id=\"Using-Matplotlib-to-Animate-Data-From-a-Velocity-Recording-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Using Matplotlib to Animate Data From a Velocity Recording</a></span></li><li><span><a href=\"#Introduction\" data-toc-modified-id=\"Introduction-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Introduction</a></span></li><li><span><a href=\"#Demonstration\" data-toc-modified-id=\"Demonstration-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Demonstration</a></span><ul class=\"toc-item\"><li><span><a href=\"#Tracking-a-Line-Through-Time\" data-toc-modified-id=\"Tracking-a-Line-Through-Time-3.1\"><span class=\"toc-item-num\">3.1&nbsp;&nbsp;</span>Tracking a Line Through Time</a></span></li><li><span><a href=\"#Plotting-a-Dot-and-Tracking-Across-Velocity-Curve\" data-toc-modified-id=\"Plotting-a-Dot-and-Tracking-Across-Velocity-Curve-3.2\"><span class=\"toc-item-num\">3.2&nbsp;&nbsp;</span>Plotting a Dot and Tracking Across Velocity Curve</a></span></li><li><span><a href=\"#Generating-The-Gifs\" data-toc-modified-id=\"Generating-The-Gifs-3.3\"><span class=\"toc-item-num\">3.3&nbsp;&nbsp;</span>Generating The Gifs</a></span></li></ul></li><li><span><a href=\"#Importing-Libraries-+-Loading-Data\" data-toc-modified-id=\"Importing-Libraries-+-Loading-Data-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>Importing Libraries + Loading Data</a></span></li><li><span><a href=\"#Plotting-Function\" data-toc-modified-id=\"Plotting-Function-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>Plotting Function</a></span><ul class=\"toc-item\"><li><span><a href=\"#Explanation-of-Inputs\" data-toc-modified-id=\"Explanation-of-Inputs-5.1\"><span class=\"toc-item-num\">5.1&nbsp;&nbsp;</span>Explanation of Inputs</a></span></li><li><span><a href=\"#Explanation-of-Variables\" data-toc-modified-id=\"Explanation-of-Variables-5.2\"><span class=\"toc-item-num\">5.2&nbsp;&nbsp;</span>Explanation of Variables</a></span><ul class=\"toc-item\"><li><span><a href=\"#Setting-Up-Data-Section\" data-toc-modified-id=\"Setting-Up-Data-Section-5.2.1\"><span class=\"toc-item-num\">5.2.1&nbsp;&nbsp;</span>Setting Up Data Section</a></span></li><li><span><a href=\"#Graph-Type-Settings-Section\" data-toc-modified-id=\"Graph-Type-Settings-Section-5.2.2\"><span class=\"toc-item-num\">5.2.2&nbsp;&nbsp;</span>Graph Type Settings Section</a></span></li><li><span><a href=\"#Animation-Settings\" data-toc-modified-id=\"Animation-Settings-5.2.3\"><span class=\"toc-item-num\">5.2.3&nbsp;&nbsp;</span>Animation Settings</a></span></li><li><span><a href=\"#Setting-Up-The-Figure\" data-toc-modified-id=\"Setting-Up-The-Figure-5.2.4\"><span class=\"toc-item-num\">5.2.4&nbsp;&nbsp;</span>Setting Up The Figure</a></span></li><li><span><a href=\"#Setting-Up-Positions-of-X-and-Y-Outputs-For-Value\" data-toc-modified-id=\"Setting-Up-Positions-of-X-and-Y-Outputs-For-Value-5.2.5\"><span class=\"toc-item-num\">5.2.5&nbsp;&nbsp;</span>Setting Up Positions of X and Y Outputs For Value</a></span></li><li><span><a href=\"#Setting-Up-The-Line-Plot\" data-toc-modified-id=\"Setting-Up-The-Line-Plot-5.2.6\"><span class=\"toc-item-num\">5.2.6&nbsp;&nbsp;</span>Setting Up The Line Plot</a></span></li><li><span><a href=\"#Initialization-Function:-Plot-The-Background-of-Each-Frame\" data-toc-modified-id=\"Initialization-Function:-Plot-The-Background-of-Each-Frame-5.2.7\"><span class=\"toc-item-num\">5.2.7&nbsp;&nbsp;</span>Initialization Function: Plot The Background of Each Frame</a></span></li><li><span><a href=\"#Animation-Function.-This-Is-Called-Sequentially\" data-toc-modified-id=\"Animation-Function.-This-Is-Called-Sequentially-5.2.8\"><span class=\"toc-item-num\">5.2.8&nbsp;&nbsp;</span>Animation Function. This Is Called Sequentially</a></span></li><li><span><a href=\"#Save-The-Animation-as-an-mp4.\" data-toc-modified-id=\"Save-The-Animation-as-an-mp4.-5.2.9\"><span class=\"toc-item-num\">5.2.9&nbsp;&nbsp;</span>Save The Animation as an mp4.</a></span></li></ul></li></ul></li><li><span><a href=\"#Working-Through-Matplotlib-Animation-Tutorial\" data-toc-modified-id=\"Working-Through-Matplotlib-Animation-Tutorial-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;</span>Working Through <a href=\"https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/\" target=\"_blank\">Matplotlib Animation Tutorial</a></a></span><ul class=\"toc-item\"><li><span><a href=\"#Having-Line-Plotted-Through-Time\" data-toc-modified-id=\"Having-Line-Plotted-Through-Time-6.1\"><span class=\"toc-item-num\">6.1&nbsp;&nbsp;</span>Having Line Plotted Through Time</a></span><ul class=\"toc-item\"><li><span><a href=\"#Learning-How-Matplotlib-plots\" data-toc-modified-id=\"Learning-How-Matplotlib-plots-6.1.1\"><span class=\"toc-item-num\">6.1.1&nbsp;&nbsp;</span>Learning How Matplotlib plots</a></span></li><li><span><a href=\"#Messing-with-labels\" data-toc-modified-id=\"Messing-with-labels-6.1.2\"><span class=\"toc-item-num\">6.1.2&nbsp;&nbsp;</span>Messing with labels</a></span></li><li><span><a href=\"#print-statements\" data-toc-modified-id=\"print-statements-6.1.3\"><span class=\"toc-item-num\">6.1.3&nbsp;&nbsp;</span>print statements</a></span></li></ul></li><li><span><a href=\"#Having-a-Dot-Tracking-Along-the-Velocity-Curve\" data-toc-modified-id=\"Having-a-Dot-Tracking-Along-the-Velocity-Curve-6.2\"><span class=\"toc-item-num\">6.2&nbsp;&nbsp;</span>Having a Dot Tracking Along the Velocity Curve</a></span></li><li><span><a href=\"#Figuring-out-Keyerror\" data-toc-modified-id=\"Figuring-out-Keyerror-6.3\"><span class=\"toc-item-num\">6.3&nbsp;&nbsp;</span>Figuring out <code>Keyerror</code></a></span></li></ul></li><li><span><a href=\"#Messing-with-a-overlapping-graph\" data-toc-modified-id=\"Messing-with-a-overlapping-graph-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;</span>Messing with a overlapping graph</a></span></li></ul></div>\n\n# Introduction\nOne of my friends approached me asking if I had any experience animating graphs, since I had experience with video editing. Though I had not had any formal experience, I decided that it would be a interesting challenge to embark.\n\nI did some research and found a tutorial as seen in the section \"Working Through Matplotlib Animation Tutorial\"\n\n# Demonstration\n\n## Tracking a Line Through Time\n<a class=\"anchor\" id=\"Tracking-a-Line-Through-Time\"></a>\n\n![basic-animation.gif](https://raw.githubusercontent.com/progressEdd/projects/master/Animating-Velocity-Graph/line_tracking_animated.gif)\n\n## Plotting a Dot and Tracking Across Velocity Curve \n\n![dot-tracking-animation.gif](https://raw.githubusercontent.com/progressEdd/projects/master/Animating-Velocity-Graph/dot_tracking_animated.gif)\n\n## Generating The Gifs\n\nTo generate these gifs, I used <a href=\"https://ffmpeg.org/\">ffmpeg</a> to convert the mp4s to gifs.\n\nTo convert the mp4s to gifs, I opened my directory in the terminal and ran the following ffmpeg command, after converting the video to gif, I added and pushed the files to github. Since github does not show local embeds, I embedded the url of the gif from the github repository. \n```\nffmpeg -i line_tracking_animated.mp4 line_tracking_animated.gif\n```\n\nAlternatively, if you have <a href=\"https://ffmpeg.org/\">ffmpeg</a> installed, you can run the following cell to run it in a jupyter cell\n\nBreakdown of the command\n* `ffmpeg` tells the terminal to use ffmpeg\n* `-i` tells ffmpeg the input\n* `line_tracking_animated.mp4` tells ffmpeg the source file\n* `line_tracking_animated.gif` tells ffmpeg the output file title and format\n\n# Importing Libraries + Loading Data\n\n# Plotting Function\n<a class=\"anchor\" id=\"Plotting-Function\"></a>\nI wrote the `animateGraph` after modifying <a href=\"https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/\">Matplotlib Animation Tutorial</a> to work for my velocity data from the `Having Line Plotted Through Time` section and later `Having a Dot Tracking Along the Velocity Curve`. \n\nThe function takes the general structure of the respective and makes it into a single function\n\n## Explanation of Inputs\n* `df` input `DataFrame`\n* `x_column` column title for x axis\n* `y_column` column title for y axis\n* `dot_track` takes `yes` or `no`, if it is not `yes`, it will default to the line graph\n* `framerate` integer that specifies the video's framerate\n\n## Explanation of Variables\n\n### Setting Up Data Section\n* `x_df` `DataFrame` of just the x values, I seperated the x and y `DataFrames` to make it easier to follow in the animation function\n* `y_df` `DataFrame` of just the x values, I seperated the x and y `DataFrames` to make it easier to follow in the animation function\n* `x_max` maximum of the x values, used to set the bounds of x axis\n* `y_max` maximum of the y values, used to set the bounds of y axis, added `2` to make space for the time and velocity printouts\n* `last_index` used to prevent `Keyerror`, see `Figuring out Keyerror` section for a more in depth explanation\n\n### Graph Type Settings Section\n* `plot_dot` boolean used to decide which animation to use, if `True` will have animation output the dot tracker on graph\n* `graph_type` string used to keep track of the animation, used for filename\n    * can be either `dot_tracking` or `line_tracking`\n\n### Animation Settings\n* `time_seconds` takes last entry of x value to get the duration of the data converts from miliseconds to seconds, used later for `totalFrames` animation duration calculation\n* `totalFrames` product of `framerate` and `time_seconds` to get the number of frames for matplotlib to animate\n\n### Setting Up The Figure\n* `fig` figure variable, stores figure object\n    * the size was set to `(20,12)`\n    * I followed the suggestions to change the size and output a sample file from <a href=\"https://stackoverflow.com/questions/332289/how-do-you-change-the-size-of-figures-drawn-with-matplotlib\"> Stack Overflow How to Change Figure Size </a>\n    * I followed the suggestions to change the font size from <a href=\"https://stackoverflow.com/questions/3899980/how-to-change-the-font-size-on-a-matplotlib-plot\"> Stack Overflow How to Change Font Size </a> \n    \n### Setting Up Positions of X and Y Outputs For Value\n* I followed the example set by the matplotlib wiki from <a href=\"https://matplotlib.org/3.1.3/tutorials/text/text_props.html#sphx-glr-tutorials-text-text-props-py\"> Text properties and layout </a>\n* `y_value_print` text object, will set the y value, for the demo, we use velocity set for `right` and `top` is updated frame by frame in the `animate(i)` function\n* `x_value_print` text object, will set the x value, for the demo, we use time set for `left` and `top` is updated frame by frame in the `animate(i)` function\n\n### Setting Up The Line Plot \n* I used the `plot_dot` to determine which graph should be plotted\n    * if `plot_dot` is `True`, we will plot the existing graph and have the dot \n    * if `plot_dot` is `False`, we will plot the graph sections frame by frame\n* To get the red dot, I read the instructions of the different passable arguments from the matplotlib wiki from <a href=\"https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.plot.html#examples-using-matplotlib-pyplot-plot\"> matplotlib.pyplot.plot </a> \n\n### Initialization Function: Plot The Background of Each Frame\n* I kept the example set from the guide see `Working Through Matplotlib Animation Tutorial` for more details\n\n### Animation Function. This Is Called Sequentially\n* This section is broken up into two parts, \n    1. Checking if the function reaches the last value of the `DataFrame` \n    2. updating the x and y column print outs\n* To check if the function has reached the last value of the `DataFrame`, we have a `if` conditional that checks if the `animate` function has reached the end of the `DataFrame`, if it does, then it will use the value at `last_index`, we want it to keep the last value to avoid the `Keyerror` as explained in the later experimental section\n* Next, the function will set the `x_value` and `y_value` to be the final index value\n    * `x_value` and `y_value` is used for animating the labels for the values of x and y \n* Afterwards the function follow a second `if` statement, which will check if `plot_dot` is true or false\n    * if `plot_dot` is `False`, the function will output everything up until the current `i` index value. \n        * This is used for the animation that plots graph sections frame by frame\n    * if `plot_dot` is `True`, the function will output the current `i` index value. \n        * This is used for the animation that plots the point frame by frame\n* The next section will update the x and y column print out values for each frame I took inspiration from <a href=\"https://brushingupscience.com/2016/06/21/matplotlib-animations-the-easy-way/\"> \nMatplotlib animations the easy way </a> specifically the `\"Changing labels and text\"` section\n    * `values_x` is a string variable that stores the x column title, adds colons, and the x value\n    * `values_y` is a string variable that stores the y column title, adds colons, and the y value\n    * After setting `values_x` and `values_y` we use `.set_text()` to update the `y_value_print` and `x_value_print` each time\n* Once all the variables have been updated, `animate(i)` will return the `line` to the `animation.FuncAnimation()`, which will continue until it reaches the last frame\n\n### Save The Animation as an mp4.\n* I did not make significant changes to the original, I only changed the filename to match the graph type. \n    * I wanted the filename to be the ' `x_column` vs `y_column` `graph_type` _animated.mp4'\n    * The ideal file name would be 'Velocity_(m/s)_vs_Time (ms)_line_tracking_animated.mp4\n        * When I tried parsing the `x_column` as a string, python had serious issues with the slash (/) part of (m/s), enough so that it would prevent the file from being saved\n        * An potential alternative solution would to change m/s to m*s^-1, but it require changing the data or engineering a solution that read the units and replaced slashes with * unit^-1. After evaluating the alternatives, I realized it would be easier to rename the file. If this function were used to generate hundreds of graphs from hundreds of source files, I would need to find a better solution. Since the purpose of this function is to make it easier to change between the dot and line tracking, I did not invest any further time into developing an alternative solution\n\n# Working Through <a href=\"https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/\">Matplotlib Animation Tutorial</a>\n\nI used Jake Vanderplas's sine wave example posted below as a base to understand how matplotlib animates. I modified it to make it work with the velocity and time data I was given from my friend. \n\n## Having Line Plotted Through Time\n\nFrom the base I added my own modifications titled `Tracking a Line Through time`, which included\n* setting variables for velocity (`y_df`) and time (`x_df`) dataframes\n* setting maximums for x and y\n* setting a `time_seconds` variable that converts the time in milliseconds to seconds\n* setting a `framerate` variable that sets the framerate of the graph\n* setting a `totalFrames` variable that sets the duration of the animation\n* increasing the figure size from 64x64 to a bigger 18.5x10.4 inch higher resolution figure with `fig.set_size_inches()`\n* increasing the framerate to 60 frames a second (setting `framerate` to `60`), which makes the plot smoother\n   * only downside is that it will take extra time to encode the final mp4\n* modifying the limits.\n* adding titles for the figure\n* having the the animation plot the figure as time passes, rather needing a known function to plot it\n\n### Learning How Matplotlib plots\nIn the following cells, I experimented with the ranges for which data to be plotted. Once I figured out putting `start:end` into a dataframe, I used this for the first function\n\nWith an understanding of this property I was able to have the graph from `0` to the value at the specific frame.\n\n### Messing with labels\nWhen I intially made the velocity and time printouts, I thought about using `AnchoredText` boxes and having each frame update the boxes. Using this method was not the best as it made the processing of the animation take longer and the text boxes would not overlap. Later I learned how to animate text.\n\nAlthough not shown here, I later found <a href = https://brushingupscience.com/2016/06/21/matplotlib-animations-the-easy-way/> a very helpful guide that demonstrated animating text and labels </a>. I did not know that I could incoorperate text changes in the `animate` fucntion with on matplotlib. I implemented most of the changes of `set_text()` and `ax.text()` in the `animateGraph()` section. It was easier to modify `animateGraph()` as I could run it to get a output and would not have the same code in 3 other places of the notebook.\n\nAnother goal of this section was to experiment with matplotlib to get the outputs to my liking. I learned <a href =https://stackoverflow.com/questions/332289/how-do-you-change-the-size-of-figures-drawn-with-matplotlib> I could change the graph size with</a> `fig.set_size_inches()`\n\n### print statements\n\nI used these print statements to figure out why my maxes were not being rounded to the nearest whole number. \n\nInitially, I tried using `round( #number, #decimal places)`, <a href=\"https://stackoverflow.com/questions/31818050/round-number-to-nearest-integer\">from Stackoverflow</a> but the native function concatenated for values such as `20.5` to `20` instead of `21` \n\nEventually I found a detailed explanation behind the native python `round()` function <a href=\"https://realpython.com/python-rounding/\">from RealPython</a>, in addition to suggested alternative functions and libraries I could use that would solve the issue I was running into. The suggestion was to use `ceil` from the `math` libraries. I ended up using `ceil` from the `numpy` libraries since I didn't want to import another library\n\n\n## Having a Dot Tracking Along the Velocity Curve \n\nAfter making my modifications, I copied my modified version and further adjusted it further titled `Having a Dot Tracking Along the Velocity Curve` to print the plot first and have a single point track along the plotted graph\n\nChanges from the original `Having Line Plotted Through time`\n* added red dot for tracking instead of line\n    * used following additional arguments to set the dot `linestyle='none', marker = 'o', ms = 10, color='r'`, I learned of these parameters from adrian prince-whelan's demonstration of \n   <a href=\"https://adrian.pw/blog/matplotlib-transparent-animation/\">Making a Matplotlib animation with a transparent background</a> \n    * `linestyle='none'` prevents lines from being drawn\n    * `marker = 'o'` sets the dot \n    * `ms = 10` sets the dot size\n    * `color='r'` sets the dot color\n* messing with video transparency as well from the same post\n    * main issue right now is getting the correct save settings\n* changed x `linspace` value to have the previous frame\n    * added conditional where at `i=0`, `i` would start at `0` instead of `-1` when calling the `x_df[i-1]` and `x_df[i]` dataframe entry\n  \n\n## Figuring out `Keyerror`\n\nWhile running `Dot Tracking Along the Velocity Curve` I got a consistent `keyerror` when plotting i. The following code blocks helped me debug the values of i for each iteration.\n\nI later realized that the `keyerror` was caused by my totalFrames calculation, which took the last value of the data (milliseconds converted to seconds), multiplied it by the framerate, and was rounded to get total number of frames. Before changing to use the length of the dataframe, the `totalFrames` was `1333.98`, which was rounded to 1334. The `keyerror` occured because `animate(i)` uses the `frames` variable as a index. Once animate reached the length of the dataframe (`1319`) the animation stopped, but in the `animation.FuncAnimation()` function continued to pass values in for `i`. When computing for `x`, this caused a `keyerror` since `animation.FuncAnimation()` would continue to feed values in for `i`, but in the dataframe no such values existed.\n\nTo prevent this from happening, I added a conditional that when we reached the end of the dataframe, we would use the last value of the dataframe. \n\n# Messing with a overlapping graph\n\nwhile looking for solutions to animate the velocity and time outputs, I stumbled upon a method to use subplots. If I come back to this project, I would want to make a line tracing option, where a line plot is generated, and another plot will overlap\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"2020-07-02-animating-velocity-graph.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["cosmo","brand"],"title-block-banner":true,"aliases":["/2020/07/02/Animating-Velocity-Graph"],"date":"2020-07-02","description":"One of my friends approached me asking if I had any experience animating graphs, since I had experience with video editing. Though I had not had any formal experience, I decided that it would be a interesting challenge to embark.","image":"images/posts/matplotlib-animate/dot-tracking-animated.gif","title":"Using Matplotlib to Animate Data From a Velocity Recording","author":"progressEdd","categories":["Analysis","Visualization"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}